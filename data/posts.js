export const posts = [
  {
    title: 'A Mental Model to think in TypeScript',
    content:
      '<p>One day I came across a <a href="https://twitter.com/larimaza/status/1275747670989176833">tweet</a> from Lari Mazza that says</p>\n<blockquote>\n<p>&quot;Can I make a suggestion? Types are hard to understand when you’ve only worked with JS in your life and suddenly have to learn TypeScript&quot;</p>\n</blockquote>\n<p>As a software engineer that learned Python, Ruby, Javascript, and Clojure first, when I tried C++, it was a horror movie. I couldn&#39;t do much, so counterproductive, and frustrating. Maybe because I was doing everything wrong and I didn&#39;t understand types the right way.</p>\n<p>But even though I had so many problems, I could implement a bunch of <a href="https://github.com/imteekay/algorithms">algorithms and data structures</a>.</p>\n<p>Now I&#39;m using more and more Typescript in my day-to-today job and <a href="https://github.com/imteekay/laziness">my side projects</a>, I feel I&#39;m more prepared to confront types. Actually, not confront, but use them in my favor.</p>\n<p>This post is my attempt to help developers think more in types and understand this mental model.</p>\n<h2 id="javascript-types">Javascript types</h2>\n<p>If you&#39;re here, you probably heard that Typescript is a superset of Javascript. If not, great, you just learned something new today. YAY!</p>\n<p>Typescript is a superset because any Javascript code is valid in Typescript, syntactically speaking. It may or may not compile depending on the Typescript compiler configuration. But in terms of syntax, it works just fine. This is why you can migrate Javascript to Typescript progressively by just replacing the <code>.js</code> extension with the <code>.ts</code>. Everything will be without type declarations (the <code>any</code> type), but that&#39;s another story.</p>\n<p>Also, if you code in Javascript - or any other programming language - you probably think in types:</p>\n<ul>\n<li>&quot;Hm, it is a list of integers, so I&#39;ll need to filter only the even numbers and return a new list&quot;</li>\n<li>&quot;This is an object, but I just need to get this string value from the property X&quot;</li>\n<li>&quot;This function receives two parameters. Both A and B are integers and I want to sum them&quot;</li>\n</ul>\n<p>Yeah, you got the idea. We think in types. But they are just in our heads. We constantly think about them because we need to know how to handle, parse, or modify data. We need to know which methods we are allowed to use in this object type.</p>\n<p>To give a more concrete example, imagine you want to sum the price of all products. A product object looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> product = {\n  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Some product&#x27;</span>,\n  <span class="hljs-attr">price</span>: <span class="hljs-number">100.0</span>,\n};\n</code></pre>\n<p>But now with a list of products:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> products = [\n  {\n    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Product 1&#x27;</span>,\n    <span class="hljs-attr">price</span>: <span class="hljs-number">100.0</span>,\n  },\n  {\n    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Product 2&#x27;</span>,\n    <span class="hljs-attr">price</span>: <span class="hljs-number">25.0</span>,\n  },\n  {\n    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Product 3&#x27;</span>,\n    <span class="hljs-attr">price</span>: <span class="hljs-number">300.0</span>,\n  },\n];\n</code></pre>\n<p>Ok! Now we want a function to sum all the products prices.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sumAllPrices</span>(<span class="hljs-params">products</span>) {\n  <span class="hljs-keyword">return</span> products.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, product</span>) =&gt;</span> sum + product.<span class="hljs-property">price</span>, <span class="hljs-number">0</span>);\n}\n\n<span class="hljs-title function_">sumAllPrices</span>(products); <span class="hljs-comment">// 425</span>\n</code></pre>\n<p>Just receive the products as the argument and reduce all product prices. Javascript works just fine. But while building this function you start to think about the data and how to handle it properly.</p>\n<p>The first part: products as an argument. Here you just think: &quot;well, we&#39;re receiving a list of some objects&quot;. Yeah, in our heads the products are a list. This is why we can think of using the <code>reduce</code> method. It is a method from the <code>Array</code> prototype.</p>\n<p>Then we can think about the object in detail. We know that the product object has a <code>price</code> property. And this property is a number. This is why we can do <code>product.price</code> and sum with the accumulator.</p>\n<p>Recapping:</p>\n<ul>\n<li><code>products</code> is a list of objects.</li>\n<li>As a list, we can use the <code>reduce</code> method, as this method a member of the <code>Array</code> prototype.</li>\n<li>The <code>produce</code> object has some properties. One of them is the <code>price</code>, which is a number.</li>\n<li>As a number property, we can use it to sum with the reduce accumulator.</li>\n<li>We wanted to return the a number, the sum of all products prices.</li>\n</ul>\n<p>We are always thinking of data types, we just need to add the type annotations to make it more explicit and ask the compiler for help. Our memory is limited and the compilers are here to help us, humans.</p>\n<p>The type system will not only make our data more consistent, but it can also provide autocompletion for data types. It knows the types, so it can show the members for the data. We will take a look at this idea later. Here I just wanted to show that we think in types in our heads.</p>\n<h2 id="simples-types--simple-uses">Simples Types &amp; Simple Uses</h2>\n<p>So we are ready to use some strongly typed programming languages like Typescript. We simply need to explicitly add type annotations to our data structures. It&#39;s simple. But sometimes it&#39;s not that easy (usually it&#39;s not easy when you come from dynamically typed languages. You feel unproductive. It feels like a battle against types. The idea here is to make this learning curve more smooth and fun).</p>\n<p>Here we will see many examples of how to use types in Typescript. We start with easy and silly examples and progressively make it more complex while designing the mental model to think in types.</p>\n<p>As Javascript, Typescript also has basic data types like <code>number</code>, <code>string</code>, <code>boolean</code>, <code>null</code>, etc. You can find all the basic data types in the <a href="https://www.typescriptlang.org/docs/handbook/basic-types.html">Typescript Docs</a>.</p>\n<p>With these units of data, we can make our programs more useful. To be more practical, let&#39;s get a simple example. A <code>sum</code> function.</p>\n<p>How does it work in Javascript?</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b</span>) {\n  <span class="hljs-keyword">return</span> a + b;\n}\n</code></pre>\n<p>Everything ok? ok.</p>\n<p>Now let&#39;s use it:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 3</span>\n<span class="hljs-title function_">sum</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 4</span>\n<span class="hljs-title function_">sum</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;string&#x27;</span>); <span class="hljs-comment">// &#x27;0string&#x27;   WTF!</span>\n</code></pre>\n<p>The first two calls are what we expect to happen in our system. But Javascript is very flexible, it lets us provide any value to this function. The last call is bizarre. We can call with a string, but it will return an unexpected result. It doesn&#39;t break in development, but it will result in strange behavior in runtime.</p>\n<p>What do we want? We want to add some constraints to the function. It will only be able to receive numbers. That way, we narrow the possibility to have unexpected behaviors. And the function return type is also a number.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> {\n  <span class="hljs-keyword">return</span> a + b;\n}\n</code></pre>\n<p>Great! It was very simple. Let&#39;s call again.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 3</span>\n<span class="hljs-title function_">sum</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 4</span>\n<span class="hljs-title function_">sum</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;string&#x27;</span>); <span class="hljs-comment">// Argument of type &#x27;&quot;string&quot;&#x27; is not assignable to parameter of type &#x27;number&#x27;.</span>\n</code></pre>\n<p>As we type annotate our function, we provide information to the compiler to see if everything is correct. It will follow the constraints we added to the function.</p>\n<p>So the first two calls are the same as in Javascript. It will return the correct calculation. But the last one we have an error in compile time. This is important. The error now happens in compile time and prevents us to ship incorrect code to production. It says that the <code>string</code> type is not part of the set of values in the <code>number</code> type universe.</p>\n<p>For basic types, we just need to add colon followed by the type definition.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">isTypescript</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">24</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-attr">username</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;tk&#x27;</span>;\n</code></pre>\n<p>Now let&#39;s increase the challenge. Remember the product object code we wrote in Javascript? Let&#39;s implement it again, but now with the Typescript mindset.</p>\n<p>Just to remember what we are talking about:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> product = {\n  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Some product&#x27;</span>,\n  <span class="hljs-attr">price</span>: <span class="hljs-number">100.0</span>,\n};\n</code></pre>\n<p>This is the product value. It has a <code>title</code> as <code>string</code> and the <code>price</code> as <code>number</code>. For now, this is what we need to know.</p>\n<p>The object type would be something like:</p>\n<pre><code class="hljs language-tsx">{ <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span> }\n</code></pre>\n<p>And we use this type to annotate our function:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">product</span>: { <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>; <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span> } = {\n  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Some product&#x27;</span>,\n  <span class="hljs-attr">price</span>: <span class="hljs-number">100.0</span>,\n};\n</code></pre>\n<p>With this type, the compiler will know how to handle inconsistent data:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">wrongProduct</span>: { <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>; <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span> } = {\n  <span class="hljs-attr">title</span>: <span class="hljs-number">100.0</span>, <span class="hljs-comment">// Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span>\n  <span class="hljs-attr">price</span>: <span class="hljs-string">&#x27;Some product&#x27;</span>, <span class="hljs-comment">// Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.</span>\n};\n</code></pre>\n<p>Here it breaks in two different properties:</p>\n<ul>\n<li>The <code>title</code> is a <code>string</code> and should not receive a <code>number</code>.</li>\n<li>The <code>price</code> is a <code>number</code> and should not receive a <code>string</code>.</li>\n</ul>\n<p>The compiler helps us to catch type errors like that.</p>\n<p>We could improve this type annotation by using a concept called <code>Type Aliases</code>. It&#39;s a way to create a new name for a specific type.</p>\n<p>In our case, the product type could be:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Product</span> = {\n  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>;\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">product</span>: <span class="hljs-title class_">Product</span> = {\n  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Some product&#x27;</span>,\n  <span class="hljs-attr">price</span>: <span class="hljs-number">100.0</span>,\n};\n</code></pre>\n<p>It&#39;s better to visualize the type, add semantics, and maybe reuse in our system.</p>\n<p>Now that we have this product type, we can use it to type the products list. The syntax looks like this: <code>MyType[]</code>. In our case, <code>Product[]</code>.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">products</span>: <span class="hljs-title class_">Product</span>[] = [\n  {\n    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Product 1&#x27;</span>,\n    <span class="hljs-attr">price</span>: <span class="hljs-number">100.0</span>,\n  },\n  {\n    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Product 2&#x27;</span>,\n    <span class="hljs-attr">price</span>: <span class="hljs-number">25.0</span>,\n  },\n  {\n    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Product 3&#x27;</span>,\n    <span class="hljs-attr">price</span>: <span class="hljs-number">300.0</span>,\n  },\n];\n</code></pre>\n<p>Now the function <code>sumAllPrices</code>. It will receive the product and return a number, the sum of all product prices.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sumAllPrices</span>(<span class="hljs-params">products: Product[]</span>): <span class="hljs-built_in">number</span> {\n  <span class="hljs-keyword">return</span> products.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, product</span>) =&gt;</span> sum + product.<span class="hljs-property">price</span>, <span class="hljs-number">0</span>);\n}\n</code></pre>\n<p>This is very interesting. As we typed the product, when we write <code>product.</code>, it will show the possible properties we can use. In the product type case, it will show the properties <code>price</code> and <code>title</code>.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">sumAllPrices</span>(products); <span class="hljs-comment">// 425</span>\n<span class="hljs-title function_">sumAllPrices</span>([]); <span class="hljs-comment">// 0</span>\n<span class="hljs-title function_">sumAllPrices</span>([{ <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Test&#x27;</span>, <span class="hljs-attr">willFail</span>: <span class="hljs-literal">true</span> }]); <span class="hljs-comment">// Type &#x27;{ title: string; willFail: true; }&#x27; is not assignable to type &#x27;Product&#x27;.</span>\n</code></pre>\n<p>Passing the <code>products</code> will result in the value <code>425</code>. An empty list will result in the value <code>0</code>. And if we pass an object with a different structure - Typescript has a structural type system and we will dig deep into this topic later - the compiler will throw a type error telling that the structure is not part of the <code>Product</code> type.</p>\n<h2 id="structural-typing">Structural Typing</h2>\n<p>Structural typing is a type of type compatibility. It&#39;s a way to understand the compatibility between types based on its structure: features, members, properties. Some languages have type compatibility based on the names of the types, and it&#39;s called nominal typing.</p>\n<p>For example, in Java, even if different types have the same structure, it will throw a compile error because we are using a different type to instantiate and define a new instance.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> {\n  <span class="hljs-title class_">String</span> name;\n}\n\n<span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> {\n  <span class="hljs-title class_">String</span> name;\n}\n\n<span class="hljs-title class_">Client</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();  <span class="hljs-comment">// compiler throws an error</span>\n<span class="hljs-title class_">Client</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>();  <span class="hljs-comment">// OK!</span>\n</code></pre>\n<p>In nominal type systems, the relevant part of a type is the name, not the structure.</p>\n<p>Typescript, on another hand, verifies the structural compatibility to allow or not specific data. Its type system is based on structural typing.</p>\n<p>The same code implementation that crashes in Java, would work in Typescript.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n}\n\n<span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n}\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">c1</span>: <span class="hljs-title class_">Client</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(); <span class="hljs-comment">// OK!</span>\n<span class="hljs-keyword">const</span> <span class="hljs-attr">c2</span>: <span class="hljs-title class_">Client</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>(); <span class="hljs-comment">// OK!</span>\n</code></pre>\n<p>We want to use the <code>Client</code> type, and it has the property <code>name</code>, to point to the <code>Person</code> type. It also has the property type. So Typescript will understand that both types have the same shape.</p>\n<p>But it is not only about classes, but it works for any other &quot;object&quot;.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">c3</span>: <span class="hljs-title class_">Client</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>,\n};\n</code></pre>\n<p>This code compiles too because we have the same structure here. The typescript type system doesn&#39;t care about if it is a class, or an object literal if it has the same members, it will be flexible and compile.</p>\n<p>But now we will add a third type: the <code>Customer</code>.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;\n}\n</code></pre>\n<p>It not only has the <code>name</code> property, but also the <code>age</code>. What would happen if we instantiate a <code>Client</code> instance in a constant of type <code>Customer</code>?</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">c4</span>: <span class="hljs-title class_">Customer</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>();\n</code></pre>\n<p>The compiler will not accept that. We want to use the <code>Customer</code>, that has <code>name</code> and <code>age</code>. But we are instantiating the <code>Client</code> that has only the <code>name</code> property. So it doesn&#39;t have the same shape. It will cause an error:</p>\n<pre><code class="hljs language-bash">Property <span class="hljs-string">&#x27;age&#x27;</span> is missing <span class="hljs-keyword">in</span> <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;Client&#x27;</span> but required <span class="hljs-keyword">in</span> <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;Customer&#x27;</span>.\n</code></pre>\n<p>The other way around would work because we want <code>Client</code>, and <code>Customer</code> has all the properties (<code>name</code>) from <code>Client</code>.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">c5</span>: <span class="hljs-title class_">Client</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>();\n</code></pre>\n<p>It works fine!</p>\n<p>We can go on for enums, object literals, and any other type, but the idea here is to understand that the structure of the type is the relevant part.</p>\n<h2 id="runtime-and-compile-time">Runtime and Compile time</h2>\n<p>This is a much more complex topic in programming language theory, but I wanted to give some examples to distinct runtime and compile time.</p>\n<p>Basically, the runtime is the execution time of a program. Imagine your backend receiving data from a frontend form page, handling this data, and saving it. Or when your frontend is requesting data from a server to render a list of <del>Pokemons</del> products.</p>\n<p>Compile time is basically when the compiler is executing operations in the source code to satisfy the programming language requirements. It can include type checking as an operation for example. Compile time errors in Typescript, for example, is very related to the code that we wrote before:</p>\n<ul>\n<li>When the type is missing property: <code>Property &#39;age&#39; is missing in type &#39;Client&#39; but required in type &#39;Customer&#39;.</code></li>\n<li>When the type doesn&#39;t match: <code>Type &#39;{ title: string; willFail: true; }&#39; is not assignable to type &#39;Product&#39;.</code></li>\n</ul>\n<p>Let&#39;s see some examples to have a better understanding.</p>\n<p>I want to write a function to get the index of a part of the passed programming language.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getIndexOf</span>(<span class="hljs-params">language, part</span>) {\n  <span class="hljs-keyword">return</span> language.<span class="hljs-title function_">indexOf</span>(part);\n}\n</code></pre>\n<p>It receives the <code>language</code> and the <code>part</code> that we will look for to get the index.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">getIndexOf</span>(<span class="hljs-string">&#x27;Typescript&#x27;</span>, <span class="hljs-string">&#x27;script&#x27;</span>); <span class="hljs-comment">// 4</span>\n<span class="hljs-title function_">getIndexOf</span>(<span class="hljs-number">42</span>, <span class="hljs-string">&#x27;script&#x27;</span>); <span class="hljs-comment">// Uncaught TypeError: language.indexOf is not a function at getIndexOf</span>\n</code></pre>\n<p>When passing a string, it works fine. But passing a number, we got a runtime error <code>Uncaught TypeError</code>. Because a number doesn&#39;t have an <code>indexOf</code> function, so we can&#39;t really use it.</p>\n<p>But if we give type information to the compiler, in compile time, it will throw an error before running the code.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getIndexOf</span>(<span class="hljs-params">language: <span class="hljs-built_in">string</span>, part: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">number</span> {\n  <span class="hljs-keyword">return</span> language.<span class="hljs-title function_">indexOf</span>(part);\n}\n</code></pre>\n<p>Now our program knows that it will need to receive two strings and return a number. The compiler can use this information to throw errors when we get a type error... before runtime.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">getIndexOf</span>(<span class="hljs-string">&#x27;Typescript&#x27;</span>, <span class="hljs-string">&#x27;script&#x27;</span>); <span class="hljs-comment">// 4</span>\n<span class="hljs-title function_">getIndexOf</span>(<span class="hljs-number">42</span>, <span class="hljs-string">&#x27;script&#x27;</span>); <span class="hljs-comment">// Argument of type &#x27;42&#x27; is not assignable to parameter of type &#x27;string&#x27;.</span>\n</code></pre>\n<p>Maybe, for small projects (or small functions like ours) we don&#39;t really see too much benefit. In this case, we know that we need to pass a string, so we won&#39;t pass a number to the function. But when the codebase grows or you have many people adding code and more complexity, it&#39;s clear to me that a type system can help us a lot to get errors in compile time before shipping code to production.</p>\n<p>At first, we need all the learning curve to understand types and all the mental models, but after a while, you&#39;ll be more used to type annotations and eventually become friends with the compiler. It would be a <em>helper</em>, not a <em>yeller</em>.</p>\n<p>As we are learning about the basic difference between compile time and runtime, I think it&#39;s great to differentiate types from values.</p>\n<p>All the examples I&#39;ll show here can be copied and run in the <a href="https://www.typescriptlang.org/play">Typescript Playground</a> to understand the compiler and the result of the compilation process (aka the <em>&quot;Javascript&quot;</em>).</p>\n<p>In Typescript, we have two different universes: the value and the type spaces. The type space is where types are defined and used to enable the compiler to do all the great magic. And the value space is the values in our programs like variables, constants, functions, value literals, and things that we have in runtime.</p>\n<p>It&#39;s good to have an understanding of this concept because in Typescript we can&#39;t use type checking in runtime. It has a very clear separation between type checking and the compilation process.</p>\n<p>Typescript has the process of type checking the source code types and sees if everything is correct and consistent. And then it can compile to Javascript. As these two parts are separate, we can&#39;t use type checking in runtime. Only in &quot;compile time&quot;. If you try to use a type as a value, it will throw an error: <code>only refers to a type, but is being used as a value here</code>.</p>\n<p>Let&#39;s see examples of this idea.</p>\n<p>Imagine we want to write a function called <code>purchase</code> where we receive a payment method and based on this method, we want to do some action. We have a credit card and a debit card. Let&#39;s define them here:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">CreditCard</span> = {\n  <span class="hljs-attr">number</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">cardholder</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">expirationDate</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">secutiryCode</span>: <span class="hljs-built_in">number</span>;\n};\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">DebitCard</span> = {\n  <span class="hljs-attr">number</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">cardholder</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">expirationDate</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">secutiryCode</span>: <span class="hljs-built_in">number</span>;\n};\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">PaymentMethod</span> = <span class="hljs-title class_">CreditCard</span> | <span class="hljs-title class_">DebitCard</span>;\n</code></pre>\n<p>These types are in the <em>Type space</em>, so it only works in compile time. After type checking this function, the compiler removes all the types.</p>\n<p>If you add these types in the Typescript Playground, the output will be only a strict definition <code>&quot;use strict&quot;;</code>.</p>\n<p>The idea here is to really understand that the types live in the <em>Type space</em> and will not be available in the runtime. So in our function, it won&#39;t be possible to do this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">purchase</span> = (<span class="hljs-params">paymentMethod: PaymentMethod</span>) =&gt; {\n  <span class="hljs-keyword">if</span> (paymentMethod <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">CreditCard</span>) {\n    <span class="hljs-comment">// purchase with credit card</span>\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-comment">// purchase with debit card</span>\n  }\n};\n</code></pre>\n<p>In compiler throws an error: <code>&#39;CreditCard&#39; only refers to a type, but is being used as a value here.</code>.</p>\n<p>The compiler knows the difference between the two spaces and that the type <code>CreditCard</code> lives in the <em>Type space</em>.</p>\n<p>The playground is a very cool tool to see the output of your Typescript code. If you create a new credit card object like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">creditCard</span>: <span class="hljs-title class_">CreditCard</span> = {\n  <span class="hljs-attr">number</span>: <span class="hljs-number">2093</span>,\n  <span class="hljs-attr">cardholder</span>: <span class="hljs-string">&#x27;TK&#x27;</span>,\n  <span class="hljs-attr">expirationDate</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),\n  <span class="hljs-attr">secutiryCode</span>: <span class="hljs-number">101</span>,\n};\n</code></pre>\n<p>The compiler will type check it and do all the magic and then it transpiles the Typescript code to Javascript. And we have this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> creditCard = {\n  <span class="hljs-attr">number</span>: <span class="hljs-number">2093</span>,\n  <span class="hljs-attr">cardholder</span>: <span class="hljs-string">&#x27;TK&#x27;</span>,\n  <span class="hljs-attr">expirationDate</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),\n  <span class="hljs-attr">secutiryCode</span>: <span class="hljs-number">101</span>,\n};\n</code></pre>\n<p>The same object, but now only with the value and without the type.</p>\n<h2 id="constraints--type-narrowing">Constraints &amp; Type Narrowing</h2>\n<blockquote>\n<p>When we restrict what we can do, it’s easier to understand what we can do.</p>\n</blockquote>\n<p>We use types as constraints to limit the bugs in your program. To understand this concept, I&#39;m stealing an example from Lauren Tan&#39;s talk about Type Systems.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">half</span> = (<span class="hljs-params">x</span>) =&gt; x / <span class="hljs-number">2</span>;\n</code></pre>\n<p>How many ways does this function can fail? Imagine a number of possible inputs:</p>\n<pre><code class="hljs language-tsx">[\n  <span class="hljs-literal">null</span>,\n  <span class="hljs-literal">undefined</span>,\n  <span class="hljs-number">0</span>,\n  <span class="hljs-string">&#x27;0&#x27;</span>,\n  <span class="hljs-string">&#x27;TK&#x27;</span>,\n  { <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;tk&#x27;</span> },\n  [<span class="hljs-number">42</span>, <span class="hljs-number">3.14</span>],\n  <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b,\n];\n</code></pre>\n<p>And what are the results for input:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">half</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 0</span>\n<span class="hljs-title function_">half</span>(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">// NaN</span>\n<span class="hljs-title function_">half</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 0</span>\n<span class="hljs-title function_">half</span>(<span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">// 0</span>\n<span class="hljs-title function_">half</span>(<span class="hljs-string">&#x27;TK&#x27;</span>); <span class="hljs-comment">// NaN</span>\n<span class="hljs-title function_">half</span>({ <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;tk&#x27;</span> }); <span class="hljs-comment">// NaN</span>\n<span class="hljs-title function_">half</span>([<span class="hljs-number">42</span>, <span class="hljs-number">3.14</span>]); <span class="hljs-comment">// NaN</span>\n<span class="hljs-title function_">half</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b); <span class="hljs-comment">// NaN</span>\n</code></pre>\n<p>We have different and unexpected results here. Here it&#39;s clear that we want a number as the <code>half</code> function, do the calculation, and great, it&#39;s done! But sometimes we don&#39;t control the input or the codebase is big, or new/unfamiliar, and we&#39;re able to make these little mistakes.</p>\n<p>The idea of adding constraints to our code is to narrow the possibilities of a range of types. In this case, we want to limit the input type to a <code>number</code> type. It&#39;s the only type that we care about to do the half calculation. With type narrowing, we again give type information to the compiler.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">half</span> = (<span class="hljs-params">x: <span class="hljs-built_in">number</span></span>) =&gt; x / <span class="hljs-number">2</span>;\n</code></pre>\n<p>And with this new information, if we call the function with the test cases again, we have different results:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">half</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// Argument of type &#x27;null&#x27; is not assignable to parameter of type &#x27;number&#x27;.</span>\n<span class="hljs-title function_">half</span>(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">// Argument of type &#x27;undefined&#x27; is not assignable to parameter of type &#x27;number&#x27;.(</span>\n<span class="hljs-title function_">half</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 0</span>\n<span class="hljs-title function_">half</span>(<span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">// Argument of type &#x27;&quot;0&quot;&#x27; is not assignable to parameter of type &#x27;number&#x27;.</span>\n<span class="hljs-title function_">half</span>(<span class="hljs-string">&#x27;TK&#x27;</span>); <span class="hljs-comment">// Argument of type &#x27;&quot;TK&quot;&#x27; is not assignable to parameter of type &#x27;number&#x27;.</span>\n<span class="hljs-title function_">half</span>({ <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;tk&#x27;</span> }); <span class="hljs-comment">// Argument of type &#x27;{ username: string; }&#x27; is not assignable to parameter of type &#x27;number&#x27;.</span>\n<span class="hljs-title function_">half</span>([<span class="hljs-number">42</span>, <span class="hljs-number">3.14</span>]); <span class="hljs-comment">// Argument of type &#x27;number[]&#x27; is not assignable to parameter of type &#x27;number&#x27;.</span>\n<span class="hljs-title function_">half</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b); <span class="hljs-comment">// Argument of type &#x27;(a: any, b: any) =&gt; any&#x27; is not assignable to parameter of type &#x27;number&#x27;.</span>\n</code></pre>\n<p>Basically the compiler will tell us that only the number type, in this case, the <code>0</code> value, is a valid input, it will compile, and allow to run the code. We narrow the input type and allow only the value we really want for this function.</p>\n<p>But are other ways to narrow the types in Typescript. Imagine we have a function that receives a parameter that can be either a string or a number.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">StringOrNumber</span> = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">stringOrNumber</span>(<span class="hljs-params">value: StringOrNumber</span>) {}\n</code></pre>\n<p>In the function body, the compiler won&#39;t know which methods or properties we can use for this type. Is it a string or number? We only know about the value in runtime. But we can narrow the type using the <code>typeof</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">stringOrNumber</span>(<span class="hljs-params">value: StringOrNumber</span>) {\n  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;string&#x27;</span>) {\n    <span class="hljs-comment">// value.</span>\n    <span class="hljs-comment">// your ide will show you the possible methods from the string type</span>\n    <span class="hljs-comment">// (parameter) value: string</span>\n    value;\n  }\n\n  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;number&#x27;</span>) {\n    <span class="hljs-comment">// value.</span>\n    <span class="hljs-comment">// your ide will show you the possible methods from the number type</span>\n    <span class="hljs-comment">// (parameter) value: number</span>\n    value;\n  }\n}\n</code></pre>\n<p>With an <code>if</code> statement and the <code>typeof</code>, we can give more information to the compiler. Now it will know the specific type for each <code>if</code> body.</p>\n<p>The IDE knows what to show for the specific type. In runtime, when the value is a string, it will go to the first <code>if</code> statement, and the compiler will infer that the type is a string: <code>(parameter) value: string</code>.</p>\n<p>When the value is a number, it will go to the second <code>if</code> statement and the compiler will infer that a type is a number: <code>(parameter) value: number</code>.</p>\n<p>The <code>if</code> statement can be a helper to the compiler.</p>\n<p>Another example is when we have an optional property in an object, but in a function, we need to return a value based on this optional value.</p>\n<p>Imagine we have this type:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">User</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">address</span>: {\n    <span class="hljs-attr">street</span>: <span class="hljs-built_in">string</span>;\n    complement?: <span class="hljs-built_in">string</span>;\n  };\n};\n</code></pre>\n<p>It&#39;s a simple <code>User</code> type. Let&#39;s focus on the <code>complement</code> property. It&#39;s optional (take a closer look at the <code>?</code> symbol), which means that it can be a <code>string</code> or <code>undefined</code>.</p>\n<p>Now we want to build a function to receive the user and get the length of the address complement. What about this?</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getComplementLength</span>(<span class="hljs-params">user: User</span>): <span class="hljs-built_in">number</span> {\n  <span class="hljs-keyword">return</span> user.<span class="hljs-property">address</span>.<span class="hljs-property">complement</span>.<span class="hljs-property">length</span>;\n  <span class="hljs-comment">// (property) complement?: string | undefined</span>\n  <span class="hljs-comment">// Object is possibly &#x27;undefined&#x27;.</span>\n}\n</code></pre>\n<p>As we see earlier, the <code>complement</code> can be a <code>string</code> or <code>undefined</code>. <code>undefined</code> doesn&#39;t really have a property called <code>length</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title class_">Uncaught</span> <span class="hljs-title class_">TypeError</span>: <span class="hljs-title class_">Cannot</span> read property <span class="hljs-string">&#x27;length&#x27;</span> <span class="hljs-keyword">of</span> <span class="hljs-literal">undefined</span>\n</code></pre>\n<p>We could make something like:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getComplementLength</span>(<span class="hljs-params">user: User</span>) {\n  <span class="hljs-keyword">return</span> user.<span class="hljs-property">address</span>.<span class="hljs-property">complement</span>?.<span class="hljs-property">length</span>;\n}\n</code></pre>\n<p>If the <code>complement</code> has a string value, we can call <code>length</code>, otherwise, it will return <code>undefined</code>. So this function has two possible return types: <code>number | undefined</code>. But we want to ensure that we only return <code>number</code>. So we use a <code>if</code> or a ternary condition to narrow the type. It will only call <code>.length</code> when it has real value (or when it is not <code>undefined</code>).</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getComplementLength</span>(<span class="hljs-params">user: User</span>): <span class="hljs-built_in">number</span> {\n  <span class="hljs-keyword">return</span> user.<span class="hljs-property">address</span>.<span class="hljs-property">complement</span> ? user.<span class="hljs-property">address</span>.<span class="hljs-property">complement</span>.<span class="hljs-property">length</span> : <span class="hljs-number">0</span>;\n}\n</code></pre>\n<p>If it is <code>undefined</code>, we return the minimum length: <code>0</code>. Now we can use the function with the right type design with and without the complement. Without compile and runtime errors.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">getComplementLength</span>({\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>,\n  <span class="hljs-attr">address</span>: {\n    <span class="hljs-attr">street</span>: <span class="hljs-string">&#x27;Shinjuku Avenue&#x27;</span>,\n  },\n}); <span class="hljs-comment">// 0</span>\n\n<span class="hljs-title function_">getComplementLength</span>({\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>,\n  <span class="hljs-attr">address</span>: {\n    <span class="hljs-attr">street</span>: <span class="hljs-string">&#x27;Shinjuku Avenue&#x27;</span>,\n    <span class="hljs-attr">complement</span>: <span class="hljs-string">&#x27;A complement&#x27;</span>,\n  },\n}); <span class="hljs-comment">// 12</span>\n</code></pre>\n<p>We&#39;ll get <code>0</code> from the first function call and <code>12</code> from the second call.</p>\n<p>With this <code>if</code> concept, we can also use other helpers to do the same thing. We could use the <code>in</code> operator to verify a property from an object, a <code>Array.isArray</code> to verify an array, or the <code>instanceof</code> for any other class type.</p>\n<p>We could also use more advanced concepts like assertion function or type guards, but I&#39;ll let these concepts to future posts.</p>\n<p>One thing that I want to dig deep in this <em>Constraints</em> topic is immutability.</p>\n<p>In Javascript and Typescript, we have the idea of mutable objects. If you define value in a variable, we can reassign it with another value later.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">let</span> email = <span class="hljs-string">&#x27;harry.potter@mail.com&#x27;</span>;\nemail; <span class="hljs-comment">// &#x27;harry.potter@mail.com&#x27;</span>\nemail = <span class="hljs-string">&#x27;hermione.granger@mail.com&#x27;</span>;\nemail; <span class="hljs-comment">// &#x27;hermione.granger@mail.com&#x27;</span>\n</code></pre>\n<p>Now imagine you have a list of numbers. And you want to use a function to sum all of its numbers. The function looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sumNumbers</span>(<span class="hljs-params">numbers: <span class="hljs-built_in">number</span>[]</span>) {\n  <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;\n  <span class="hljs-keyword">let</span> num = numbers.<span class="hljs-title function_">pop</span>();\n\n  <span class="hljs-keyword">while</span> (num !== <span class="hljs-literal">undefined</span>) {\n    sum += num;\n    num = numbers.<span class="hljs-title function_">pop</span>();\n  }\n\n  <span class="hljs-keyword">return</span> sum;\n}\n</code></pre>\n<p>You call the function passing your list and get the result. It works just fine.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];\n<span class="hljs-title function_">sumNumbers</span>(list); <span class="hljs-comment">// 10</span>\n</code></pre>\n<p>But what happened to your list? Did the function mutate it entirely?</p>\n<pre><code class="hljs language-tsx">list; <span class="hljs-comment">// []</span>\n</code></pre>\n<p>If we use the list, it&#39;s empty now. The <code>pop</code> in the <code>sumNumbers</code> function is a &quot;mutate&quot; function. It gets the references and removes the item from them. It&#39;s not a copy, it&#39;s the real reference.</p>\n<p>In runtime, we can use other functions or ways to do the same thing: using reduce, do a for loop without the need to <code>pop</code> items from the array.</p>\n<p>But using Typescript, we can provide immutability in compile time. If you are not using types, it&#39;s possible to use a type assertion <code>as const</code>. Imagine this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> author = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Walter Isaacson&#x27;</span>,\n  <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;walter.isaacson@mail.com&#x27;</span>,\n  <span class="hljs-attr">books</span>: [\n    {\n      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Leonardo Da Vinci&#x27;</span>,\n      <span class="hljs-attr">price</span>: <span class="hljs-number">50.0</span>,\n    },\n  ],\n};\n\nauthor.<span class="hljs-property">books</span>.<span class="hljs-title function_">push</span>({\n  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Steve Jobs&#x27;</span>,\n  <span class="hljs-attr">price</span>: <span class="hljs-number">10.0</span>,\n});\n</code></pre>\n<p>Just an author object and then we add a new book to this author. The <code>push</code> method updates the book&#39;s array reference. It&#39;s a &quot;mutate&quot; method. Let&#39;s see if you use the const assertion <code>as const</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> author = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Walter Isaacson&#x27;</span>,\n  <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;walter.isaacson@mail.com&#x27;</span>,\n  <span class="hljs-attr">books</span>: [\n    {\n      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Leonardo Da Vinci&#x27;</span>,\n      <span class="hljs-attr">price</span>: <span class="hljs-number">50.0</span>,\n    },\n  ],\n} <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span>;\n\nauthor.<span class="hljs-property">books</span>.<span class="hljs-title function_">push</span>({\n  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Steve Jobs&#x27;</span>,\n  <span class="hljs-attr">price</span>: <span class="hljs-number">10.0</span>,\n});\n<span class="hljs-comment">// Property &#x27;push&#x27; does not exist on type</span>\n<span class="hljs-comment">// &#x27;readonly [{ readonly title: &quot;Leonardo Da Vinci&quot;; readonly price: 50; }]&#x27;</span>\n</code></pre>\n<p>The compiler won&#39;t compile. It gets an error on the author&#39;s object. It&#39;s is now readonly, and as a readonly object, it has no method called <code>push</code> (or any &quot;mutate&quot; method). We added a constraint to the author&#39;s object. Before it was a specific type (with all the &quot;mutate&quot; methods), and now we narrowed the type to be almost the same, but without the &quot;mutate&quot; methods. Type narrowing.</p>\n<p>To continue, let&#39;s add types to this object. The <code>book</code> and the <code>author</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Book</span> = {\n  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>;\n};\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">Author</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">books</span>: <span class="hljs-title class_">Book</span>[];\n};\n</code></pre>\n<p>Add the type to the author object:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">author</span>: <span class="hljs-title class_">Author</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Walter Isaacson&#x27;</span>,\n  <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;walter.isaacson@mail.com&#x27;</span>,\n  <span class="hljs-attr">books</span>: [\n    {\n      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Leonardo Da Vinci&#x27;</span>,\n      <span class="hljs-attr">price</span>: <span class="hljs-number">50.0</span>,\n    },\n  ],\n};\n</code></pre>\n<p>Add the type to a new book object:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">book</span>: <span class="hljs-title class_">Book</span> = {\n  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Steve Jobs&#x27;</span>,\n  <span class="hljs-attr">price</span>: <span class="hljs-number">30</span>,\n};\n</code></pre>\n<p>And now we can add the new book to the author:</p>\n<pre><code class="hljs language-tsx">author.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;TK&#x27;</span>;\nauthor.<span class="hljs-property">books</span>.<span class="hljs-title function_">push</span>(book);\n</code></pre>\n<p>It works just fine!</p>\n<p>I want to show another way to add immutability in compile time. Typescript has an utility type called <code>Readonly</code>.</p>\n<p>You can add the <code>readonly</code> for each property in an object. Something like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Book</span> = {\n  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>;\n};\n</code></pre>\n<p>But it can be very repetitive. So we can use the <code>Readonly</code> utility to add the <code>readonly</code> to all properties of an object:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Book</span> = <span class="hljs-title class_">Readonly</span>&lt;{\n  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>;\n}&gt;;\n</code></pre>\n<p>One thing to keep in mind is that it doesn&#39;t add the readonly for nested properties. For example, if we add the <code>Readonly</code> to the <code>Author</code> type, it won&#39;t add the <code>readonly</code> to the <code>Book</code> type too.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Author</span> = <span class="hljs-title class_">Readonly</span>&lt;{\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">books</span>: <span class="hljs-title class_">Book</span>[];\n}&gt;;\n</code></pre>\n<p>All the properties from the author can&#39;t be reassigned, but you can mutate the <code>books</code> list here (<code>push</code>, <code>pop</code>, ...) because the <code>Book[]</code> is not readonly. Let&#39;s see it.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">author</span>: <span class="hljs-title class_">Author</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Walter Isaacson&#x27;</span>,\n  <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;walter.isaacson@mail.com&#x27;</span>,\n  <span class="hljs-attr">books</span>: [\n    {\n      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Leonardo Da Vinci&#x27;</span>,\n      <span class="hljs-attr">price</span>: <span class="hljs-number">50.0</span>,\n    },\n  ],\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">book</span>: <span class="hljs-title class_">Book</span> = {\n  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Steve Jobs&#x27;</span>,\n  <span class="hljs-attr">price</span>: <span class="hljs-number">30</span>,\n};\n\nauthor.<span class="hljs-property">books</span>.<span class="hljs-title function_">push</span>(book);\nauthor.<span class="hljs-property">books</span>;\n<span class="hljs-comment">/* =&gt;\n *\n * [\n *   {\n *     title: &#x27;Leonardo Da Vinci&#x27;,\n *     price: 50.00,\n *   },\n *   {\n *    title: &#x27;Steve Jobs&#x27;,\n *    price: 30\n *   }\n * ]\n *\n */</span>\n</code></pre>\n<p>The <code>push</code> will work just fine.</p>\n<p>So, how do we enforce a readonly to the <code>books</code>? We need to make sure that the array is a readonly type. We can use the <code>Readonly</code>, or use another utility from Typescript called <code>ReadonlyArray</code>. Let&#39;s see the two ways to do it.</p>\n<p>With <code>Readonly</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Author</span> = <span class="hljs-title class_">Readonly</span>&lt;{\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">books</span>: <span class="hljs-title class_">Readonly</span>&lt;<span class="hljs-title class_">Book</span>[]&gt;;\n}&gt;;\n</code></pre>\n<p>With <code>ReadonlyArray</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Author</span> = <span class="hljs-title class_">Readonly</span>&lt;{\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">books</span>: <span class="hljs-title class_">ReadonlyArray</span>&lt;<span class="hljs-title class_">Book</span>&gt;;\n}&gt;;\n</code></pre>\n<p>For me, both work great! But in my opinion, <code>ReadonlyArray</code> is more semantic and I also feel it is less verbose (not that the <code>Readonly</code> with an array is).</p>\n<p>What happened if we try to mutate the author object now?</p>\n<pre><code class="hljs language-tsx">author.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;TK&#x27;</span>; <span class="hljs-comment">// Cannot assign to &#x27;name&#x27; because it is a read-only property.</span>\nauthor.<span class="hljs-property">books</span>.<span class="hljs-title function_">push</span>(book); <span class="hljs-comment">// Property &#x27;push&#x27; does not exist on type &#x27;readonly [{ readonly title: &quot;Leonardo Da Vinci&quot;; readonly price: 50; }]&#x27;.</span>\n</code></pre>\n<p>Great! Now we can catch mutable operations in compile time. This is a way to use the concept of adding constraints to our types to make sure they only do what is really needed.</p>\n<h2 id="semantics--readability">Semantics &amp; Readability</h2>\n<p>At first, I felt that Typescript could be very verbose because of the types and make the code much more complex than it should be. And it actually can. Strive for simplicity is the goal and it is difficult at the same time.</p>\n<p>This idea is very related to clean code and how we can write code to be human-readable and maintainable. Typescript is no different. Most of the cases, we don&#39;t need super complex types. Let the simple types do the work.</p>\n<p>Another thing that I find very useful is semantic of types.</p>\n<p>Imagine you need to add a string to the <code>sessionStorage</code> to save it in the browser. Your function looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">saveMyString</span>(<span class="hljs-params">value: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">any</span> {\n  sessionStorage.<span class="hljs-property">myString</span> = value;\n}\n</code></pre>\n<p>You add a type annotation to the string input and as you don&#39;t know about the returning type, you probably add a <code>any</code> type.</p>\n<p>But what&#39;s the real meaning behind this returning type? Is it returning anything?</p>\n<p>It just saves the string to the <code>sessionStorage</code>. It doesn&#39;t return anything. The <code>void</code> type was what you&#39;re looking for. As Typescript docs says: <code>the absence of having any type at all</code>.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">saveMyString</span>(<span class="hljs-params">value: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">void</span> {\n  sessionStorage.<span class="hljs-property">myString</span> = value;\n}\n</code></pre>\n<p>Great, the meaning of the type is correct now. The correctness is very important in a type system. It&#39;s a way to model our data, but also help maintain systems for future developers. Even if the developer is ... you!</p>\n<p>Before we were talking about verbose code. And we can improve a lot of our code by using Typescript type inference.</p>\n<p>For some code, we don&#39;t need to explicitly add type annotation. The Typescript compiler will understand and infer it implicitly. For example:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span>;\n</code></pre>\n<p>This code is redundant. We can just let the compiler infers it like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> num = <span class="hljs-number">1</span>;\n</code></pre>\n<p>In our example earlier, we add the annotation <code>void</code> to the <code>saveMyString</code> function. But as the function doesn&#39;t return any value, the compiler will infer that the returning type is <code>void</code> implicitly.</p>\n<p>When I learned this, I thought with myself. But one of the biggest advantages of using Typescript (or any other type system / static type language) is types as documentation. If we let the compiler infer most of the types, we won&#39;t have the documentation we want.</p>\n<p>But if you hover over the Typescript code in your editor (at least VS Code works like that), you can see the type information and relevant documentation.</p>\n<p>Let&#39;s see other examples of redundant code and make the code less verbose and let the compiler works for us.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> {\n  <span class="hljs-keyword">return</span> a + b;\n}\n</code></pre>\n<p>We don&#39;t need the returning type <code>number</code>, because the compiler knows that a <code>number</code> + another <code>number</code> is equal to a <code>number</code> type, and it is the returning type. It can be:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) {\n  <span class="hljs-keyword">return</span> a + b;\n}\n</code></pre>\n<p>Implicit code, but with documentation, and the compiler does the work.</p>\n<p>Type inference works for methods too:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">squareAll</span>(<span class="hljs-params">numbers: <span class="hljs-built_in">number</span>[]</span>): <span class="hljs-built_in">number</span>[] {\n  <span class="hljs-keyword">return</span> numbers.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> * <span class="hljs-built_in">number</span>);\n}\n</code></pre>\n<p>This function gets a list of numbers and makes every number a squared value. The returning type is <code>number[]</code>, even though the result of a map is always a list, and as we have a list of numbers, it will always be a list of numbers. So we let the compiler infers this too:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">squareAll</span>(<span class="hljs-params">numbers: <span class="hljs-built_in">number</span>[]</span>) {\n  <span class="hljs-keyword">return</span> numbers.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> * <span class="hljs-built_in">number</span>);\n}\n</code></pre>\n<p>This works the same way for objects too.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>: { <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> } = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>,\n  <span class="hljs-attr">age</span>: <span class="hljs-number">24</span>,\n};\n</code></pre>\n<p>A person object with a string name and a number age. But as we are assigning these values, the compiler can infer these types.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> person = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>,\n  <span class="hljs-attr">age</span>: <span class="hljs-number">24</span>,\n};\n</code></pre>\n<p>If you hover the <code>person</code>, you get this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>: {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;\n};\n</code></pre>\n<p>The types are documented here.</p>\n<p>Another benefit of type inference is that we can easily refactor our code. It&#39;s a simple example, but good to illustrate the refactoring process. Let&#39;s get the <code>sum</code> function again.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> {\n  <span class="hljs-keyword">return</span> a + b;\n}\n</code></pre>\n<p>Instead of returning the sum number, we want to return <code>&quot;Sum: {a + b}&quot;</code>. So for <code>a = 1</code> and <code>b = 2</code>, we have the resulting string as <code>&quot;Sum: 3&quot;</code>.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">string</span> {\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`Sum: <span class="hljs-subst">${a + b}</span>`</span>;\n}\n\n<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// Sum: 3</span>\n</code></pre>\n<p>Great! But now letting the compiler infers this.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-comment">// function sum(a: number, b: number): number</span>\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) {\n  <span class="hljs-keyword">return</span> a + b;\n}\n\n<span class="hljs-comment">// function sum(a: number, b: number): string</span>\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) {\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`Sum: <span class="hljs-subst">${a + b}</span>`</span>;\n}\n</code></pre>\n<p>We just need to modify the returning value and the type inference will work. No need to think about the returning type. This is a small example, but for more complex functions, it would work too.</p>\n<p>Back to the readability part, we can use <code>Enum</code>. A utility that defines a set of named constants. It&#39;s a way to give more meaning to the data in your application.</p>\n<p>In your node app or a frontend app, you possibly do some fetching to request data. You commonly use a fetch object to perform a request and sometimes you need to pass the accept headers.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/pokemons&#x27;</span>, {\n  <span class="hljs-attr">headers</span>: {\n    <span class="hljs-title class_">Accept</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,\n  },\n});\n\n<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/harry-potter/spells&#x27;</span>, {\n  <span class="hljs-attr">headers</span>: {\n    <span class="hljs-title class_">Accept</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,\n  },\n});\n</code></pre>\n<p>It&#39;s good, but we can also use an enum to separate this accept string in a constant and reuse.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-built_in">enum</span> <span class="hljs-title class_">MediaTypes</span> {\n  <span class="hljs-title class_">JSON</span> = <span class="hljs-string">&#x27;application/json&#x27;</span>,\n}\n\n<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/pokemons&#x27;</span>, {\n  <span class="hljs-attr">headers</span>: {\n    <span class="hljs-title class_">Accept</span>: <span class="hljs-title class_">MediaTypes</span>.<span class="hljs-property">JSON</span>,\n  },\n});\n\n<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/harry-potter/spells&#x27;</span>, {\n  <span class="hljs-attr">headers</span>: {\n    <span class="hljs-title class_">Accept</span>: <span class="hljs-title class_">MediaTypes</span>.<span class="hljs-property">JSON</span>,\n  },\n});\n</code></pre>\n<p>And we are able to add more data related to the <code>MediaTypes</code> like <code>PDF</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-built_in">enum</span> <span class="hljs-title class_">MediaTypes</span> {\n  <span class="hljs-title class_">JSON</span> = <span class="hljs-string">&#x27;application/json&#x27;</span>,\n  <span class="hljs-variable constant_">PDF</span> = <span class="hljs-string">&#x27;application/pdf&#x27;</span>,\n}\n</code></pre>\n<p>With <code>Enum</code>, we can encapsulate data into a meaningful block of code.</p>\n<p>Recently, I was implementing a &quot;state&quot; React component. It&#39;s basically a component that renders an empty state or an error state based on the request response.</p>\n<p>The UI for the empty and the error states were very similar. Only the title and the description text and the image icon were different. So I thought: &quot;I have two ways in my mind to implement this: do the logic outside the component and pass all the information needed or pass a &#39;state type&#39; and let the component render the correct icon and messages.&quot;</p>\n<p>So I built an enum:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-built_in">enum</span> <span class="hljs-title class_">StateTypes</span> {\n  <span class="hljs-title class_">Empty</span> = <span class="hljs-string">&#x27;Empty&#x27;</span>,\n  <span class="hljs-title class_">Error</span> = <span class="hljs-string">&#x27;Error&#x27;</span>,\n}\n</code></pre>\n<p>And I could just pass this data to the component as the <code>type</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ComponentState</span>, { <span class="hljs-title class_">StateTypes</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ComponentState&#x27;</span>;\n\n<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ComponentState</span> <span class="hljs-attr">type</span>=<span class="hljs-string">{StateTypes.Empty}</span> /&gt;</span></span>\n<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ComponentState</span> <span class="hljs-attr">type</span>=<span class="hljs-string">{StateTypes.Error}</span> /&gt;</span></span>\n</code></pre>\n<p>In the component, it had a state object with all the information related to the <code>title</code>, <code>description</code>, and <code>icon</code>.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> stateInfo = {\n  <span class="hljs-title class_">Empty</span>: {\n    <span class="hljs-attr">title</span>: messages.<span class="hljs-property">emptyTitle</span>,\n    <span class="hljs-attr">description</span>: messages.<span class="hljs-property">emptyDescription</span>,\n    <span class="hljs-attr">icon</span>: <span class="hljs-title class_">EmptyIcon</span>,\n  },\n  <span class="hljs-title class_">Error</span>: {\n    <span class="hljs-attr">title</span>: messages.<span class="hljs-property">errorTitle</span>,\n    <span class="hljs-attr">description</span>: messages.<span class="hljs-property">errorDescription</span>,\n    <span class="hljs-attr">icon</span>: <span class="hljs-title class_">ErrorIcon</span>,\n  },\n};\n</code></pre>\n<p>So I could just receive the type based on the enum and use this <code>stateInfo</code> object with the <code>State</code> component from our design system:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">ComponentState</span> = (<span class="hljs-params">{ <span class="hljs-keyword">type</span> }</span>) =&gt; (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">State</span>\n    <span class="hljs-attr">title</span>=<span class="hljs-string">{stateInfo[type].title}</span>\n    <span class="hljs-attr">subtitle</span>=<span class="hljs-string">{stateInfo[type].subtitle}</span>\n    <span class="hljs-attr">icon</span>=<span class="hljs-string">{stateInfo[type].icon}</span>\n  /&gt;</span></span>\n);\n</code></pre>\n<p>This is a way to use an enum to encapsulate important data into a meaningful block of code in your application.</p>\n<p>Another cool feature from Typescript is optional properties. When we have properties from an object that can be a real value or undefined, we use an optional property to be explicitly that the property can be or not be there. The syntax for this is a simple <code>?</code> operator in the object property. Imagine this function:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sumAll</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span>, c: <span class="hljs-built_in">number</span></span>) {\n  <span class="hljs-keyword">return</span> a + b + c;\n}\n</code></pre>\n<p>But now the <code>c</code> value is optional:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sumAll</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span>, c?: <span class="hljs-built_in">number</span></span>) {\n  <span class="hljs-keyword">return</span> a + b + c;\n}\n</code></pre>\n<p>We add the <code>?</code> after <code>c</code>. But now we have a compiler error saying:</p>\n<pre><code class="hljs language-tsx">(parameter) <span class="hljs-attr">c</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">undefined</span>\n<span class="hljs-title class_">Object</span> is possibly <span class="hljs-string">&#x27;undefined&#x27;</span>.\n</code></pre>\n<p>We can&#39;t sum an <code>undefined</code> value (well, actually in Javascript we can, but we receive a <code>NaN</code> value).</p>\n<p>We need to ensure that the <code>c</code> exists. Type narrowing!</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sumAll</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span>, c?: <span class="hljs-built_in">number</span></span>) {\n  <span class="hljs-keyword">if</span> (c) {\n    <span class="hljs-keyword">return</span> a + b + c;\n  }\n\n  <span class="hljs-keyword">return</span> a + b;\n}\n</code></pre>\n<p>If the <code>c</code> exists, it will be a <code>number</code> and we can sum all. If not, sum only the <code>a</code> and <code>b</code> values.</p>\n<p>An interesting part of this optional property is that it is a <code>undefined</code> not <code>null</code>. This is why we do this, we get a compile error:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">let</span> <span class="hljs-built_in">number</span> = <span class="hljs-literal">null</span>;\n<span class="hljs-title function_">sumAll</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-built_in">number</span>);\n<span class="hljs-comment">// Argument of type &#x27;null&#x27; is not assignable to parameter of type &#x27;number | undefined&#x27;.</span>\n</code></pre>\n<p>As the <code>?</code> operator doesn&#39;t handle the <code>null</code> value, choose to use the <code>undefined</code> type in your application and so you can still use the optional property and make the types consistent. We can use it like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">let</span> <span class="hljs-attr">value</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">undefined</span>;\n<span class="hljs-title function_">sumAll</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, value); <span class="hljs-comment">// 3</span>\n</code></pre>\n<p>If you add a default value to the parameter, you won&#39;t need the <code>?</code> operator. Actually, the compiler will say that the <code>Parameter cannot have question mark and initializer</code>.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sumAll</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span>, c: <span class="hljs-built_in">number</span> = <span class="hljs-number">3</span></span>) {\n  <span class="hljs-keyword">return</span> a + b + c;\n}\n</code></pre>\n<p>Optional properties not only works on variables and parameters, but also in objects.</p>\n<p>An API response is a good example of type definition and optional property together. In API responses, data can be optional. Sometimes the API sends, sometimes it has no value.</p>\n<p>How we model our types is really important for an application. If an optional property is defined as a required type, we can make our application breaks in runtime. But if we design the types correctly, we have the possible errors in compile time.</p>\n<p>Imagine we are fetching a user data and this is the way we modeled the response type:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">UserResponse</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">username</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">isActive</span>: <span class="hljs-built_in">boolean</span>;\n};\n</code></pre>\n<p>But in reality, the email is optional for the user. The API endpoint could return or not. But the <code>UserResponse</code> type we built treat it as a required property.</p>\n<p>After fetching the user data, we want to see if the user email matches with a specific domain.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">matchDomain</span>(<span class="hljs-params">email: <span class="hljs-built_in">string</span></span>) {\n  <span class="hljs-keyword">return</span> email.<span class="hljs-title function_">endsWith</span>(domain);\n}\n</code></pre>\n<p>As the <code>email</code> property is required in the <code>UserResponse</code> type, the <code>email</code> parameter will also be required in the <code>matchDomain</code> function.</p>\n<p>This is the runtime we can get if the <code>email</code> is <code>undefined</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-comment">// Uncaught TypeError: Cannot read property &#x27;endsWith&#x27; of undefined</span>\n</code></pre>\n<p>But what would happen if we modeled the <code>UserResponse</code> correctly?</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">UserResponse</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  email?: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">username</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">isActive</span>: <span class="hljs-built_in">boolean</span>;\n};\n</code></pre>\n<p>Now the <code>email</code> is possibly <code>undefined</code> and it is explicit.</p>\n<p>But if we still keep the function <code>matchDomain</code> the same way, we get a compile error:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-comment">// Argument of type &#x27;undefined&#x27; is not assignable to parameter of type &#x27;string&#x27;.</span>\n</code></pre>\n<p>And this is great! Now we can fix the <code>email</code> parameter in this function using the <code>?</code> operator:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">matchDomain</span>(<span class="hljs-params">email?: <span class="hljs-built_in">string</span></span>) {\n  <span class="hljs-keyword">return</span> email.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;email.com&#x27;</span>);\n}\n</code></pre>\n<p>But now we get a compile error when running <code>email.endsWith</code>, because it could be <code>undefined</code> too:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-comment">// (parameter) email: string | undefined</span>\n<span class="hljs-comment">// Object is possibly &#x27;undefined&#x27;.</span>\n</code></pre>\n<p>Type narrowing! We use an if block to return a <code>false</code> when the <code>email</code> is <code>undefined</code>. And run <code>endsWith</code> method only if the <code>email</code> is really a string:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">matchDomain</span>(<span class="hljs-params">email?: <span class="hljs-built_in">string</span></span>) {\n  <span class="hljs-keyword">if</span> (!email) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\n  <span class="hljs-keyword">return</span> email.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;email.com&#x27;</span>);\n}\n</code></pre>\n<p>It&#39;s pretty nice when we can get runtime errors in compile time. Better to code than debugging after we ship in production, isn&#39;t it?</p>\n<h2 id="type-composition">Type composition</h2>\n<p>Type composition is very useful when trying to reuse existing types for new places of the codebase. We don&#39;t need to rewrite new types, we can create a new type by composing existing ones.</p>\n<p>One example of composition I always have to handle using Redux or the <code>useReducer</code> hook from React is the idea of &quot;reducers&quot;. A reducer can always receive a number of different actions.</p>\n<p>In this context, actions are objects with at least a <code>type</code> property. It looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-built_in">enum</span> <span class="hljs-title class_">ActionTypes</span> {\n  <span class="hljs-variable constant_">FETCH</span> = <span class="hljs-string">&#x27;FETCH&#x27;</span>,\n}\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">FetchAction</span> = {\n  <span class="hljs-attr">type</span>: <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">ActionTypes</span>.<span class="hljs-property">FETCH</span>;\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">fetchAction</span>: <span class="hljs-title class_">FetchAction</span> = {\n  <span class="hljs-attr">type</span>: <span class="hljs-title class_">ActionTypes</span>.<span class="hljs-property">FETCH</span>,\n};\n</code></pre>\n<p>A <code>fetchAction</code> has a type <code>FetchAction</code> that has a property type that is a typeof <code>FETCH</code>.</p>\n<p>But a reducer can receive other actions too. For example a submit action:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-built_in">enum</span> <span class="hljs-title class_">ActionTypes</span> {\n  <span class="hljs-variable constant_">FETCH</span> = <span class="hljs-string">&#x27;FETCH&#x27;</span>,\n  <span class="hljs-variable constant_">SUBMIT</span> = <span class="hljs-string">&#x27;SUBMIT&#x27;</span>,\n}\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">SubmitAction</span> = {\n  <span class="hljs-attr">type</span>: <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">ActionTypes</span>.<span class="hljs-property">SUBMIT</span>;\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">submitAction</span>: <span class="hljs-title class_">SubmitAction</span> = {\n  <span class="hljs-attr">type</span>: <span class="hljs-title class_">ActionTypes</span>.<span class="hljs-property">SUBMIT</span>,\n};\n</code></pre>\n<p>For a specific container, we can compose all these actions into just one type and use it for the reducer parameter type.</p>\n<p>It would look like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Actions</span> = <span class="hljs-title class_">FetchAction</span> | <span class="hljs-title class_">SubmitAction</span>;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">state, action: Actions</span>) {\n  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {\n    <span class="hljs-keyword">case</span> <span class="hljs-title class_">ActionTypes</span>.<span class="hljs-property">FETCH</span>:\n    <span class="hljs-comment">// fetching action</span>\n    <span class="hljs-keyword">case</span> <span class="hljs-title class_">ActionTypes</span>.<span class="hljs-property">SUBMIT</span>:\n    <span class="hljs-comment">// submiting action</span>\n  }\n}\n</code></pre>\n<p>All the possible actions are the <code>Actions</code> type. And we use a union type to &quot;join&quot; all action types. The action in the reducer can have the <code>FetchAction</code> or the <code>SubmitAction</code>.</p>\n<p>As a Potterhead, I couldn&#39;t miss a Harry Potter example. I want to build a simple function to choose a Hogwarts House based on the person trait. Let&#39;s start with the houses first.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">House</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">traits</span>: <span class="hljs-built_in">string</span>[];\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">gryffindor</span>: <span class="hljs-title class_">House</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Gryffindor&#x27;</span>,\n  <span class="hljs-attr">traits</span>: [<span class="hljs-string">&#x27;courage&#x27;</span>, <span class="hljs-string">&#x27;bravery&#x27;</span>],\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">slytherin</span>: <span class="hljs-title class_">House</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Slytherin&#x27;</span>,\n  <span class="hljs-attr">traits</span>: [<span class="hljs-string">&#x27;ambition&#x27;</span>, <span class="hljs-string">&#x27;leadership&#x27;</span>],\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">ravenclaw</span>: <span class="hljs-title class_">House</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Ravenclaw&#x27;</span>,\n  <span class="hljs-attr">traits</span>: [<span class="hljs-string">&#x27;intelligence&#x27;</span>, <span class="hljs-string">&#x27;learning&#x27;</span>],\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">hufflepuff</span>: <span class="hljs-title class_">House</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Hufflepuff&#x27;</span>,\n  <span class="hljs-attr">traits</span>: [<span class="hljs-string">&#x27;hard work&#x27;</span>, <span class="hljs-string">&#x27;patience&#x27;</span>],\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">houses</span>: <span class="hljs-title class_">House</span>[] = [gryffindor, slytherin, ravenclaw, hufflepuff];\n</code></pre>\n<p>I want to keep it simple, so the <code>House</code> type has only the <code>name</code> and the <code>traits</code>, a list of possible traits from people related to the house.</p>\n<p>And then, I create each house and added all of them to the <code>houses</code> list.</p>\n<p>Great! Now I&#39;ll build the <code>Person</code> type. A person can be a witch or a muggle.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Witch</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">trait</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">magicFamily</span>: <span class="hljs-built_in">string</span>;\n};\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">Muggle</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">trait</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<p>And this is the part we combine these two different types using the union type:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Person</span> = <span class="hljs-title class_">Muggle</span> | <span class="hljs-title class_">Witch</span>;\n</code></pre>\n<p>Using the intersection type, the <code>Person</code> type has all properties from <code>Muggle</code> or all from <code>Witch</code>.</p>\n<p>So now, if I create a <code>Muggle</code>, I need just the name, the trait, and the email:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">hermione</span>: <span class="hljs-title class_">Muggle</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Hermione Granger&#x27;</span>,\n  <span class="hljs-attr">trait</span>: <span class="hljs-string">&#x27;bravery&#x27;</span>,\n  <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;hermione@mail.com&#x27;</span>,\n};\n</code></pre>\n<p>If I create a <code>Witch</code>, I need the name, the trait, and the magic family name:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">harry</span>: <span class="hljs-title class_">Witch</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Harry Potter&#x27;</span>,\n  <span class="hljs-attr">trait</span>: <span class="hljs-string">&#x27;courage&#x27;</span>,\n  <span class="hljs-attr">magicFamily</span>: <span class="hljs-string">&#x27;Potter&#x27;</span>,\n};\n</code></pre>\n<p>And if I create a <code>Person</code>, I need at least the <code>name</code> and the <code>trait</code> properties from <code>Muggle</code> and <code>Witch</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">tk</span>: <span class="hljs-title class_">Person</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>,\n  <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;tk@mail.com&#x27;</span>,\n  <span class="hljs-attr">trait</span>: <span class="hljs-string">&#x27;learning&#x27;</span>,\n  <span class="hljs-attr">magicFamily</span>: <span class="hljs-string">&#x27;Kinoshita&#x27;</span>,\n};\n</code></pre>\n<p>The <code>chooseHouse</code> is very simple. We just pas the houses and the person. Based on the person trait, the function will return the chosen house:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">chooseHouse</span>(<span class="hljs-params">houses: House[], person: Person</span>) {\n  <span class="hljs-keyword">return</span> houses.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">house</span>) =&gt;</span> house.<span class="hljs-property">traits</span>.<span class="hljs-title function_">includes</span>(person.<span class="hljs-property">trait</span>));\n}\n</code></pre>\n<p>And applying all the people we created:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">chooseHouse</span>(houses, harry); <span class="hljs-comment">// { name: &#x27;Gryffindor&#x27;, traits: [&#x27;courage&#x27;, &#x27;bravery&#x27;] }</span>\n<span class="hljs-title function_">chooseHouse</span>(houses, hermione); <span class="hljs-comment">// { name: &#x27;Gryffindor&#x27;, traits: [&#x27;courage&#x27;, &#x27;bravery&#x27;] }</span>\n<span class="hljs-title function_">chooseHouse</span>(houses, tk); <span class="hljs-comment">// { name: &#x27;Ravenclaw&#x27;, traits: [&#x27;intelligence&#x27;, &#x27;learning&#x27;] }</span>\n</code></pre>\n<p>Nice!</p>\n<p>The intersection type is a bit different, but it can also be used to combine existing types.</p>\n<p>When I was implementing a web app to <a href="https://github.com/imteekay/ux-studies">apply my studies on UX</a>, I needed to create a prop type for the Image component.</p>\n<p>I had the type <code>ImageUrl</code> from the product type:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ImageUrl</span> = {\n  <span class="hljs-attr">imageUrl</span>: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<p>And the <code>ImageAttr</code> to represent all the attributes for the image:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ImageAttr</span> = {\n  <span class="hljs-attr">imageAlt</span>: <span class="hljs-built_in">string</span>;\n  width?: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<p>But the props expected all this information in the component. Intersection type for the rescue!</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ImageProps</span> = <span class="hljs-title class_">ImageUrl</span> &amp; <span class="hljs-title class_">ImageAttr</span>;\n</code></pre>\n<p>Simple as that. So now, the component needs all these properties. The type looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ImageProps</span> = {\n  <span class="hljs-attr">imageUrl</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">imageAlt</span>: <span class="hljs-built_in">string</span>;\n  width?: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<p>And we can use this type this way:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">imageProps</span>: <span class="hljs-title class_">ImageProps</span> = {\n  <span class="hljs-attr">imageUrl</span>: <span class="hljs-string">&#x27;www.image.com&#x27;</span>,\n  <span class="hljs-attr">imageAlt</span>: <span class="hljs-string">&#x27;an image&#x27;</span>,\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">imagePropsWithWidth</span>: <span class="hljs-title class_">ImageProps</span> = {\n  <span class="hljs-attr">imageUrl</span>: <span class="hljs-string">&#x27;www.image.com&#x27;</span>,\n  <span class="hljs-attr">imageAlt</span>: <span class="hljs-string">&#x27;an image&#x27;</span>,\n  <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;100%&#x27;</span>,\n};\n</code></pre>\n<p>Nice! One more concept to reuse and compose types.</p>\n<p>I also find the <code>Pick</code> type very interesting and useful. We have other <a href="/series/typescript-learnings/interesting-types">interesting types</a> that we could write here, but the idea here is to understand that we can compose type and there is no limit to reuse types. If you&#39;re interested in study other types, take a look at this post I wrote: <a href="/series/typescript-learnings/interesting-types">Typescript Learnings: Interesting Types</a>.</p>\n<h2 id="tooling">Tooling</h2>\n<p>When you <code>npm install typescript</code>, you don&#39;t just get the compiler, you get the language service API, a standalone server called tsserver that editors can run to provide autocompletion, go-to, and other cool features.</p>\n<p>These features are what some people from the Typescript team call developer productivity tools like smart errors when type checking and IntelliSense (code completion, hover info, signature information). We look at these features throughout the whole article, but I want to make a special topic to talk about it.</p>\n<p>The Typescript type checker is powerful in the sense that it can infer types and provide information to some possible issues. Example: It inferred that the city is a string. And the <code>uppercase</code> is used the wrong way. As it knows it is a string, it also tries to find a possible method that the engineer is looking for.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> city = <span class="hljs-string">&#x27;Tokyo&#x27;</span>;\ncity.<span class="hljs-title function_">toUppercase</span>();\n<span class="hljs-comment">// Property &#x27;toUppercase&#x27; does not exist on type</span>\n<span class="hljs-comment">// &#x27;string&#x27;. Did you mean &#x27;toUpperCase&#x27;?</span>\n</code></pre>\n<p>In this case, the compiler is really smart, because it finds exatcly what we wanted.</p>\n<p>It also works for objects:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> people = [\n  { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">24</span> },\n  { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kaio&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">12</span> },\n  { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kazumi&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">31</span> },\n];\n\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> person <span class="hljs-keyword">of</span> people) {\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">agi</span>);\n  <span class="hljs-comment">// Property &#x27;agi&#x27; does not exist on type &#x27;{ name: string; age: number; }&#x27;</span>\n}\n</code></pre>\n<p>With the static types, the tooling can provide a great developer experience with code completion, hover info to show defined types, and signature information for methods and other data.</p>\n<p>If you type: <code>&#39;TK&#39;.</code>, the editor will show all the possible methods for the string object. The compiler knows it is a string. And it knows the methods from the <code>String</code> prototype. But it also provides the method signature. This is very interesting because we don&#39;t necessarily need to go to the docs. The &quot;docs&quot; is already in our code editor.</p>\n<p>It&#39;s an awesome experience while coding.</p>\n<p>The type definition &quot;on hover&quot; is another thing that we saw earlier in this article. Let the compiler infer the types implicitly and you won&#39;t lose the type documentation. Using the hover in the object, the IDE or editor will always be able to show the type definition.</p>\n<p>Another interesting thing is that Typescript will not only flag what could go wrong on runtime, but it also helps to find code that doesn&#39;t do what you intend.</p>\n<p>Imagine we have a function to open a snackbar if it is still closed. It would verify the status of the snackbar. If it is closed, just call another function to open it.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">buildSnackbar</span> = (<span class="hljs-params">status: SnackbarStatus</span>) =&gt; {\n  <span class="hljs-keyword">if</span> (status.<span class="hljs-property">isClosed</span>) {\n    <span class="hljs-title function_">openSnackbar</span>();\n  }\n};\n</code></pre>\n<p>And the type information for this snackbar is:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">SnackbarStatus</span> = {\n  <span class="hljs-attr">isClosed</span>: <span class="hljs-built_in">boolean</span>;\n};\n</code></pre>\n<p>What happens if I call this function like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">buildSnackbar</span>({ <span class="hljs-attr">isclosed</span>: <span class="hljs-literal">true</span> });\n</code></pre>\n<p>It won&#39;t break in runtime, because the <code>status</code> object has no <code>isClosed</code> attribute and the <code>undefined</code> object is a <code>falsy</code> value, so it will skip the if condition and not call the <code>openSnackbar</code> function. No runtime error. But probably it will behavior different than the expected.</p>\n<p>In Typescript, the compiler will give some hints to make it works properly. First it will show this error:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-comment">// Argument of type &#x27;{ isclosed: boolean; }&#x27; is not assignable to</span>\n<span class="hljs-comment">// parameter of type &#x27;SnackbarStatus&#x27;.</span>\n</code></pre>\n<p><code>isclosed</code> with downcased <code>C</code> is not assignable to the type. It&#39;s not defined there. This is the first hint to make you correct your code.</p>\n<p>The second is even better:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-comment">// Object literal may only specify known properties,</span>\n<span class="hljs-comment">// but &#x27;isclosed&#x27; does not exist in type &#x27;SnackbarStatus&#x27;.</span>\n<span class="hljs-comment">// Did you mean to write &#x27;isClosed&#x27;?</span>\n</code></pre>\n<p>It tells exactly what you probably need to do: rename the <code>isclosed</code> to <code>isClosed</code>.</p>\n<p>We can talk a lot of things about the tooling about I think this is the main part.</p>\n<p>My suggestion to learn more about this is to just code in Typescript and &quot;have a conversation&quot; with the compiler. Read the errors. Play with the hover. See the autocompletion. Understand the method signatures. It&#39;s really a productive way to code.</p>\n<h2 id="tips--learnings">Tips &amp; Learnings</h2>\n<p>As the article is coming to an end, I want to just add the final thoughts, learnings, and tips to help you in your journey learning Typescript or just applying it in your projects.</p>\n<ul>\n<li>Really read the type error: this will help you better understand the issue and the types.</li>\n<li><code>strictNullChecks</code> and <code>noImplicitAny</code> can be very helpful in finding bugs. Enable this as soon as possible in your project. Use <code>strictNullChecks</code> to prevent “undefined is not an object”-style runtime errors. Use <code>noImplicitAny</code> to type the source code to give more type information for the compiler.</li>\n<li>Together with these compiler&#39;s configurations, I always recommend being very precise about your types. Mainly with the values that occur only in runtime like an API response. Correctness is important to catch as many bugs as possible in compile time.</li>\n<li>Understand the difference between runtime and compile time: types only affects in compile type. It runs the type checker and then compiles to Javascript. The Javascript source code doesn&#39;t use any type of references or type operations.</li>\n<li>Learn about utility types. We talk about more specific about the <code>Readonly</code> in the immutability in compile time, but Typescript has a box of helpers like <code>Required</code>, <code>Pick</code>, and many more.</li>\n<li>If possible, prefer letting the compiler infers the types for you. Most of the types and returning types are redundant. The Typescript compiler is very smart in this topic. If not possible, you can always add type annotations. And let the type assertions as to the last option.</li>\n<li>As writing code, take a look at the tooling. The design of the tooling provided in an IDE is amazing. The IntelliSense and type checking provide a really good experience.</li>\n</ul>\n<h1 id="resources">Resources</h1>\n<p>I compiled (pun very much intended!) a bunch of resources to help you learn more about programming languages, type systems, and the type mental model.</p>\n<p>Also, if you found the examples on this post useful, I added all of them this repository: <a href="https://github.com/imteekay/thinking-in-types">Thinking in Types</a>. So you can fork and play with it.</p>\n<h3 id="courses">Courses</h3>\n<ul>\n<li><a href="https://www.educative.io/path/typescript-for-front-end-developers?aff=x8bV">TypeScript for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/using-typescript-with-react?aff=x8bV">Using TypeScript with React</a></li>\n<li><a href="https://www.educative.io/courses/learn-typescript-complete-course?aff=x8bV">Learn TypeScript: The Complete Course for Beginners</a></li>\n<li><a href="https://www.educative.io/courses/advanced-typescript-masterclass?aff=x8bV">Advanced TypeScript Masterclass</a></li>\n</ul>\n<h3 id="type-systems">Type Systems</h3>\n<ul>\n<li><a href="https://www.typescriptlang.org/docs/handbook/type-compatibility.html">Type Compatibility</a></li>\n<li><a href="https://medium.com/@thejameskyle/type-systems-structural-vs-nominal-typing-explained-56511dd969f4">Type Systems: Structural vs. Nominal typing explained</a></li>\n<li><a href="https://yakovfain.com/2018/07/11/learning-typescript-structural-vs-nominal-typing-system/">Learning TypeScript: Structural vs nominal typing systems</a></li>\n<li><a href="https://www.youtube.com/watch?v=GqmsQeSzMdw&amp;feature=youtu.be">Constraints Liberate, Liberties Constrain — Runar Bjarnason</a></li>\n<li><a href="https://www.no.lol/2019-12-27-type-narrowing/">Type Narrowing in TypeScript</a></li>\n<li><a href="https://2ality.com/2020/06/type-guards-assertion-functions-typescript.html">TypeScript: narrowing types via type guards and assertion functions</a></li>\n<li><a href="https://www.goodreads.com/book/show/48920810-programming-with-types">Programming with Types Book</a></li>\n<li><a href="https://www.goodreads.com/book/show/48570456-effective-typescript">Effective TypeScript: 62 Specific Ways to Improve Your TypeScript Book</a></li>\n<li><a href="/series/typescript-learnings/interesting-types">Typescript Learnings: Interesting Types</a></li>\n</ul>\n<h3 id="tooling--developer-experience">Tooling &amp; Developer Experience</h3>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=fnTEZk-oECM">Advanced TypeScript tooling at scale</a></li>\n<li><a href="https://www.youtube.com/watch?v=4C4wCGcsiT0">Type Systems &amp; Props Design</a></li>\n<li><a href="https://www.youtube.com/watch?v=wSdV1M7n4gQ">Anders Hejlsberg on Modern Compiler Construction</a></li>\n<li><a href="https://www.youtube.com/watch?v=f6TCB61fDwY">Typescript Compiler explained by the Author Anders Hejlsberg</a></li>\n</ul>\n<h3 id="compile-time-vs-runtime">Compile time vs Runtime</h3>\n<ul>\n<li><a href="https://stackoverflow.com/questions/846103/runtime-vs-compile-time">Compile time vs Runtime</a></li>\n<li><a href="https://stackoverflow.com/questions/9471837/what-is-the-difference-between-run-time-error-and-compiler-error">Compile error vs Runtime error</a></li>\n<li><a href="https://stackoverflow.com/a/51132333/3159162">Value space and Type space</a></li>\n<li><a href="https://www.typescriptlang.org/play">A playground tool to play with Typescript and see the Javascript output</a></li>\n</ul>\n<h3 id="best-practices">Best Practices</h3>\n<ul>\n<li><a href="https://engineering.zalando.com/posts/2019/02/typescript-best-practices.html">Typescript Best Practices</a></li>\n</ul>\n',
  },
  {
    title: 'Actionable advice to start learning to code',
    content:
      '<p>When I started sharing my journey about <a href="https://medium.com/the-renaissance-developer">mastering programming</a> and <a href="https://medium.com/the-renaissance-developer/how-i-hack-my-education-354fb5b8a025">hacking my education</a>, people got really interested and asked me a lot about how to start learning to code.</p>\n<p>I really want to help future developers in their journey and the amount of questions on how to start inspired me to write this article.</p>\n<p>I got a time to think about my journey and I asked experienced developers about coding, how they started, about career, and all those interesting things everybody wants to know.</p>\n<p>This post has stories and a lot of actionable advice for you to be inspired, motivated, and take the first step in the programming world.</p>\n<p>Hope this helps!</p>\n<h3 id="the-mindset">The Mindset</h3>\n<p>When I started I fell inlove with programming. My number one tip is to learn it because you like it, you find it interesting, or maybe find it useful (and it really is!).</p>\n<p>Why do I say that? I’m a big fan of “do what you are passionate about”. It looks cliché, but it always worked for me. And if you get started with programming, you’ll need this inner motivation. Passion and interest help you be consistent and disciplined with your learning journey.</p>\n<p>Remember: it is not a sprint. It is a long long marathon. Don’t expect to learn everything overnight. It doesn’thappen like that.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*TWEjK-8fXse8_4lyz-2YRA.png" alt=""></p>\n<h4 id="tip-number-two-keep-learning">Tip number two: keep learning</h4>\n<p>As a software engineer, one of my challenges is always keeping track of new things that are emerging in our world: new libraries like <a href="https://en.wikipedia.org/wiki/React_(JavaScript_libary)">ReactJS in 2013</a>, web applications like <a href="https://en.wikipedia.org/wiki/Single-page_application">SPA</a>, <a href="https://en.wikipedia.org/wiki/Progressive_web_app">PWA</a>, tech trends like Machine Learning, AI, cryptocurrency (Blockchain Blockchain Blockchain!), and so on.</p>\n<p>I’m not saying we need to learn everything and overwhelm ourselves. My point is thatnewthings are created so fast in the tech world, so we need to embrace the <strong>lifelong learning</strong> mindset.</p>\n<p>Talking about <em>overwhelming</em>, here’s tipnumber three: try not to overwhelm yourself. You don’t need to start with hard concepts first or with the heaviest algorithm book.</p>\n<p>Here’s an analogy: when you want to lose weight, you don’t start with a marathon. Instead, you maybe start with a 1-mile run.</p>\n<p>The same way with programming, you don’t need to code and study in all your free time, changing completely your schedule.</p>\n<p>Go for small changes, but do them regularly. One code at a time.</p>\n<p><strong>Don’t compare yourself with “experienced engineers”</strong> or “coder genius”is tip number four.First, it is not fair at all. Second, you are just starting. Keep focused on your studies.</p>\n<p>It is easy to compare yourself with your teammates or <a href="https://en.wikipedia.org/wiki/Gennady_Korotkevich">programming genius</a>, but it just increases the impostor syndrome inside you. Don’t let it stop your programming journey.</p>\n<p>Practice is the key. <strong>Find ways to learn the concepts and practice it.</strong> This is tip five. Building the foundation with concepts and theories is important, but be practical. Try. Experiment. We will dive into this later, but practice is key!</p>\n<h3 id="theory--concepts">Theory &amp; Concepts</h3>\n<p>It’s really important to understand the basic programming concepts and build the foundation first. If you are at college now, you’ll be good! Colleges are great in teaching basic concepts and theories. If you’re pursuing a Computer Science degree, you’ll probably have Algorithms and Data Structures classes. But if you are not at college, the internet is here to help you out!</p>\n<p>When I started I learned with 2 great online courses: <a href="https://www.codecademy.com/">Codecademy</a> &amp; <a href="https://cs50.harvard.edu/">CS50 at Harvard</a><strong>.</strong></p>\n<p>There, I learned the basics with Python on Codecademy and C in CS50. But my opinion is: you just need to start. Choose one programming language and start understanding the basic concepts (variables, if-else, loops, data structures).</p>\n<blockquote>\n<p><a href="http://www.gayle.com/blog/2014/07/09/15-pieces-of-career-advice-software-developers-should-follow">Be language\nagnostic</a>. Language is just a tool. It’s valuable to know a language deeply, but it’s also valuable to be learning new things. The best developers tend not to identify as a ____ developer.— <a href="https://medium.com/u/e21bc4f4525e">Gayle Laakmann McDowell</a></p>\n</blockquote>\n<p>Probably, when you choose a course, they will teach you with a specific programming language. But don’t worry! Focus on the basic concepts (and maybe fall in love with the programming language as I did with <a href="https://medium.freecodecamp.org/learning-python-from-zero-to-hero-120ea540b567">Python</a> and <a href="https://medium.freecodecamp.org/learning-ruby-from-zero-to-hero-90ad4eecc82d">Ruby</a>.</p>\n<h4 id="why-did-i-choose-these-courses">Why did I choose these courses?</h4>\n<p>As I was searching for something to start, I wanted to deeply understand the concepts and be practical about it. CS50 seemed the best resource to build a solid foundation.</p>\n<p>David J. Malan is definitely one of the best professors I had. And Codecademy helped a lot about being practical. Train myself to code everything I was learning. Code code code. Remember the fifth tip? Find ways to learn the concepts and practice it.</p>\n<h4 id="other-resources-with-great-content-are">Other resources with great content are:</h4>\n<p><a href="https://br.udacity.com/course/intro-to-computer-science--cs101/">Introduction to Computer Science</a> by Udacity. It covers pretty much everything you need to start understanding programming. Udacity courses always have “practice time” after each theory and concept you learn.</p>\n<p>MIT’s <a href="http://courses.csail.mit.edu/6.006/fall11/notes.shtml">Introduction to Algorithms</a> will teach you algorithmic thinking. Understanding algorithms and how they work is the most important thing you should learn when starting your coding journey. Other great resources are algorithm books like <a href="https://www.amazon.com/Introduction-Algorithms3rd-MIT-Press/dp/0262033844">Introduction to Algorithm</a> by CLRS and <a href="https://www.amazon.com/Algorithms-4th-RobertSedgewick/dp/032157351X/ref=pd_sim_14_3?_encoding=UTF8&amp;pd_rd_i=032157351X&amp;pd_rd_r=Y548PDB04MJN6BH8MYFB&amp;pd_rd_w=UgKc5&amp;pd_rd_wg=CvgEt&amp;psc=1&amp;refRID=Y548PDB04MJN6BH8MYFB">Algorithms</a> by Robert Sedwick.</p>\n<p>Here you’ll start overwhelming yourself with the tons of resources we have on the internet. But <strong>try not to overwhelm yourself</strong>. You don’t need to do every single course, focus on one, learn, practice, build confidence. Remember, it’s a journey. One line of code at a time :)</p>\n<h3 id="training-practicing-coding-building">Training, Practicing, Coding, Building</h3>\n<p><strong>Practice Practice Practice</strong>. I can’t say enough how practicality is so important when you start learning to code.</p>\n<blockquote>\n<p>Code. A lot… The best way to be a great coder is to just practice — a lot.\n— <a href="http://www.gayle.com/blog/2014/07/09/15-pieces-of-career-advice-software-developers-should-follow">Gayle Laakmann\nMcDowell</a></p>\n</blockquote>\n<p>Practice not only make you a better programmer but also you gain a lot of confidence through this. <a href="http://blog.teamtreehouse.com/become-a-software-engineer-jonas">Impostor Syndrome</a> is a real thing!</p>\n<p>As I said at the beginning of this article, I will try to write actionable items for you. Options you can do in your learning journey to be more practical.</p>\n<p>As I did, you can start with <a href="https://www.codecademy.com/">Codecademy</a>. It has really good content and a great experience to code everything you are learning.</p>\n<p>Another great site is <a href="https://www.hackerrank.com/">Hacker Rank</a>.The website has a lot of programming language options to choose. But not only this, you can also do other domain exercises. I really like Hacker Rank’s problem-solving exercises. You receive a lot of inputs and your algorithm need to pass in all tests.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*bkvDxLVBKJ1Gd8cA86B-fg.png" alt=""></p>\n<p>Another thing I’m really passionate about is Competitive Programming. I did it for two years at college, for competitions like <a href="https://icpc.baylor.edu/">ACM ICPC</a>.</p>\n<p>Basically, you have a bunch of problems, and you need to implement an algorithm to pass each one. Doing it helped me gain a lot of confidence in my coding skills, and I feel like I’m a stronger developer after my heavy training and participating in competitions. (<a href="https://github.com/imteekay/algorithms">Here is my repo on GitHub</a> — I solved a lot of problems).</p>\n<p>I’m a heavy user on Quora, and someday I read a great answer by <a href="https://medium.com/u/f1962714b0f6">Veni Johanna</a> about “Does competitive programming really help in improving your knowledge and skill set as a developer?”</p>\n<p>I’ll write down some skills we gain learning competitive programming:</p>\n<ol>\n<li><p>You have developed habit to convert / model specific problem to an abstract one.</p>\n</li>\n<li><p>You are used to registering patterns, and matching patterns against your pattern\nbank.</p>\n</li>\n<li><p>You know how to concentrate and perform under pressure.</p>\n</li>\n<li><p>You have awareness and confidence of your own ability and shortcomings as a\ncoder.</p>\n</li>\n<li><p>You have learned to manage time, especially in terms of your thinking and coding\nhabits.</p>\n</li>\n<li><p>You are used to well-defined problems.</p>\n</li>\n<li><p>You are used to having one objective in mind.</p>\n</li>\n<li><p>You can be stuck in ‘problem solving’ mode.</p>\n</li>\n</ol>\n<p>I loved her comments and agree 100% with each one. Take a look at the <a href="https://www.quora.com/Does-competitive-programming-really-help-in-improving-your-knowledge-and-skill-set-as-a-developer-Are-there-better-things-that-would-help-one-amass-greater-knowledge-in-less-time/answer/Veni-Johanna">full answer</a>. You should. It’s great!</p>\n<p>My intention here is to give you the most actionable advice as possible, so I’ll list some great websites for you to start learning and training from day 0.</p>\n<ul>\n<li><a href="http://codeforces.com/">Codeforces</a>: it is a really good website to train and learn. It has tons of great problem sets. Editorial is a plus here (<em>Editorial</em>:\nThe problem author writes how you should approach and solve the problem — which algorithm or data structure to use).</li>\n<li><a href="https://www.topcoder.com/">Topcoder</a>: this website is very similar to Codeforces in terms of problems quality and editorial. It is also well known for its <a href="https://www.topcoder.com/community/data-science/data-science-tutorials/">tutorials</a>. Each “tutorial” teaches some technique, algorithm, or data structure.</li>\n<li><a href="http://hackerrank.com/">Hacker Rank</a>: as I said above, Hacker Rank has a lot of different domains like Algorithms, Data Structures, Mathematics, Programming Languages, etc. The website UI and UX is a plus for Hacker Rank, it is beautiful and very easy to use. I used a lot the Python Domain to build a good foundation on my Python skills.</li>\n<li><a href="https://www.hackerearth.com/">Hacker Earth</a> and <a href="https://www.codechef.com/">Code\nChef</a> are other good websites.</li>\n</ul>\n<p>Now you can choose a website and start practicing :)</p>\n<h3 id="building-projects">Building projects</h3>\n<p>After learning the fundamentals, coding, and practicing a lot, I felt I was stuck. I start searching how could I go to the next level. Building projects were the answer for me. So I taught myself web fundamentals: HTML, CSS, Javascript, and a web framework. That time I learned Ruby on Rails (Ruby Web Framework) and Django (Python Web Framework).</p>\n<p>My first project was <a href="http://leandrotk.github.io/tk">my own website</a>. Then I built a website for my mom’s restaurant. Then two games: tic-tac-toe and snake. All static websites.</p>\n<p>I felt I was ready to develop a full stack website. So I built an online bookstore with an admin dashboard (the admin could add new products, edit them, delete them… all the <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> stuff), and the public part — the client could signup/login, search for books, and buy it. I was pretty happy I could finish this project. It was really challenging for me at that time, and I learned a lot.</p>\n<p>The first real life product I developed was <a href="https://www.alavadeira.com/">aLavadeira</a> responsive website. And now I build the <a href="http://worldpackers.com/">Worldpackers</a> web product and API for the mobile apps for more than 900K travelers and host all around the world.</p>\n<p>My good friend <a href="https://medium.com/@douglas.iacovelli">Douglas</a> has a great story on how he started to code and develop apps. He learned the fundamental concepts at college, but building mobile apps was something he was always curious about. He tried to build many Android apps, but soon he gave up.</p>\n<blockquote>\n<p>“I simply didn’t know how to start, because I had a lot of things to learn, and I didn’t feel ready to build an app. There were so many different things to learn and ways to do the same thing, that I got stuck trying to figure out which was the right or the best. The 2 most important things at this stage were: 1. Set a simple goal and try to learn the basics to achieve that. 2. Avoid perfectionism and just do it.”— Doug</p>\n</blockquote>\n<p>Listening to Doug’s story, I felt that everybody who is starting something gets stuck in some part of the process. And it is super normal to feel frustrated or do not understand how to start.</p>\n<blockquote>\n<p>“I got help from a friend of mine who had already built a simple app. I asked him if he knew which was the best way to do a specific thing and the truth is: he didn’t know, but I felt more secure knowing we were building the same way.” — Doug</p>\n</blockquote>\n<p>If you have colleagues or friends that have more experience ask for help, probably they will help in some way. And it is cool how these “mentors” inspire and motivate you to start and try again.</p>\n<p>Another learning we can get from Doug’s story: he set a goal to make the simplest app for the first time.</p>\n<blockquote>\n<p>“I built the <a href="https://play.google.com/store/apps/details?id=co.iacovelli.usp">first app version</a> and published it to Play Store. Then I learned more and more about Java/Kotlin/Android and could implement more features on this app. But it was a time-consuming process. I needed a lot of persistence” — Doug</p>\n</blockquote>\n<p>It is so nice when we are on a learning curve part that we feel confident and are just “in the flow” to keep learning and building. But I totally agree with Doug, when you start learning something new, you need a lot of persistence to keep your learning consistent.</p>\n<p>Now Doug works as a Android developer. He has 2 personal projects (mobile apps) published in the Play Store and leads the <a href="https://play.google.com/store/apps/details?id=com.worldpackers.travelers">Worldpackers Android app</a>.</p>\n<blockquote>\n<p>“I learned how to program by working on lots of different website projects starting from a pretty young age. The best way to learn a new skill is to practice, practice, practice. It doesn’t matter what you build, as long as you pick something and start.” — <a href="https://medium.com/u/1299c645ef11">Feross Aboukhadijeh</a></p>\n</blockquote>\n<p>In <a href="https://www.quora.com/How-did-Feross-Aboukhadijeh-learn-to-program-And-if-he-could-do-it-over-again-what-would-he-do-different-What-language-would-he-start-with/answer/Feross-Aboukhadijeh?">Feross answer</a> on <a href="https://medium.com/@quoraanswers">Quora</a>, he tells how he learned to code by building lots of side projects. His story is so inspiring. You notice how he keep making progress project by project. His advice to learn to program:</p>\n<ul>\n<li>Do side projects.</li>\n<li>Buy and read programming books.</li>\n<li>Do side projects.</li>\n<li>Take computer science classes.</li>\n<li>Do side projects.</li>\n<li>Read programming blogs.</li>\n<li>Do side projects.</li>\n</ul>\n<p><a href="https://www.quora.com/How-did-Feross-Aboukhadijeh-learn-to-program-And-if-he-could-do-it-over-again-what-would-he-do-different-What-language-would-he-start-with/answer/Feross-Aboukhadijeh?">Read his full story here</a>!</p>\n<h3 id="here-is-a-list-of-side-projects-you-can-do">Here is a list of side projects you can do.</h3>\n<p>Time to help you start building stuff!</p>\n<ul>\n<li>If you are a gamer, maybe you can start with Tic-Tac-Toe, Sudoku, or Flappy\nBird.</li>\n<li>If you are a data lover, you can do web scraping or work with a trading stock\nAPI to build and analyze stock charts.</li>\n<li>If you want to understand better front-end, build your own website/portfolio.</li>\n<li>If you want to build a full product, start with an online bookstore, product\ninventory, or a blog.</li>\n</ul>\n<p>The list goes on and on. Here [another list (<a href="https://github.com/karan/Projects#networking">https://github.com/karan/Projects#networking</a>) that can help you choose the project. But I agree with Feross, it doesn’t matter what you build, as long as you pick something and start. So start building!You’ll have problems, you’ll get stuck. But you’ll learn A LOT!</p>\n<h4 id="i-know-that-it-is-pretty-challenging-to-keep-your-project-going">I know that it is pretty challenging to keep your project going.</h4>\n<p>To keep yourself accountable, I found out an interesting project you can do daily. It’s called 100 days of code. Here is the <a href="https://github.com/Kallaway/100-days-of-code">template</a>. It is simple, you write a daily journal about your progress and thoughts about a project you are doing.</p>\n<p>And it really works. You keep yourself accountable, you keep your project going and track your progress. Everything in a public repository on GitHub, so you can also share with your friends. Collaborate with the GitHub community. And share and inspire other people.</p>\n<p>Searching for 100 days of code stories, I found out “<a href="https://hackernoon.com/how-i-coded-everyday-for-365days-67ebb5fc7ae">How I Coded Everyday for 365 Days</a>” by <a href="https://medium.com/@emilyyu_17465">Emily</a>. Such an inspiring story of discipline and willingness to learn to code.</p>\n<p>It’s pretty cool how she writes about her projects and how she learned through the year. The projects were from iOS apps using Swift programming language, to web development using the whole stack (HTML, CSS, JS, Flask — Python web framework). Go read the <a href="https://hackernoon.com/how-i-coded-everyday-for-365-days-67ebb5fc7ae">full article</a>.</p>\n<p>Keep motivated, keep building, keep coding! :)</p>\n<h3 id="some-useful-resources">Some useful resources</h3>\n<p>Good websites, articles &amp; videos:</p>\n<h4 id="websites">Websites</h4>\n<ul>\n<li><a href="https://www.freecodecamp.org/">freeCodeCamp</a> is a great website focused on web development and JavaScript. Totally free (YEY!).</li>\n<li><a href="https://www.udemy.com/">Udemy</a>, <a href="https://www.codeschool.com/">CodeSchool</a> and <a href="https://www.khanacademy.org/">Khan Academy</a> are very similar in terms of varieties of courses, but Udemy has paid courses, Khan Academy is free, and CodeSchool is a mix of both (paid and free courses).</li>\n<li>Don’t forget the MOOC’s: <a href="https://www.udacity.com/">Udacity</a>, <a href="https://www.coursera.org/">Coursera</a>, and <a href="https://www.edx.org/">edX</a>. All these websites have great courses. Give it a try! :)</li>\n</ul>\n<h4 id="follow-people-on-twitter">Follow people on Twitter</h4>\n<ul>\n<li>If you are interested in Machine Learning, <a href="https://medium.com/@andrewng">Andrew Ng</a> is the person!</li>\n<li>For programming stuff I like to read tweets from <a href="https://medium.com/@dhh">DHH</a>\n(Ruby on Rails creator), <a href="https://medium.com/@dan_abramov">Dan Abramov</a> (Redux Co-author), <a href="https://medium.com/@triketora">Tracy Chou</a> (former Quora, Pinterest), <a href="https://medium.com/@quincylarson">Quincy Larson</a> (freeCodeCamp creator), <a href="https://medium.com/@preethikasireddy">Preethi Kasireddy</a> (Blockchain Engineer), <a href="https://medium.com/@dbader_org">Dan Bader</a> (runs Real Python), and the list goes on.</li>\n</ul>\n<h4 id="people-who-are-documenting-their-journey-on-medium">People who are documenting their journey on Medium</h4>\n<ul>\n<li><a href="https://medium.freecodecamp.org/successfully-teaching-yourself-how-to-code-f6aac23db44a">How To Successfully Teach Yourself How To\nCode</a> by <a href="https://medium.com/@lydiahallie">Lydia Hallie</a></li>\n<li><a href="https://medium.freecodecamp.org/how-i-went-from-fashion-model-to-software-engineer-in-1-year-a7399a40d9e7">How I went from fashion model to software engineer in 1\nyear</a> by <a href="https://medium.com/@madisonkanna">Madison Kanna</a></li>\n<li><a href="https://medium.com/basecs">BaseCS</a> by <a href="https://medium.com/@vaidehijoshi">Vaidehi Joshi</a></li>\n<li><a href="https://medium.com/the-mission/heres-why-learning-how-to-code-is-so-hard-and-what-to-do-about-it-3d6fda152409">Here’s Why Learning How To Code Is So\nHard</a> by <a href="https://medium.com/@kevink">Kevin Kononenko</a></li>\n<li><a href="https://codeburst.io/i-want-to-learn-programming-but-i-dont-know-where-to-start-80dd2d55e1fd">I Want to Learn Programming but I Don’t Know where to\nStart</a> by <a href="https://medium.com/@robynjsilber">Robyn Silber</a></li>\n</ul>\n<h4 id="vlogs--youtube-channels">Vlogs &amp; YouTube channels</h4>\n<p>I really like to watch vlogs and see people’s lifestyle on YouTube.</p>\n<ul>\n<li><a href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q">Fun Fun Function</a> is a channel run by <a href="https://medium.com/@mpjme">Mattias Petter Johansson</a>, a former Spotify Engineer. It started with JavaScript, but lately, he is talking about development in general. I really like how he puts his ideas and present each topic.</li>\n<li><a href="https://www.youtube.com/user/hellomayuko">Mayuko</a> is an iOS software engineer working at <a href="https://medium.com/@Patreon">Patreon</a>. She also talks about engineering and lifestyle in general.</li>\n<li><a href="https://www.youtube.com/channel/UCxX9wt5FWQUAAz4UrysqK9A">CS Dojo</a> is really focused on programming interview advice, algorithms and data structure stuff. This channel is from <a href="https://medium.com/@ykdojo">YK Sugishita</a>, a former Google Engineer in Canada.</li>\n<li><a href="https://www.youtube.com/channel/UCV0qA-eDDICsRR9rPcG7tw">Joma Tech</a> is the funniest and more entertaining YouTube channel among all. <a href="https://medium.com/@joma">Jonathan Ma</a> is a data scientist at Facebook. He vlogs about his engineer life and also gives coding interview advice based on his experience interning in a bunch of tech companies.</li>\n</ul>\n<h3 id="thats-all">That’s all!</h3>\n<p>I hope this article can help you get started.</p>\n<p>You can see the documentation of my complete journey to learn and master programming here on my <a href="https://medium.com/the-renaissance-developer">Renaissance Developer publication</a>.</p>\n<p>Have fun! Keep learning and coding.</p>\n',
  },
  {
    title: 'An introduction to the basic principles of Functional Programming',
    content:
      '<p>After a long time learning and working with object-oriented programming, I took a step back to think about system complexity.</p>\n<blockquote>\n<p>&quot;<code>Complexity is anything that makes software hard to understand or to modify.</code>&quot;\n— John Outerhout</p>\n</blockquote>\n<p>Doing some research, I found functional programming concepts like immutability and pure function. Those concepts are big advantages to build side-effect-free functions, so it is easier to maintain systems — with some other\n<a href="https://hackernoon.com/why-functional-programming-matters-c647f56a7691">benefits</a>.</p>\n<p>In this post, I will tell you more about functional programming, and some\nimportant concepts, with a lot of code examples.</p>\n<h3 id="what-is-functional-programming">What is functional programming?</h3>\n<blockquote>\n<p><strong>Functional programming</strong> is a programming paradigm — a style of building the &gt; structure and elements of computer programs — that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data\n— <a href="https://en.wikipedia.org/wiki/Functional_programming">Wikipedia</a></p>\n</blockquote>\n<h3 id="pure-functions">Pure functions</h3>\n<p>The first fundamental concept we learn when we want to understand functional programming is <strong>pure functions</strong>. But what does that really mean? What makes a function pure?</p>\n<p>So how do we know if a function is <code>pure</code> or not? Here is a very strict definition of purity:</p>\n<ul>\n<li><p>It returns the same result if given the same arguments (it is also referred as\n<code>deterministic</code>)</p>\n</li>\n<li><p>It does not cause any observable side effects</p>\n</li>\n</ul>\n<h4 id="it-returns-the-same-result-if-given-the-same-arguments">It returns the same result if given the same arguments</h4>\n<p>Imagine we want to implement a function that calculates the area of a circle. An impure function would receive <code>radius</code> as the parameter, and then calculate <code>radius * radius * PI</code>. In Clojure, the operator comes first, so <code>radius * radius * PI</code> becomes <code>(* radius radius PI)</code>:</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">def</span> <span class="hljs-title">PI</span> <span class="hljs-number">3.14</span>)\n\n(<span class="hljs-keyword">defn</span> <span class="hljs-title">calculate-area</span>\n  [radius]\n  (<span class="hljs-name"><span class="hljs-built_in">*</span></span> radius radius PI))\n\n(<span class="hljs-name">calculate-area</span> <span class="hljs-number">10</span>) <span class="hljs-comment">;; returns 314.0</span>\n</code></pre>\n<p>Why is this an impure function? Simply because it uses a global object that was not passed as a parameter to the function.</p>\n<p>Now imagine some mathematicians argue that the <code>PI</code> value is actually <code>42</code> and change the value of the global object.</p>\n<p>Our impure function will now result in <code>10 * 10 * 42</code> = <code>4200</code>. For the same parameter (<code>radius = 10</code>), we have a different result. Let&#39;s fix it!</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">def</span> <span class="hljs-title">PI</span> <span class="hljs-number">3.14</span>)\n\n(<span class="hljs-keyword">defn</span> <span class="hljs-title">calculate-area</span>\n  [radius, PI]\n  (<span class="hljs-name"><span class="hljs-built_in">*</span></span> radius radius PI))\n\n(<span class="hljs-name">calculate-area</span> <span class="hljs-number">10</span> PI) <span class="hljs-comment">;; returns 314.0</span>\n</code></pre>\n<p>TA-DA 🎉! Now we’ll always pass the<code>PI</code> value as a parameter to the function. So now we are just accessing parameters passed to the function. No <code>external object</code>.</p>\n<ul>\n<li><p>For the parameters <code>radius = 10</code> &amp; <code>PI = 3.14</code>, we will always have the same the result: <code>314.0</code></p>\n</li>\n<li><p>For the parameters <code>radius = 10</code> &amp; <code>PI = 42</code>, we will always have the same the result: <code>4200</code></p>\n</li>\n</ul>\n<h4 id="reading-files">Reading Files</h4>\n<p>If our function reads external files, it’s not a pure function — the file’s contents can change.</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">characters-counter</span>\n  [text]\n  (<span class="hljs-name"><span class="hljs-built_in">str</span></span> <span class="hljs-string">&quot;Character count: &quot;</span> (<span class="hljs-name"><span class="hljs-built_in">count</span></span> text)))\n\n(<span class="hljs-keyword">defn</span> <span class="hljs-title">analyze-file</span>\n  [filename]\n  (<span class="hljs-name">characters-counter</span> (<span class="hljs-name"><span class="hljs-built_in">slurp</span></span> filename)))\n\n(<span class="hljs-name">analyze-file</span> <span class="hljs-string">&quot;test.txt&quot;</span>)\n</code></pre>\n<h4 id="random-number-generation">Random number generation</h4>\n<p>Any function that relies on a random number generator cannot be pure.</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">year-end-evaluation</span>\n  []\n  (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">&gt;</span></span> (<span class="hljs-name"><span class="hljs-built_in">rand</span></span>) <span class="hljs-number">0.5</span>)\n    <span class="hljs-string">&quot;You get a raise!&quot;</span>\n    <span class="hljs-string">&quot;Better luck next year!&quot;</span>))\n</code></pre>\n<h4 id="it-does-not-cause-any-observable-side-effects">It does not cause any observable side effects</h4>\n<p>Examples of observable side effects include modifying a global object or a parameter passed by reference.</p>\n<p>Now we want to implement a function to receive an integer value and return the value increased by 1.</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">def</span> <span class="hljs-title">counter</span> <span class="hljs-number">1</span>)\n\n(<span class="hljs-keyword">defn</span> <span class="hljs-title">increase-counter</span>\n  [value]\n  (<span class="hljs-keyword">def</span> <span class="hljs-title">counter</span> (<span class="hljs-name"><span class="hljs-built_in">inc</span></span> value))) <span class="hljs-comment">;; please don&#x27;t do this</span>\n\n(<span class="hljs-name">increase-counter</span> counter) <span class="hljs-comment">;; 2</span>\ncounter <span class="hljs-comment">;; 2</span>\n</code></pre>\n<p>We have the <code>counter</code> value. Our impure function receives that value and re-assigns the counter with the value increased by 1.</p>\n<p><strong>Observation</strong>: mutability is discouraged in functional programming.</p>\n<p>We are modifying the global object. But how would we make it <code>pure</code>? Just return the value increased by 1. Simple as that.</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">def</span> <span class="hljs-title">counter</span> <span class="hljs-number">1</span>)\n\n(<span class="hljs-keyword">defn</span> <span class="hljs-title">increase-counter</span>\n  [value]\n  (<span class="hljs-name"><span class="hljs-built_in">inc</span></span> value))\n\n(<span class="hljs-name">increase-counter</span> counter) <span class="hljs-comment">;; 2</span>\ncounter <span class="hljs-comment">;; 1</span>\n</code></pre>\n<p>See that our pure function <code>increase-counter</code> returns 2, but the <code>counter</code> value is still the same. The function returns the incremented value without altering the value of the variable.</p>\n<p>If we follow these two simple rules, it gets easier to understand our programs. Now every function is isolated and unable to impact other parts of our system.</p>\n<p>Pure functions are stable, consistent, and predictable. Given the same parameters, pure functions will always return the same result. We don’t need to think of situations when the same parameter has different results — because it will never happen.</p>\n<h4 id="pure-functions-benefits">Pure functions benefits</h4>\n<p>The code’s definitely easier to test. We don’t need to mock anything. So we can\nunit test pure functions with different contexts:</p>\n<ul>\n<li><p>Given a parameter <code>A</code> → expect the function to return value <code>B</code></p>\n</li>\n<li><p>Given a parameter <code>C</code> → expect the function to return value <code>D</code></p>\n</li>\n</ul>\n<p>A simple example would be a function to receive a collection of numbers and expect it to increment each element of this collection.</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">increment-numbers</span>\n  [numbers]\n  (<span class="hljs-name"><span class="hljs-built_in">map</span></span> inc numbers))\n</code></pre>\n<p>We receive the <code>numbers</code> collection, use <code>map</code> with the <code>inc</code> function to increment each number, and return a new list of incremented numbers.</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-name"><span class="hljs-built_in">=</span></span> [<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>] (<span class="hljs-name">increment-numbers</span> [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>])) <span class="hljs-comment">;; true</span>\n</code></pre>\n<p>For the <code>input</code> <code>[1 2 3 4 5]</code>, the expected <code>output</code> would be <code>[2 3 4 5 6]</code>.</p>\n<h3 id="immutability">Immutability</h3>\n<blockquote>\n<p><em>Unchanging over time or unable to be changed.</em></p>\n</blockquote>\n<p>When data is immutable, its <strong>state cannot change</strong> after it’s created. <strong>If you want to change an immutable object, you can’t. Instead,</strong> you create a new\nobject with the new value.</p>\n<p>In Javascript we commonly use the <code>for</code> loop. This next <code>for</code> statement has some mutable variables.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];\n<span class="hljs-keyword">var</span> sumOfValues = <span class="hljs-number">0</span>;\n\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; values.<span class="hljs-property">length</span>; i++) {\n  sumOfValues += values[i];\n}\n\nsumOfValues; <span class="hljs-comment">// 15</span>\n</code></pre>\n<p>For each iteration, we are changing the <code>i</code> and the <code>sumOfValue</code> <strong>state</strong>. But how do we handle mutability in iteration? Recursion! Back to Clojure!</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">sum</span>\n  [values]\n  (<span class="hljs-name"><span class="hljs-built_in">loop</span></span> [vals values\n         total <span class="hljs-number">0</span>]\n    (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">empty?</span></span> vals)\n      total\n      (<span class="hljs-name"><span class="hljs-built_in">recur</span></span> (<span class="hljs-name"><span class="hljs-built_in">rest</span></span> vals) (<span class="hljs-name"><span class="hljs-built_in">+</span></span> (<span class="hljs-name"><span class="hljs-built_in">first</span></span> vals) total)))))\n\n(<span class="hljs-name">sum</span> [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]) <span class="hljs-comment">;; 15</span>\n</code></pre>\n<p>So here we have the <code>sum</code> function that receives a vector of numerical values. The <code>recur</code> jumps back into the <code>loop</code> until we get the vector empty (<a href="https://en.wikipedia.org/wiki/Recursion">our recursion</a> <code>base case</code>). For each &quot;iteration&quot; we will add the value to the <code>total</code> accumulator.</p>\n<p>With recursion, we keep our <strong>variables</strong> immutable.</p>\n<p><strong>Observation</strong>: Yes! We can use <code>reduce</code> to implement this function. We will see this in the <code>Higher Order Functions</code> topic.</p>\n<p>It is also very common to build up the final <strong>state</strong> of an object. Imagine we have a string, and we want to transform this string into a <code>url slug</code>.</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UrlSlugify</span></span>\n  <span class="hljs-keyword">attr_reader</span> <span class="hljs-symbol">:text</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(text)</span></span>\n    <span class="hljs-variable">@text</span> = text\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">slugify!</span></span>\n    text.downcase!\n    text.strip!\n    text.gsub!(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>)\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n\nUrlSlugify.new(<span class="hljs-string">&#x27; I will be a url slug   &#x27;</span>).slugify! <span class="hljs-comment"># &quot;i-will-be-a-url-slug&quot;</span>\n</code></pre>\n<p>In OOP in Ruby, we would create a class, let’s say, <code>UrlSlugify</code>. And this class will have a <code>slugify!</code> method to transform the string input into a <code>url slug</code>.</p>\n<p>Beautiful! It’s implemented! Here we have imperative programming saying exactly what we want to do in each <code>slugify</code> process — first lower case, then remove useless white spaces and, finally, replace remaining white spaces with hyphens.</p>\n<p>But we are mutating the input state in this process.</p>\n<p>We can handle this mutation by doing function composition, or function chaining. In other words, the result of a function will be used as an input for the next function, without modifying the original input string.</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">slugify</span>\n  [string]\n  (<span class="hljs-name">clojure.string/replace</span>\n    (<span class="hljs-name">clojure.string/lower-case</span>\n      (<span class="hljs-name">clojure.string/trim</span> string)) #<span class="hljs-string">&quot; &quot;</span> <span class="hljs-string">&quot;-&quot;</span>))\n\n(<span class="hljs-name">slugify</span> <span class="hljs-string">&quot; I will be a url slug   &quot;</span>)\n</code></pre>\n<p>Here we have:</p>\n<ul>\n<li><p><code>trim</code>: removes whitespace from both ends of a string</p>\n</li>\n<li><p><code>lower-case</code>: converts the string to all lower-case</p>\n</li>\n<li><p><code>replace</code>: replaces all instances of match with replacement in a given string</p>\n</li>\n</ul>\n<p>We combine all three functions and we can <code>&quot;slugify&quot;</code> our string.</p>\n<p>Speaking of <strong>combining functions</strong>, we can use the <code>comp</code> function to compose all three functions. Let&#39;s take a look:</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">slugify</span>\n  [string]\n  ((<span class="hljs-name"><span class="hljs-built_in">comp</span></span> #(<span class="hljs-name">clojure.string/replace</span> % #<span class="hljs-string">&quot; &quot;</span> <span class="hljs-string">&quot;-&quot;</span>)\n         clojure.string/lower-case\n         clojure.string/trim)\n    string))\n\n(<span class="hljs-name">slugify</span> <span class="hljs-string">&quot; I will be a url slug   &quot;</span>) <span class="hljs-comment">;; &quot;i-will-be-a-url-slug&quot;</span>\n</code></pre>\n<h3 id="referential-transparency">Referential transparency</h3>\n<p>Let’s implement a <code>square function</code>:</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">square</span>\n  [n]\n  (<span class="hljs-name"><span class="hljs-built_in">*</span></span> n n))\n</code></pre>\n<p>This (pure) function will always have the same output, given the same input.</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-name">square</span> <span class="hljs-number">2</span>) <span class="hljs-comment">;; 4</span>\n(<span class="hljs-name">square</span> <span class="hljs-number">2</span>) <span class="hljs-comment">;; 4</span>\n(<span class="hljs-name">square</span> <span class="hljs-number">2</span>) <span class="hljs-comment">;; 4</span>\n<span class="hljs-comment">;; ...</span>\n</code></pre>\n<p>Passing “2” as a parameter of the <code>square function</code>will always returns 4. So now we can replace the <code>(square 2)</code> with 4. That&#39;s it! Our function is <code>referentially transparent</code>.</p>\n<p>Basically, if a function consistently yields the same result for the same input, it is referentially transparent.</p>\n<p><strong>pure functions + immutable data = referential transparency</strong></p>\n<p>With this concept, a cool thing we can do is to memoize the function. Imagine we have this function:</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">3</span> (<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">5</span> <span class="hljs-number">8</span>))\n</code></pre>\n<p>The <code>(+ 5 8)</code> equals <code>13</code>. This function will always result in <code>13</code>. So we can do this:</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">3</span> <span class="hljs-number">13</span>)\n</code></pre>\n<p>And this expression will always result in <code>16</code>. We can replace the entire expression with a numerical constant and <a href="https://en.wikipedia.org/wiki/Memoization">memoize</a> it.</p>\n<h3 id="functions-as-first-class-entities">Functions as first-class entities</h3>\n<p>The idea of functions as first-class entities is that functions are <strong>also</strong> treated as values <strong>and</strong> used as data.</p>\n<p>In Clojure it’s common to use <code>defn</code> to define functions, but this is just syntactic sugar for <code>(def foo (fn ...))</code>. <code>fn</code> returns the function itself. <code>defn</code> returns a <code>var</code> which points to a function object.</p>\n<p>Functions as first-class entities can:</p>\n<ul>\n<li><p>refer to it from constants and variables</p>\n</li>\n<li><p>pass it as a parameter to other functions</p>\n</li>\n<li><p>return it as result from other functions</p>\n</li>\n</ul>\n<p>The idea is to treat functions as values and pass functions like data. This way we can combine different functions to create new functions with new behavior.</p>\n<p>Imagine we have a function that sums two values and then doubles the value. Something like this:</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">double-sum</span>\n  [a b]\n  (<span class="hljs-name"><span class="hljs-built_in">*</span></span> <span class="hljs-number">2</span> (<span class="hljs-name"><span class="hljs-built_in">+</span></span> a b)))\n</code></pre>\n<p>Now a function that subtracts values and the returns the double:</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">double-subtraction</span>\n  [a b]\n  (<span class="hljs-name"><span class="hljs-built_in">*</span></span> <span class="hljs-number">2</span> (<span class="hljs-name"><span class="hljs-built_in">-</span></span> a b)))\n</code></pre>\n<p>These functions have similar logic, but the difference is the operators functions. If we can treat functions as values and pass these as arguments, we can build a function that receives the operator function and use it inside our function. Let’s build it!</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">double-operator</span>\n  [f a b]\n  (<span class="hljs-name"><span class="hljs-built_in">*</span></span> <span class="hljs-number">2</span> (<span class="hljs-name">f</span> a b)))\n\n(<span class="hljs-name">double-operator</span> + <span class="hljs-number">3</span> <span class="hljs-number">1</span>) <span class="hljs-comment">;; 8</span>\n(<span class="hljs-name">double-operator</span> - <span class="hljs-number">3</span> <span class="hljs-number">1</span>) <span class="hljs-comment">;; 4</span>\n</code></pre>\n<p>Done! Now we have an <code>f</code> argument, and use it to process <code>a</code> and <code>b</code>. We passed the <code>+</code> and <code>-</code> functions to compose with the <code>double-operator</code> function and create a new behavior.</p>\n<h3 id="higher-order-functions">Higher-order functions</h3>\n<p>When we talk about higher-order functions, we mean a function that either:</p>\n<ul>\n<li><p>takes one or more functions as arguments, or</p>\n</li>\n<li><p>returns a function as its result</p>\n</li>\n</ul>\n<p>The <code>double-operator</code> function we implemented above is a higher-order function because it takes an operator function as an argument and uses it.</p>\n<p>You’ve probably already heard about <code>filter</code>, <code>map</code>, and <code>reduce</code>. Let&#39;s take a look at these.</p>\n<h4 id="filter">Filter</h4>\n<p>Given a collection, we want to filter by an attribute. The filter function expects a <code>true</code> or <code>false</code> value to determine if the element <strong>should or should not</strong> be included in the result collection. Basically,if the callback expression is <code>true</code>, the filter function will include the element in the result collection. Otherwise, it will not.</p>\n<p>A simple example is when we have a collection of integers and we want only the even numbers.</p>\n<p><strong>Imperative approach</strong></p>\n<p>An imperative way to do it with Javascript is to:</p>\n<ul>\n<li><p>create an empty vector <code>evenNumbers</code></p>\n</li>\n<li><p>iterate over the <code>numbers</code> vector</p>\n</li>\n<li><p>push the even numbers to the <code>evenNumbers</code> vector</p>\n</li>\n</ul>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>];\n<span class="hljs-keyword">var</span> evenNumbers = [];\n\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; numbers.<span class="hljs-property">length</span>; i++) {\n  <span class="hljs-keyword">if</span> (numbers[i] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) {\n    evenNumbers.<span class="hljs-title function_">push</span>(numbers[i]);\n  }\n}\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(evenNumbers); <span class="hljs-comment">// (6) [0, 2, 4, 6, 8, 10]</span>\n</code></pre>\n<p>We can use the <code>filter</code> higher order function to receive the <code>even?</code> function, and return a list of even numbers:</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">even-numbers</span>\n  [coll]\n  (<span class="hljs-name"><span class="hljs-built_in">filter</span></span> even? coll))\n\n(<span class="hljs-name">even-numbers</span> [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span>]) <span class="hljs-comment">;; (0 2 4 6 8 10)</span>\n</code></pre>\n<p>One interesting problem I solved on <a href="https://www.hackerrank.com/domains/fp">Hacker Rank FP</a> Path was the <a href="https://www.hackerrank.com/challenges/fp-filter-array/problem">Filter Array problem</a>. The problem idea is to filter a given array of integers and output only those values that are less than a specified value <code>X</code>.</p>\n<p>An imperative Javascript solution to this problem is something like:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> filterArray = <span class="hljs-keyword">function</span> (<span class="hljs-params">x, coll</span>) {\n  <span class="hljs-keyword">var</span> resultArray = [];\n\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; coll.<span class="hljs-property">length</span>; i++) {\n    <span class="hljs-keyword">if</span> (coll[i] &lt; x) {\n      resultArray.<span class="hljs-title function_">push</span>(coll[i]);\n    }\n  }\n\n  <span class="hljs-keyword">return</span> resultArray;\n};\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">filterArray</span>(<span class="hljs-number">3</span>, [<span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>])); <span class="hljs-comment">// (3) [2, 1, 0]</span>\n</code></pre>\n<p>We say exactly what our function needs to do — iterate over the collection, compare the collection current item with <code>x</code>, and push this element to the <code>resultArray</code> if it pass the condition.</p>\n<p><strong>Declarative approach</strong></p>\n<p>But we want a more declarative way to solve this problem, and using the <code>filter</code> higher order function as well.</p>\n<p>A declarative Clojure solution would be something like this:</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">filter-array</span>\n  [x coll]\n  (<span class="hljs-name"><span class="hljs-built_in">filter</span></span> #(<span class="hljs-name"><span class="hljs-built_in">&gt;</span></span> x %) coll))\n\n(<span class="hljs-name">filter-array</span> <span class="hljs-number">3</span> [<span class="hljs-number">10</span> <span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span>]) <span class="hljs-comment">;; (2 1 0)</span>\n</code></pre>\n<p>This syntax seems a bit strange in the first place, but is easy to understand.</p>\n<p><code>#(&gt; x %)</code> is just a anonymous function that receives <code>x</code> and compares it with each element in the collection. <code>%</code> represents the parameter of the anonymous function — in this case the current element inside the <code>filter</code>.</p>\n<p>We can also do this with maps. Imagine we have a map of people with their <code>name</code> and <code>age</code>. And we want to filter only people over a specified value of age, in this example people who are more than 21 years old.</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">def</span> <span class="hljs-title">people</span> [{<span class="hljs-symbol">:name</span> <span class="hljs-string">&quot;TK&quot;</span> <span class="hljs-symbol">:age</span> <span class="hljs-number">26</span>}\n             {<span class="hljs-symbol">:name</span> <span class="hljs-string">&quot;Kaio&quot;</span> <span class="hljs-symbol">:age</span> <span class="hljs-number">10</span>}\n             {<span class="hljs-symbol">:name</span> <span class="hljs-string">&quot;Kazumi&quot;</span> <span class="hljs-symbol">:age</span> <span class="hljs-number">30</span>}])\n\n(<span class="hljs-keyword">defn</span> <span class="hljs-title">over-age</span>\n  [people]\n  (<span class="hljs-name"><span class="hljs-built_in">filter</span></span>\n    #(<span class="hljs-name"><span class="hljs-built_in">&lt;</span></span> <span class="hljs-number">21</span> (<span class="hljs-symbol">:age</span> %))\n    people))\n\n(<span class="hljs-name">over-age</span> people) <span class="hljs-comment">;; ({:name &quot;TK&quot;, :age 26} {:name &quot;Kazumi&quot;, :age 30})</span>\n</code></pre>\n<p>Summary of code:</p>\n<ul>\n<li><p>we have a list of people (with <code>name</code> and <code>age</code>).</p>\n</li>\n<li><p>we have the anonymous function <code>#(&lt; 21 (:age %))</code>. Remember that the <code>%</code> represents the current element from the collection? Well, the element of the collection is a people map. If we do <code>(:age {:name &quot;TK&quot; :age 26})</code>, it returns the age value, <code>26</code> in this case.</p>\n</li>\n<li><p>we filter all people based on this anonymous function.</p>\n</li>\n</ul>\n<h4 id="map">Map</h4>\n<p>The idea of map is to transform a collection.</p>\n<blockquote>\n<p>The <code>map</code> method transforms a collection by applying a function to all of its &gt; elements and building a new collection from the returned values.</p>\n</blockquote>\n<p>Let’s get the same <code>people</code> collection above. We don&#39;t want to filter by “over age” now. We just want a list of strings, something like <code>TK is 26 years old</code>. So the final string might be <code>:name is :age years old</code> where <code>:name</code> and <code>:age</code> are attributes from each element in the <code>people</code> collection.</p>\n<p>In a imperative Javascript way, it would be:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> people = [\n  { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">26</span> },\n  { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kaio&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">10</span> },\n  { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kazumi&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span> },\n];\n\n<span class="hljs-keyword">var</span> peopleSentences = [];\n\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; people.<span class="hljs-property">length</span>; i++) {\n  <span class="hljs-keyword">var</span> sentence = people[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27; is &#x27;</span> + people[i].<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old&#x27;</span>;\n  peopleSentences.<span class="hljs-title function_">push</span>(sentence);\n}\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(peopleSentences); <span class="hljs-comment">// [&#x27;TK is 26 years old&#x27;, &#x27;Kaio is 10 years old&#x27;, &#x27;Kazumi is 30 years old&#x27;]</span>\n</code></pre>\n<p>In a declarative Clojure way, it would be:</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">def</span> <span class="hljs-title">people</span> [{<span class="hljs-symbol">:name</span> <span class="hljs-string">&quot;TK&quot;</span> <span class="hljs-symbol">:age</span> <span class="hljs-number">26</span>}\n             {<span class="hljs-symbol">:name</span> <span class="hljs-string">&quot;Kaio&quot;</span> <span class="hljs-symbol">:age</span> <span class="hljs-number">10</span>}\n             {<span class="hljs-symbol">:name</span> <span class="hljs-string">&quot;Kazumi&quot;</span> <span class="hljs-symbol">:age</span> <span class="hljs-number">30</span>}])\n\n(<span class="hljs-keyword">defn</span> <span class="hljs-title">people-sentences</span>\n  [people]\n  (<span class="hljs-name"><span class="hljs-built_in">map</span></span>\n    #(<span class="hljs-name"><span class="hljs-built_in">str</span></span> (<span class="hljs-symbol">:name</span> %) <span class="hljs-string">&quot; is &quot;</span> (<span class="hljs-symbol">:age</span> %) <span class="hljs-string">&quot; years old&quot;</span>)\n    people))\n\n(<span class="hljs-name">people-sentences</span> people) <span class="hljs-comment">;; (&quot;TK is 26 years old&quot; &quot;Kaio is 10 years old&quot; &quot;Kazumi is 30 years old&quot;)</span>\n</code></pre>\n<p>The whole idea is to transform a given collection into a new collection.</p>\n<p>Another interesting Hacker Rank problem was the <a href="https://www.hackerrank.com/challenges/fp-update-list/problem">update list problem</a>. We just want to update the values of a given collection with their absolute values.</p>\n<p>For example, the input <code>[1 2 3 -4 5]</code>needs the output to be <code>[1 2 3 4 5]</code>. The absolute value of <code>-4</code> is <code>4</code>.</p>\n<p>A simple solution would be an in-place update for each collection value.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">4</span>, <span class="hljs-number">5</span>];\n\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; values.<span class="hljs-property">length</span>; i++) {\n  values[i] = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(values[i]);\n}\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(values); <span class="hljs-comment">// [1, 2, 3, 4, 5]</span>\n</code></pre>\n<p>We use the <code>Math.abs</code> function to transform the value into its absolute value, and do the in-place update.</p>\n<p>This is <strong>not</strong> a functional way to implement this solution.</p>\n<p>First, we learned about immutability. We know how immutability is important to make our functions more consistent and predictable. The idea is to build a new collection with all absolute values.</p>\n<p>Second, why not use <code>map</code> here to &quot;transform&quot; all data?</p>\n<p>My first idea was to build a <code>to-absolute</code> function to handle only one value.</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">to-absolute</span>\n  [n]\n  (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">neg?</span></span> n)\n    (<span class="hljs-name"><span class="hljs-built_in">*</span></span> n <span class="hljs-number">-1</span>)\n    n))\n\n(<span class="hljs-name">to-absolute</span> <span class="hljs-number">-1</span>) <span class="hljs-comment">;; 1</span>\n(<span class="hljs-name">to-absolute</span> <span class="hljs-number">1</span>)  <span class="hljs-comment">;; 1</span>\n(<span class="hljs-name">to-absolute</span> <span class="hljs-number">-2</span>) <span class="hljs-comment">;; 2</span>\n(<span class="hljs-name">to-absolute</span> <span class="hljs-number">0</span>)  <span class="hljs-comment">;; 0</span>\n</code></pre>\n<p>If it is negative, we want to transform it in a positive value (the absolute value). Otherwise, we don’t need to transform it.</p>\n<p>Now that we know how to do <code>absolute</code> for one value, we can use this function to pass as an argument to the <code>map</code> function. Do you remember that a <code>higher order function</code> can receive a function as an argument and use it? Yes, map can do it!</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">update-list-map</span>\n  [coll]\n  (<span class="hljs-name"><span class="hljs-built_in">map</span></span> to-absolute coll))\n\n(<span class="hljs-name">update-list-map</span> [])               <span class="hljs-comment">;; ()</span>\n(<span class="hljs-name">update-list-map</span> [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>])      <span class="hljs-comment">;; (1 2 3 4 5)</span>\n(<span class="hljs-name">update-list-map</span> [<span class="hljs-number">-1</span> <span class="hljs-number">-2</span> <span class="hljs-number">-3</span> <span class="hljs-number">-4</span> <span class="hljs-number">-5</span>]) <span class="hljs-comment">;; (1 2 3 4 5)</span>\n(<span class="hljs-name">update-list-map</span> [<span class="hljs-number">1</span> <span class="hljs-number">-2</span> <span class="hljs-number">3</span> <span class="hljs-number">-4</span> <span class="hljs-number">5</span>])    <span class="hljs-comment">;; (1 2 3 4 5)</span>\n</code></pre>\n<p>Wow. So beautiful! 😍</p>\n<h4 id="reduce">Reduce</h4>\n<p>The idea of reduce is to receive a function and a collection, and return a value created by combining the items.</p>\n<p>A common example people talk about is to get the total amount of an order. Imagine you were at a shopping website. You’ve added <code>Product 1</code>, <code>Product 2</code>, <code>Product 3</code>, and <code>Product 4</code> to your shopping cart (order). Now we want to calculate the total amount of the shopping cart.</p>\n<p>In imperative way, we would iterate the order list and sum each product amount to the total amount.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> orders = [\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Product 1&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">10</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Product 2&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">30</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Product 3&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">20</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Product 4&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">60</span> },\n];\n\n<span class="hljs-keyword">var</span> totalAmount = <span class="hljs-number">0</span>;\n\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; orders.<span class="hljs-property">length</span>; i++) {\n  totalAmount += orders[i].<span class="hljs-property">amount</span>;\n}\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(totalAmount); <span class="hljs-comment">// 120</span>\n</code></pre>\n<p>Using <code>reduce</code>, we can build a function to handle the <code>amount sum</code> and pass it as an argument to the <code>reduce</code> function.</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">def</span> <span class="hljs-title">shopping-cart</span>\n  [{ <span class="hljs-symbol">:product-title</span> <span class="hljs-string">&quot;Product 1&quot;</span> <span class="hljs-symbol">:amount</span> <span class="hljs-number">10</span> },\n   { <span class="hljs-symbol">:product-title</span> <span class="hljs-string">&quot;Product 2&quot;</span> <span class="hljs-symbol">:amount</span> <span class="hljs-number">30</span> },\n   { <span class="hljs-symbol">:product-title</span> <span class="hljs-string">&quot;Product 3&quot;</span> <span class="hljs-symbol">:amount</span> <span class="hljs-number">20</span> },\n   { <span class="hljs-symbol">:product-title</span> <span class="hljs-string">&quot;Product 4&quot;</span> <span class="hljs-symbol">:amount</span> <span class="hljs-number">60</span> }])\n\n(<span class="hljs-keyword">defn</span> <span class="hljs-title">sum-amount</span>\n  [total-amount current-product]\n  (<span class="hljs-name"><span class="hljs-built_in">+</span></span> (<span class="hljs-symbol">:amount</span> current-product) total-amount))\n\n(<span class="hljs-keyword">defn</span> <span class="hljs-title">get-total-amount</span>\n  [shopping-cart]\n  (<span class="hljs-name"><span class="hljs-built_in">reduce</span></span> sum-amount <span class="hljs-number">0</span> shopping-cart))\n\n(<span class="hljs-name">get-total-amount</span> shopping-cart) <span class="hljs-comment">;; 120</span>\n</code></pre>\n<p>Here we have <code>shopping-cart</code>, the function <code>sum-amount</code> that receives the current <code>total-amount</code> , and the <code>current-product</code> object to <code>sum</code> them.</p>\n<p>The <code>get-total-amount</code> function is used to <code>reduce</code> the <code>shopping-cart</code> by using the <code>sum-amount</code> and starting from <code>0</code>.</p>\n<p>Another way to get the total amount is to compose <code>map</code> and <code>reduce</code>. What do I mean by that? We can use <code>map</code> to transform the <code>shopping-cart</code> into a collection of <code>amount</code> values, and then just use the <code>reduce</code> function with <code>+</code> function.</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">def</span> <span class="hljs-title">shopping-cart</span>\n  [{ <span class="hljs-symbol">:product-title</span> <span class="hljs-string">&quot;Product 1&quot;</span> <span class="hljs-symbol">:amount</span> <span class="hljs-number">10</span> },\n   { <span class="hljs-symbol">:product-title</span> <span class="hljs-string">&quot;Product 2&quot;</span> <span class="hljs-symbol">:amount</span> <span class="hljs-number">30</span> },\n   { <span class="hljs-symbol">:product-title</span> <span class="hljs-string">&quot;Product 3&quot;</span> <span class="hljs-symbol">:amount</span> <span class="hljs-number">20</span> },\n   { <span class="hljs-symbol">:product-title</span> <span class="hljs-string">&quot;Product 4&quot;</span> <span class="hljs-symbol">:amount</span> <span class="hljs-number">60</span> }])\n\n(<span class="hljs-keyword">defn</span> <span class="hljs-title">get-amount</span>\n  [product]\n  (<span class="hljs-symbol">:amount</span> product))\n\n(<span class="hljs-keyword">defn</span> <span class="hljs-title">get-total-amount</span>\n  [shopping-cart]\n  (<span class="hljs-name"><span class="hljs-built_in">reduce</span></span> + (<span class="hljs-name"><span class="hljs-built_in">map</span></span> get-amount shopping-cart)))\n\n(<span class="hljs-name">get-total-amount</span> shopping-cart) <span class="hljs-comment">;; 120</span>\n</code></pre>\n<p>The <code>get-amount</code> receives the product object and returns only the <code>amount</code> value. So what we have here is <code>[10 30 20 60]</code>. And then the <code>reduce</code> combines all items by adding up. Beautiful!</p>\n<p>We took a look at how each higher-order function works. I want to show you an example of how we can compose all three functions in a simple example.</p>\n<p>Talking about <code>shopping cart</code>, imagine we have this list of products in our order:</p>\n<pre><code class="hljs language-clojure">(<span class="hljs-keyword">def</span> <span class="hljs-title">shopping-cart</span>\n  [{ <span class="hljs-symbol">:product-title</span> <span class="hljs-string">&quot;Functional Programming&quot;</span> <span class="hljs-symbol">:type</span> <span class="hljs-string">&quot;books&quot;</span>      <span class="hljs-symbol">:amount</span> <span class="hljs-number">10</span> },\n   { <span class="hljs-symbol">:product-title</span> <span class="hljs-string">&quot;Kindle&quot;</span>                 <span class="hljs-symbol">:type</span> <span class="hljs-string">&quot;eletronics&quot;</span> <span class="hljs-symbol">:amount</span> <span class="hljs-number">30</span> },\n   { <span class="hljs-symbol">:product-title</span> <span class="hljs-string">&quot;Shoes&quot;</span>                  <span class="hljs-symbol">:type</span> <span class="hljs-string">&quot;fashion&quot;</span>    <span class="hljs-symbol">:amount</span> <span class="hljs-number">20</span> },\n   { <span class="hljs-symbol">:product-title</span> <span class="hljs-string">&quot;Clean Code&quot;</span>             <span class="hljs-symbol">:type</span> <span class="hljs-string">&quot;books&quot;</span>      <span class="hljs-symbol">:amount</span> <span class="hljs-number">60</span> }])\n</code></pre>\n<p>We want the total amount of all books in our shopping cart. Simple as that. The algorithm?</p>\n<ul>\n<li><p><strong>filter</strong> by book type</p>\n</li>\n<li><p>transform the shopping cart into a collection of amount using <strong>map</strong></p>\n</li>\n<li><p>combine all items by adding them up with <strong>reduce</strong></p>\n</li>\n</ul>\n<p>Done! 🎉</p>\n<h3 id="resources">Resources</h3>\n<p>I’ve organised some resources I read and studied. I’m sharing the ones that I found really interesting. For more resources, visit my <a href="https://github.com/imteekay/learning-functional-programming">Functional Programming Github repository</a>.</p>\n<ul>\n<li><a href="https://github.com/imteekay/learning-functional-programming/tree/master/ruby">Ruby specific resources</a></li>\n<li><a href="https://github.com/imteekay/learning-functional-programming/tree/master/javascript">Javascript specific resources</a></li>\n<li><a href="https://github.com/imteekay/learning-functional-programming/tree/master/clojure">Clojure specific resources</a></li>\n</ul>\n<h4 id="intros">Intros</h4>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=e-5obm1G_FY">Learning FP in JS</a></li>\n<li><a href="https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming">Intro do FP with Python</a></li>\n<li><a href="https://blog.codeship.com/overview-of-functional-programming">Overview of FP</a></li>\n<li><a href="https://hackernoon.com/a-quick-introduction-to-functional-javascript-7e6fe520e7fa">A quick intro to functional JS</a></li>\n<li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0">What is FP?</a></li>\n<li><a href="https://github.com/hemanth/functional-programming-jargon">Functional Programming Jargon</a></li>\n</ul>\n<h4 id="pure-functions-1">Pure functions</h4>\n<ul>\n<li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976">What is a pure function?</a></li>\n<li><a href="https://www.fpcomplete.com/blog/2017/04/pure-functional-programming">Pure Functional Programming 1</a></li>\n<li><a href="https://www.fpcomplete.com/blog/2017/05/pure-functional-programming-part-2">Pure Functional Programming 2</a></li>\n</ul>\n<h4 id="immutable-data">Immutable data</h4>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=Wo0qiGPSV-s">Immutable DS for functional programming</a></li>\n<li><a href="http://henrikeichenhardt.blogspot.com/2013/06/why-shared-mutable-state-is-root-of-all.html">Why shared mutable state is the root of all evil</a></li>\n<li><a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1">Structural Sharing in Clojure: Part 1</a></li>\n<li><a href="http://hypirion.com/musings/understanding-persistent-vector-pt-2">Structural Sharing in Clojure: Part 2</a></li>\n<li><a href="http://hypirion.com/musings/understanding-persistent-vector-pt-3">Structural Sharing in Clojure: Part 3</a></li>\n<li><a href="http://hypirion.com/musings/persistent-vector-performance-summarised">Structural Sharing in Clojure: Final part</a></li>\n</ul>\n<h4 id="higher-order-functions-1">Higher-order functions</h4>\n<ul>\n<li><a href="https://eloquentjavascript.net/05_higher_order.html">Eloquent JS: Higher Order Functions</a></li>\n<li><a href="https://www.youtube.com/watch?v=BMUiFMZr7vk&amp;t=0s&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&amp;index=2&amp;ab_channel=FunFunFunction">Fun fun function Filter</a></li>\n<li><a href="https://www.youtube.com/watch?v=bCqtb-Z5YGQ&amp;index=2&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&amp;ab_channel=FunFunFunction">Fun fun function Map</a></li>\n<li><a href="https://www.youtube.com/watch?v=Wl98eZpkp-c&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&amp;index=3&amp;frags=wn&amp;ab_channel=FunFunFunction">Fun fun function Basic Reduce</a></li>\n<li><a href="https://www.youtube.com/watch?v=1DMolJ2FrNY&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&amp;index=4&amp;ab_channel=FunFunFunction">Fun fun function Advanced Reduce</a></li>\n<li><a href="https://clojure.org/guides/higher_order_functions">Clojure Higher Order Functions</a></li>\n<li><a href="https://purelyfunctional.tv/lesson/filter/">Purely Function Filter</a></li>\n<li><a href="https://purelyfunctional.tv/lesson/map/">Purely Functional Map</a></li>\n<li><a href="https://purelyfunctional.tv/lesson/reduce/">Purely Functional Reduce</a></li>\n</ul>\n<h4 id="declarative-programming">Declarative Programming</h4>\n<ul>\n<li><a href="https://tylermcginnis.com/imperative-vs-declarative-programming/">Declarative Programming vs\nImperative</a></li>\n</ul>\n<hr>\n<h2 id="thats-it">That’s it!</h2>\n<p>Hey people, I hope you had fun reading this post, and I hope you learned a lot here! This was my attempt to share what I’m learning.</p>\n<p><a href="https://github.com/imteekay/functional-programming-article-source-code">Here is the repository with all codes</a> from this article.</p>\n<p>Come learn with me. I’m sharing resources and my code in this <a href="https://github.com/imteekay/learning-functional-programming">Learning Functional Programming repository</a>.</p>\n<p>I hope you saw something useful to you here. And see you next time! :)</p>\n',
  },
  {
    title: 'Basic Recipes for React Testing Library',
    content:
      '<p>Last year I attended a conference called <a href="https://clojure-south.com/">Clojure South</a> where we had a lot of cool tech talks about functional programming and the programming language Clojure.</p>\n<p>One of the talks I really liked was about <a href="https://www.youtube.com/watch?v=0hhQmbHlwcY&amp;ab_channel=BuildingNubank">Clojure Spec &amp; Generative Tests</a> by David Chelimsky. He was part of the <a href="https://github.com/rspec/rspec">Rspec team</a> and he works in the clojure.spec team.</p>\n<p>He started his talk asking</p>\n<blockquote>\n<p>Why do you make tests?</p>\n</blockquote>\n<p><em>&quot;Confidence&quot;</em> said someone in the audience. Confidence that your software works as expected.</p>\n<p>But tests only give confidence if we add tests that make sense. So it&#39;s important to have best practices and adjust the mindset to test properly.</p>\n<blockquote>\n<p>Side note: In my opinion, having bad tests is worse than having any tests at all. Without tests, you are aware that you need tests in the future or that you will need to manually test your software before shipping to production. With bad tests, you think the tests cover good parts of your product, but they actually don&#39;t.</p>\n</blockquote>\n<p>Thinking about this, I wanted to play around with React Testing Library to provide good examples of what and how to test properly. So I created a playground to, well, <a href="https://github.com/imteekay/react-testing-library-recipes">play with the Testing Library in some different contexts</a>.</p>\n<p>So, for this post, we will talk about theses topics:</p>\n<ul>\n<li>How to query</li>\n<li>How to verify content</li>\n<li>How to handle forms</li>\n<li>How to handle loading and fetching/async operations</li>\n</ul>\n<p>So let&#39;s get started!</p>\n<h1 id="how-to-query">How to query</h1>\n<p>We have three main ways to get elements from the DOM: <code>getBy</code>, <code>queryBy</code>, and <code>findBy</code>.</p>\n<p>All of these queries have different variants. For example, the <code>getBy</code> query has some variants like <code>getByRole</code> and <code>getByLabelText</code>. Depending on the context, you better use one over the others. But to simplify this process, the Testing Library docs has a section called <a href="https://testing-library.com/docs/guide-which-query">Which query should I use?</a> that explains the priority of one query over the others thinking about accessibility and semantics.</p>\n<h2 id="getby">getBy</h2>\n<p>Before start using the <code>getBy</code> query, let&#39;s see what we are testing.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Queries</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Queries</span>;\n</code></pre>\n<p>This a simple component called <code>Queries</code> that renders a title with a text <code>Title</code>.</p>\n<p>In this first test, we want to know if it renders the proper text. To query the element (<code>&lt;h1&gt;</code>), we&#39;ll be using the <code>getBy</code>. More specifically, we&#39;ll try the <code>getByText</code>.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { render, screen } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@testing-library/react&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Queries</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../Queries&#x27;</span>;\n\n<span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;getBy&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;title is in the document&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Queries</span> /&gt;</span></span>);\n\n    <span class="hljs-keyword">const</span> title = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-regexp">/title/i</span>);\n\n    <span class="hljs-title function_">expect</span>(title).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<p>So here it is the first test. As simple as it looks.</p>\n<ul>\n<li>We use the <code>render</code> function from the testing library to render the component we want to test</li>\n<li>Query by the text <code>title</code> together with the <code>screen</code> function from the testing library.</li>\n<li>In the query, we use the regular expression to not have the problem of upper or lower case.</li>\n<li>And finally we expect to have this element <code>title</code> in the DOM.</li>\n</ul>\n<p>We&#39;ll talk about this <code>toBeInTheDocument</code> method later. But we basically want to use this matcher to expect that title is in the DOM.</p>\n<p>One specific &quot;feature&quot; the <code>getBy</code> has is to throw an error if it doesn&#39;t find the element in the rendered component. Let&#39;s see it in action.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;verify no element&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Queries</span> /&gt;</span></span>);\n\n  <span class="hljs-keyword">try</span> {\n    screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-regexp">/subtitle/i</span>);\n  } <span class="hljs-keyword">catch</span> (e) {\n    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Did not find nonexistent element&#x27;</span>);\n  }\n});\n</code></pre>\n<p>If you run this test, the <code>subtitle</code> text doesn&#39;t exist and it will throw an error. As we use the <code>try-catch</code>, when we run the test, it will log the text <code>Did not find nonexistent element</code> in your terminal.</p>\n<h2 id="queryby">queryBy</h2>\n<p><code>queryBy</code> has the same feature as the <code>getBy</code>. The main difference is that the <code>queryBy</code> doesn&#39;t throw an error if it doesn&#39;t find a given element in the DOM. Let&#39;s do the same implementation we did with <code>getBy</code>, but now with <code>queryBy</code>.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { render, screen } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@testing-library/react&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Queries</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../Queries&#x27;</span>;\n\n<span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;queryBy&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;title is in the document&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Queries</span> /&gt;</span></span>);\n\n    <span class="hljs-keyword">const</span> title = screen.<span class="hljs-title function_">queryByText</span>(<span class="hljs-regexp">/title/i</span>);\n\n    <span class="hljs-title function_">expect</span>(title).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<p>The happy path works the same way. Here we use the <code>queryByText</code> to get the title element and expect it to be in the document.</p>\n<p>But now when it doesn&#39;t find an element:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;verify no element&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Queries</span> /&gt;</span></span>);\n\n  <span class="hljs-keyword">const</span> subtitle = screen.<span class="hljs-title function_">queryByText</span>(<span class="hljs-regexp">/subtitle/i</span>);\n\n  <span class="hljs-title function_">expect</span>(subtitle).<span class="hljs-property">not</span>.<span class="hljs-title function_">toBeInTheDocument</span>();\n});\n</code></pre>\n<p>It won&#39;t throw an error. Here we can use the <code>queryByText</code> without the <code>try-catch</code> and try to get the subtitle element.</p>\n<p>We use the <code>.not</code> together with the <code>toBeInTheDocument</code> matcher to expect that the subtitle is not in the DOM.</p>\n<p>The <code>queryBy</code> is very useful when we want to make sure that the page is not showing an element.</p>\n<h2 id="findby">findBy</h2>\n<p>The <code>findBy</code> always returns a promise. And the promise resolves when it finds the element we are searching for.</p>\n<p>It&#39;s very useful when the element is not the DOM. But the element appears after a specific event. Let&#39;s see an example:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Queries</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">const</span> [isParagraphVisible, setIsParagraphVisible] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setIsParagraphVisible(true)}&gt;\n        Show paragraph\n      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n      {isParagraphVisible ? <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> : null}\n    <span class="hljs-tag">&lt;/&gt;</span></span>\n  );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Queries</span>;\n</code></pre>\n<p>So here it is a simple component where we have a button and a logic to show or not a paragraph.</p>\n<p>At the top of the component, we use a <code>useState</code> hook to just manage the state to show or hide the paragraph. If the user click the button, it will show the paragraph. This is the &quot;feature&quot;.</p>\n<p>Now we can use the <code>findBy</code> to query a paragraph, after clicking in the button.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { render, screen, fireEvent } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@testing-library/react&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Queries</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../Queries&#x27;</span>;\n\n<span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;findBy&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;paragraph is in the document&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n    <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Queries</span> /&gt;</span></span>);\n\n    <span class="hljs-keyword">const</span> button = screen.<span class="hljs-title function_">getByRole</span>(<span class="hljs-string">&#x27;button&#x27;</span>, { <span class="hljs-attr">name</span>: <span class="hljs-regexp">/show paragraph/i</span> });\n    fireEvent.<span class="hljs-title function_">click</span>(button);\n\n    <span class="hljs-keyword">const</span> paragraph = <span class="hljs-keyword">await</span> screen.<span class="hljs-title function_">findByText</span>(<span class="hljs-regexp">/a paragraph/i</span>);\n    <span class="hljs-title function_">expect</span>(paragraph).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<ul>\n<li>First we render the <code>Queries</code> component.</li>\n<li>Get the button with the <code>getByRole</code> query.</li>\n<li>We use the <code>fireEvent</code> function from the testing library to mimic the click in the button.</li>\n<li>And now we finally try to get the paragraph with the <code>findByText</code>.</li>\n<li>After getting the paragraph, we make sure it is in the document.</li>\n<li>As the <code>findBy</code> query returns a promise, we can use the <code>.then</code> method or the <code>await</code> to get the real element. As we used the <code>await</code> in this example, we need to add an <code>async</code> statement in the <code>it</code> block.</li>\n</ul>\n<p>A common example to use <code>findBy</code> is when we do an asynchronous operation like fetching an API for some data, so we need to wait until we have the data rendered in the dom to get the elements we want to verify that are there.</p>\n<p>The <code>findBy</code> also throws an error when it doesn&#39;t find an element like the <code>getBy</code>.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;verify no other item&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n  <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Queries</span> /&gt;</span></span>);\n\n  <span class="hljs-keyword">const</span> button = screen.<span class="hljs-title function_">getByRole</span>(<span class="hljs-string">&#x27;button&#x27;</span>, { <span class="hljs-attr">name</span>: <span class="hljs-regexp">/show paragraph/i</span> });\n  fireEvent.<span class="hljs-title function_">click</span>(button);\n\n  <span class="hljs-keyword">try</span> {\n    <span class="hljs-keyword">await</span> screen.<span class="hljs-title function_">findByText</span>(<span class="hljs-regexp">/another paragraph/i</span>);\n  } <span class="hljs-keyword">catch</span> (e) {\n    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Did not find nonexistent element&#x27;</span>);\n  }\n});\n</code></pre>\n<p>In this test, I added a <code>try-catch</code> to see that the <code>findByText</code> really throws an error.</p>\n<h1 id="how-to-expect-content">How to expect content</h1>\n<p>There are many ways to verify the correct content in the page or component. But one I like the most is the matcher <code>.toBeInTheDocument</code>.</p>\n<p>The <code>.toBeInTheDocument</code> is matcher from the <a href="https://github.com/testing-library/jest-dom">jest-dom library</a> from the testing library org. There other custom jest matchers we can use too.</p>\n<p>We use this matcher in all the queries examples. But one thing that is cool to mention is that we don&#39;t need to import the matchers if we import the <code>jest-dom</code> in the <code>setupTests.js</code> like this:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-comment">// setupTests.js</span>\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@testing-library/jest-dom/extend-expect&#x27;</span>;\n</code></pre>\n<p>So now the <code>expect</code> function from <code>jest</code> is extended to use all the matchers from the <code>jest-dom</code>.</p>\n<h1 id="how-to-handle-forms">How to handle forms</h1>\n<p>We can also handle forms with the testing library. The best practice is to use the <a href="https://github.com/testing-library/user-event">@testing-library/user-event library</a>. This library simulates the real interactions between users and browsers.</p>\n<p>Before starting to test, let&#39;s the simple form we want to test.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Form</span> = (<span class="hljs-params"></span>) =&gt; (\n  <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Form<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span>Age<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;birthday&quot;</span>&gt;</span>Birthday<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n        Hobbies:\n        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;coding&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;coding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;coding&quot;</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;coding&quot;</span>&gt;</span>Coding<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;reading&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reading&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;reading&quot;</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;reading&quot;</span>&gt;</span>Reading<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;writing&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;writing&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;writing&quot;</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;writing&quot;</span>&gt;</span>Writing<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n        OS:\n        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;windows&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;windows&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;windows&quot;</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;windows&quot;</span>&gt;</span>Windows<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mac&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mac&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mac&quot;</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;mac&quot;</span>&gt;</span>Mac<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;linux&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;linux&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;linux&quot;</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;linux&quot;</span>&gt;</span>Linux<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Favorite city?<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;favcity&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;favcity&quot;</span> <span class="hljs-attr">data-testid</span>=<span class="hljs-string">&quot;favcity&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>Amsterdam<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Hong Kong<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>London<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>New York<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>Sao Paulo<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span>Tokyo<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Countries you want to visit<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">select</span>\n            <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;countries&quot;</span>\n            <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;countries&quot;</span>\n            <span class="hljs-attr">data-testid</span>=<span class="hljs-string">&quot;countries&quot;</span>\n            <span class="hljs-attr">multiple</span>\n          &gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Brazil&quot;</span>&gt;</span>Brazil<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Japan&quot;</span>&gt;</span>Japan<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;New Zealand&quot;</span>&gt;</span>Italy<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Germany&quot;</span>&gt;</span>Germany<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;India&quot;</span>&gt;</span>India<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Netherlands&quot;</span>&gt;</span>Netherlands<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n  <span class="hljs-tag">&lt;/&gt;</span></span>\n);\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Form</span>;\n</code></pre>\n<p>Wow! A lot of stuff here. But let&#39;s break down each part of the form (and see that it&#39;s not that scary). We want to test a lot of different kind of elements (input, select, multi-select, radio button, checkbox, etc):</p>\n<ul>\n<li>A text input for the name</li>\n<li>A number input for the age</li>\n<li>A date input for the birthdate</li>\n<li>A checkbox for hobbies</li>\n<li>A radio button for operating system</li>\n<li>A select for favorite city</li>\n<li>A multi-select for countries I want to visit</li>\n</ul>\n<p>That&#39;s it! We want to fill, select, and check all these elements with the testing library, and finally click the submit button.</p>\n<p>First thing we always do: render the component.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Form</span> /&gt;</span></span>);\n</code></pre>\n<p>And then we use the <code>screen</code> together with the <code>getBy</code> query to get the form fields.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> nameInput = screen.<span class="hljs-title function_">getByLabelText</span>(<span class="hljs-regexp">/name/i</span>);\n<span class="hljs-keyword">const</span> ageInput = screen.<span class="hljs-title function_">getByLabelText</span>(<span class="hljs-regexp">/age/i</span>);\n<span class="hljs-keyword">const</span> birthdayInput = screen.<span class="hljs-title function_">getByLabelText</span>(<span class="hljs-regexp">/birthday/i</span>);\n\n<span class="hljs-keyword">const</span> codingCheckbox = screen.<span class="hljs-title function_">getByLabelText</span>(<span class="hljs-regexp">/coding/i</span>);\n<span class="hljs-keyword">const</span> readingCheckbox = screen.<span class="hljs-title function_">getByLabelText</span>(<span class="hljs-regexp">/reading/i</span>);\n<span class="hljs-keyword">const</span> writingCheckbox = screen.<span class="hljs-title function_">getByLabelText</span>(<span class="hljs-regexp">/writing/i</span>);\n\n<span class="hljs-keyword">const</span> osRadio = screen.<span class="hljs-title function_">getByLabelText</span>(<span class="hljs-regexp">/mac/i</span>);\n\n<span class="hljs-keyword">const</span> favCitySelect = screen.<span class="hljs-title function_">getByTestId</span>(<span class="hljs-regexp">/favcity/i</span>);\n<span class="hljs-keyword">const</span> tokyoOption = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-regexp">/tokyo/i</span>);\n\n<span class="hljs-keyword">const</span> countriesMultiSelect = screen.<span class="hljs-title function_">getByTestId</span>(<span class="hljs-regexp">/countries/i</span>);\n<span class="hljs-keyword">const</span> japanOption = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-regexp">/japan/i</span>);\n<span class="hljs-keyword">const</span> germanyOption = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-regexp">/germany/i</span>);\n<span class="hljs-keyword">const</span> netherlandsOption = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-regexp">/netherlands/i</span>);\n\n<span class="hljs-keyword">const</span> button = screen.<span class="hljs-title function_">getByRole</span>(<span class="hljs-string">&#x27;button&#x27;</span>, { <span class="hljs-attr">name</span>: <span class="hljs-regexp">/submit/i</span> });\n</code></pre>\n<h3 id="text-number-and-date-inputs">Text, number, and date inputs</h3>\n<p>And finally we fill the input fields with the <code>type</code> function:</p>\n<pre><code class="hljs language-jsx">userEvent.<span class="hljs-title function_">type</span>(nameInput, <span class="hljs-string">&#x27;TK&#x27;</span>);\nuserEvent.<span class="hljs-title function_">type</span>(ageInput, <span class="hljs-string">&#x27;24&#x27;</span>);\nuserEvent.<span class="hljs-title function_">type</span>(birthdayInput, <span class="hljs-string">&#x27;01/01/1996&#x27;</span>);\n</code></pre>\n<h3 id="checkboxes">Checkboxes</h3>\n<p>Check the checkboxes with the <code>click</code> function:</p>\n<pre><code class="hljs language-jsx">userEvent.<span class="hljs-title function_">click</span>(codingCheckbox);\nuserEvent.<span class="hljs-title function_">click</span>(readingCheckbox);\nuserEvent.<span class="hljs-title function_">click</span>(writingCheckbox);\n</code></pre>\n<h3 id="radio-buttons">Radio buttons</h3>\n<p>Choose an option from the radio button with the <code>click</code> function:</p>\n<pre><code class="hljs language-jsx">userEvent.<span class="hljs-title function_">click</span>(osRadio);\n</code></pre>\n<h3 id="selects">Selects</h3>\n<p>Select the favorite city with the <code>selectOptions</code> function:</p>\n<pre><code class="hljs language-jsx">userEvent.<span class="hljs-title function_">selectOptions</span>(favCitySelect, [tokyoOption]);osRadio);\n</code></pre>\n<h3 id="multi-selects">Multi-selects</h3>\n<p>Select countries I want visit (again) with the <code>selectOptions</code></p>\n<pre><code class="hljs language-jsx">userEvent.<span class="hljs-title function_">selectOptions</span>(countriesMultiSelect, [\n  japanOption,\n  germanyOption,\n  netherlandsOption,\n]);\n</code></pre>\n<p>And after filling all the form, we are able to click the submit button:</p>\n<pre><code class="hljs language-jsx">userEvent.<span class="hljs-title function_">click</span>(button);\n</code></pre>\n<h3 id="how-does-all-come-together">How does all come together?</h3>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { render, screen } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@testing-library/react&#x27;</span>;\n<span class="hljs-keyword">import</span> userEvent <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@testing-library/user-event&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Form</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../Form&#x27;</span>;\n\n<span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Form&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;fills form&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Form</span> /&gt;</span></span>);\n\n    <span class="hljs-keyword">const</span> nameInput = screen.<span class="hljs-title function_">getByLabelText</span>(<span class="hljs-regexp">/name/i</span>);\n    <span class="hljs-keyword">const</span> ageInput = screen.<span class="hljs-title function_">getByLabelText</span>(<span class="hljs-regexp">/age/i</span>);\n    <span class="hljs-keyword">const</span> birthdayInput = screen.<span class="hljs-title function_">getByLabelText</span>(<span class="hljs-regexp">/birthday/i</span>);\n\n    <span class="hljs-keyword">const</span> codingCheckbox = screen.<span class="hljs-title function_">getByLabelText</span>(<span class="hljs-regexp">/coding/i</span>);\n    <span class="hljs-keyword">const</span> readingCheckbox = screen.<span class="hljs-title function_">getByLabelText</span>(<span class="hljs-regexp">/reading/i</span>);\n    <span class="hljs-keyword">const</span> writingCheckbox = screen.<span class="hljs-title function_">getByLabelText</span>(<span class="hljs-regexp">/writing/i</span>);\n\n    <span class="hljs-keyword">const</span> osRadio = screen.<span class="hljs-title function_">getByLabelText</span>(<span class="hljs-regexp">/mac/i</span>);\n\n    <span class="hljs-keyword">const</span> favCitySelect = screen.<span class="hljs-title function_">getByTestId</span>(<span class="hljs-regexp">/favcity/i</span>);\n    <span class="hljs-keyword">const</span> tokyoOption = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-regexp">/tokyo/i</span>);\n\n    <span class="hljs-keyword">const</span> countriesMultiSelect = screen.<span class="hljs-title function_">getByTestId</span>(<span class="hljs-regexp">/countries/i</span>);\n    <span class="hljs-keyword">const</span> japanOption = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-regexp">/japan/i</span>);\n    <span class="hljs-keyword">const</span> germanyOption = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-regexp">/germany/i</span>);\n    <span class="hljs-keyword">const</span> netherlandsOption = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-regexp">/netherlands/i</span>);\n\n    <span class="hljs-keyword">const</span> button = screen.<span class="hljs-title function_">getByRole</span>(<span class="hljs-string">&#x27;button&#x27;</span>, { <span class="hljs-attr">name</span>: <span class="hljs-regexp">/submit/i</span> });\n\n    userEvent.<span class="hljs-title function_">type</span>(nameInput, <span class="hljs-string">&#x27;TK&#x27;</span>);\n    userEvent.<span class="hljs-title function_">type</span>(ageInput, <span class="hljs-string">&#x27;24&#x27;</span>);\n    userEvent.<span class="hljs-title function_">type</span>(birthdayInput, <span class="hljs-string">&#x27;01/01/1996&#x27;</span>);\n\n    userEvent.<span class="hljs-title function_">click</span>(codingCheckbox);\n    userEvent.<span class="hljs-title function_">click</span>(readingCheckbox);\n    userEvent.<span class="hljs-title function_">click</span>(writingCheckbox);\n\n    userEvent.<span class="hljs-title function_">click</span>(osRadio);\n\n    userEvent.<span class="hljs-title function_">selectOptions</span>(favCitySelect, [tokyoOption]);\n    userEvent.<span class="hljs-title function_">selectOptions</span>(countriesMultiSelect, [\n      japanOption,\n      germanyOption,\n      netherlandsOption,\n    ]);\n\n    userEvent.<span class="hljs-title function_">click</span>(button);\n  });\n});\n</code></pre>\n<p>This is a simple form, but if we want to add some validation, we can think of how a user would use the form.</p>\n<p>Have each form field a validation of presence that show a text below each field? We could, for example, click the submit buttons and verify which fields have the validation text until it doesn&#39;t have any error anymore.</p>\n<h1 id="how-to-handle-fetching-and-loading">How to handle fetching and loading</h1>\n<p>Now we will see an example of fetching within a component and test the loading state and then the data rendered in the DOM.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { useFetchAPI } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./useFetchAPI&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Loading</span> = (<span class="hljs-params">{ pokemon }</span>) =&gt; {\n  <span class="hljs-keyword">const</span> { hasError, isLoading, isResolved, data } = <span class="hljs-title function_">useFetchAPI</span>(\n    <span class="hljs-string">`https://pokeapi.co/api/v2/pokemon/<span class="hljs-subst">${pokemon}</span>`</span>,\n  );\n\n  <span class="hljs-keyword">if</span> (hasError) {\n    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Error!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;\n  }\n\n  <span class="hljs-keyword">if</span> (isLoading) {\n    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;\n  }\n\n  <span class="hljs-keyword">if</span> (!isResolved) {\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;\n  }\n\n  <span class="hljs-keyword">const</span> { name, types } = data;\n  <span class="hljs-keyword">const</span> skills = types.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">type</span>) =&gt;</span> type.<span class="hljs-property">type</span>.<span class="hljs-property">name</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;, &#x27;</span>);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Name: {name}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Skills: {skills}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;/&gt;</span></span>\n  );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Loading</span>;\n</code></pre>\n<p>This is a very simple component that we&#39;ll use to test the loading and the error state and the data rendered.</p>\n<p>Here we have:</p>\n<ul>\n<li>A custom hook for fetching: it uses the <code>fetch</code> function to request data from any API.</li>\n<li>The custom hook receives a url that it will request and returns 4 values: <code>hasError</code>, <code>isLoading</code>, <code>isResolved</code>, and the <code>data</code> to render.</li>\n<li>Below we have three if statements to handle the error, the loading, and when the request didn&#39;t finish.</li>\n<li>And then we have the data we want to render: the name and skills of a pokemon.</li>\n</ul>\n<p>Let&#39;s first test the error state when the API responds with an error.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the error&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n  fetch.<span class="hljs-title function_">mockReject</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;API is down&#x27;</span>));\n\n  <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Loading</span> <span class="hljs-attr">pokemon</span>=<span class="hljs-string">&quot;charmander&quot;</span> /&gt;</span></span>);\n\n  <span class="hljs-keyword">const</span> error = <span class="hljs-keyword">await</span> screen.<span class="hljs-title function_">findByText</span>(<span class="hljs-string">&#x27;Error!&#x27;</span>);\n  <span class="hljs-title function_">expect</span>(error).<span class="hljs-title function_">toBeInTheDocument</span>();\n});\n</code></pre>\n<ul>\n<li>The first thing I did was to mock the <code>fetch</code> function to simulate that the API will respond with an error.</li>\n<li>Then we render the <code>Loading</code> component with a prop called <code>pokemon</code> and a value <code>charmander</code>.</li>\n<li>We try to find the text <code>Error!</code>.</li>\n<li>And verify if it is actually in the document.</li>\n</ul>\n<p>We use the <code>findByText</code> because the error state will appear only after the fetching finishes, so it&#39;s a asynchronous operation. This is why we need to have an <code>async-await</code> in the test.</p>\n<p>Now for the happy path: we fetch the pokemon, the loading state appears, and then the pokemon data renders in the DOM.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the loading and then the pokemon info&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n  <span class="hljs-keyword">const</span> data = { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;charmander&#x27;</span>, <span class="hljs-attr">types</span>: [{ <span class="hljs-attr">type</span>: { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;fire&#x27;</span> } }] };\n  fetch.<span class="hljs-title function_">once</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));\n\n  <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Loading</span> <span class="hljs-attr">pokemon</span>=<span class="hljs-string">&quot;charmander&quot;</span> /&gt;</span></span>);\n\n  <span class="hljs-keyword">const</span> loading = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;Loading...&#x27;</span>);\n  <span class="hljs-title function_">expect</span>(loading).<span class="hljs-title function_">toBeInTheDocument</span>();\n\n  <span class="hljs-keyword">const</span> charmander = <span class="hljs-keyword">await</span> screen.<span class="hljs-title function_">findByText</span>(<span class="hljs-string">&#x27;Name: charmander&#x27;</span>);\n  <span class="hljs-keyword">const</span> charmanderSkills = <span class="hljs-keyword">await</span> screen.<span class="hljs-title function_">findByText</span>(<span class="hljs-string">&#x27;Skills: fire&#x27;</span>);\n\n  <span class="hljs-title function_">expect</span>(charmander).<span class="hljs-title function_">toBeInTheDocument</span>();\n  <span class="hljs-title function_">expect</span>(charmanderSkills).<span class="hljs-title function_">toBeInTheDocument</span>();\n});\n</code></pre>\n<ul>\n<li>The first two lines we define the data and mock the fetch to return this value for us.</li>\n<li>We fetch the <code>Loading</code> component passing <code>charmander</code></li>\n<li>Then we first want to see the <code>Loading...</code> text in the document.</li>\n<li>And then verify if the pokemon name and skills are in the document.</li>\n</ul>\n<p>Now everything together:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { render, screen } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@testing-library/react&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Loading</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../Loading&#x27;</span>;\n\n<span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Loading&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the loading and then the pokemon info&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n    <span class="hljs-keyword">const</span> data = { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;charmander&#x27;</span>, <span class="hljs-attr">types</span>: [{ <span class="hljs-attr">type</span>: { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;fire&#x27;</span> } }] };\n    fetch.<span class="hljs-title function_">once</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));\n\n    <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Loading</span> <span class="hljs-attr">pokemon</span>=<span class="hljs-string">&quot;charmander&quot;</span> /&gt;</span></span>);\n\n    <span class="hljs-keyword">const</span> loading = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;Loading...&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(loading).<span class="hljs-title function_">toBeInTheDocument</span>();\n\n    <span class="hljs-keyword">const</span> charmander = <span class="hljs-keyword">await</span> screen.<span class="hljs-title function_">findByText</span>(<span class="hljs-string">&#x27;Name: charmander&#x27;</span>);\n    <span class="hljs-keyword">const</span> charmanderSkills = <span class="hljs-keyword">await</span> screen.<span class="hljs-title function_">findByText</span>(<span class="hljs-string">&#x27;Skills: fire&#x27;</span>);\n\n    <span class="hljs-title function_">expect</span>(charmander).<span class="hljs-title function_">toBeInTheDocument</span>();\n    <span class="hljs-title function_">expect</span>(charmanderSkills).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the error&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n    fetch.<span class="hljs-title function_">mockReject</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;API is down&#x27;</span>));\n\n    <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Loading</span> <span class="hljs-attr">pokemon</span>=<span class="hljs-string">&quot;charmander&quot;</span> /&gt;</span></span>);\n\n    <span class="hljs-keyword">const</span> error = <span class="hljs-keyword">await</span> screen.<span class="hljs-title function_">findByText</span>(<span class="hljs-string">&#x27;Error!&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(error).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<h1 id="final-words">Final words</h1>\n<p>So here we finish this first conversation about tests in frontend. We&#39;ve learned a lot of things:</p>\n<ul>\n<li>How to: query elements in the DOM</li>\n<li>How to: verify content in the document</li>\n<li>How to: test forms</li>\n<li>How to: handle fetching and loading</li>\n</ul>\n<p>I wanted to cover as much as possible, but I think this is a good start to understand how use this tool to test our applications and gain more confidence when shipping features or refactorings to production. I hope these recipes can help you understand more about testing in general and improve the quality of your software.</p>\n<p>Until the next time! Keep learning!</p>\n<h2 id="resources">Resources</h2>\n<h3 id="testing-react-apps">Testing React apps</h3>\n<ul>\n<li><a href="https://www.educative.io/path/react-app-testing?aff=x8bV">React App Testing</a></li>\n<li><a href="https://www.educative.io/courses/test-driven-react-development?aff=x8bV">Test-driven Development with React</a></li>\n</ul>\n<h3 id="react">React</h3>\n<ul>\n<li><a href="https://www.educative.io/path/become-a-react-developer?aff=x8bV">Become a React Developer</a></li>\n<li><a href="https://www.educative.io/path/react-development-for-professionals?aff=x8bV">React Development for Professionals</a></li>\n<li><a href="https://www.educative.io/path/react-front-end-developer?aff=x8bV">React for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/react-beginner-to-advanced?aff=x8bV">React Deep Dive: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/the-road-to-learn-react?aff=x8bV">The Road to learn React</a></li>\n<li><a href="https://www.educative.io/courses/reintroducing-react-v16-beyond?aff=x8bV">Reintroducing React: V16 and Beyond</a></li>\n<li><a href="https://www.educative.io/courses/advanced-react-patterns-with-hooks?aff=x8bV">Advanced React Patterns With Hooks</a></li>\n<li><a href="https://reactforbeginners.com/friend/LEANDRO">React for Beginners Course</a></li>\n<li><a href="https://advancedreact.com/friend/LEANDRO">Advanced React Course</a></li>\n</ul>\n',
  },
  {
    title: 'Building an abstraction for React intl messages',
    content:
      '<p>I came across a feature I wanted to build and part of it included rendering an internationalized text based on a data type from the API. This API can return three types: <code>common</code>, <code>password</code>, or <code>biometry</code>. And we use it to build our <code>EntryInfo</code> component.</p>\n<p>For the <code>common</code> type, the API response looks like this:</p>\n<pre><code class="hljs language-javascript">{\n  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;common&#x27;</span>,\n  <span class="hljs-attr">ownerName</span>: <span class="hljs-string">&#x27;TK&#x27;</span>,\n  <span class="hljs-attr">password</span>: <span class="hljs-literal">null</span>\n}\n</code></pre>\n<p>The type is <code>common</code>, the <code>password</code> is <code>null</code>, and the <code>ownerName</code> is present as a string.</p>\n<p>For the <code>password</code> type:</p>\n<pre><code class="hljs language-javascript">{\n  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;password&#x27;</span>,\n  <span class="hljs-attr">ownerName</span>: <span class="hljs-literal">null</span>,\n  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;lololol&#x27;</span>\n}\n</code></pre>\n<p>The type is <code>password</code>, the <code>ownerName</code> is <code>null</code>, but <code>password</code> is present as a string.</p>\n<p>And for the <code>biometry</code> type:</p>\n<pre><code class="hljs language-javascript">{\n  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;biometry&#x27;</span>,\n  <span class="hljs-attr">ownerName</span>: <span class="hljs-literal">null</span>,\n  <span class="hljs-attr">password</span>: <span class="hljs-literal">null</span>\n}\n</code></pre>\n<p>The type is <code>biometry</code>, without a <code>ownerName</code> and the <code>password</code>.</p>\n<p>These are the three possible payloads we receive from the API. And I needed to render an internationalized text based on this data.</p>\n<p>The logic to build the message text based on the type and the other values is:</p>\n<ul>\n<li>when <code>type</code> is <code>&#39;Common&#39;</code>, it renders <code>&#39;Owner {ownerName} will be there&#39;</code></li>\n<li>when <code>type</code> is <code>&#39;Password&#39;</code>, it renders <code>&#39;Password: {password}&#39;</code></li>\n<li>when <code>type</code> is <code>&#39;Biometry&#39;</code>, it renders <code>&#39;Type: biometry&#39;</code></li>\n<li>when <code>type</code> is <code>null</code>, it renders <code>&#39;Call the owner&#39;</code></li>\n</ul>\n<p>So the first thing I did was to build the message definitions:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { defineMessages } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-intl&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> messages = <span class="hljs-title function_">defineMessages</span>({\n  <span class="hljs-attr">common</span>: {\n    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;app.containers.entryInfo.owner&#x27;</span>,\n    <span class="hljs-attr">defaultMessage</span>: <span class="hljs-string">&#x27;Owner {ownerName} will be there&#x27;</span>,\n  },\n  <span class="hljs-attr">password</span>: {\n    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;app.containers.entryInfo.password&#x27;</span>,\n    <span class="hljs-attr">defaultMessage</span>: <span class="hljs-string">&#x27;Password: {password}&#x27;</span>,\n  },\n  <span class="hljs-attr">biometry</span>: {\n    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;app.containers.entryInfo.biometry&#x27;</span>,\n    <span class="hljs-attr">defaultMessage</span>: <span class="hljs-string">&#x27;Type: biometry&#x27;</span>,\n  },\n  <span class="hljs-attr">defaultMessage</span>: {\n    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;app.containers.entryInfo.defaultMessage&#x27;</span>,\n    <span class="hljs-attr">defaultMessage</span>: <span class="hljs-string">&#x27;Call the owner&#x27;</span>,\n  },\n}\n</code></pre>\n<p>The <code>EntryInfo</code> component would be like:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">EntryInfo</span> = (<span class="hljs-params">{ type, password, ownerName, intl }</span>) =&gt; {\n  <span class="hljs-keyword">let</span> entryInfo;\n\n  <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;common&#x27;</span>) {\n    entryInfo = intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">common</span>, { ownerName });\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;password&#x27;</span>) {\n    entryInfo = intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">password</span>, { password });\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;biometry&#x27;</span>) {\n    entryInfo = intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">biometry</span>);\n  } <span class="hljs-keyword">else</span> {\n    entryInfo = intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">defaultMessage</span>);\n  }\n\n  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{entryInfo}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">injectIntl</span>(<span class="hljs-title class_">EntryInfo</span>);\n</code></pre>\n<p>To follow the defined logic, I just added an <code>if-elseif-else</code> to render the appropriate message using the <code>intl.format</code> function. It&#39;s straightforward, the <code>intl.format</code> function receives the appropriate message and returns the entry info text and pass it to the component to render.</p>\n<p>But I could separate it in a helper function <code>getEntryInfo</code> to separate the logic from the UI component. I could also export it to unit test it without too much complication.</p>\n<p>I also pass the <code>intl</code> object to this new function to return the correct string.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getEntryInfo</span> = (<span class="hljs-params">{ type, password, ownerName, intl }</span>) =&gt; {\n  <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;common&#x27;</span>) {\n    <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">common</span>, { ownerName });\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;password&#x27;</span>) {\n    <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">password</span>, { password });\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;biometry&#x27;</span>) {\n    <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">biometry</span>);\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">defaultMessage</span>);\n  }\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">EntryInfo</span> = (<span class="hljs-params">{ type, password, ownerName, intl }</span>) =&gt; {\n  <span class="hljs-keyword">const</span> entryInfo = <span class="hljs-title function_">getEntryInfo</span>({ type, password, ownerName, intl });\n\n  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{entryInfo}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">injectIntl</span>(<span class="hljs-title class_">EntryInfo</span>);\n</code></pre>\n<p>This logic looks more like a switch case comparing just the <code>type</code> value. So just a minor refactor in the <code>getEntryInfo</code>:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getEntryInfo</span> = (<span class="hljs-params">{ type, password, ownerName, intl }</span>) =&gt; {\n  <span class="hljs-keyword">switch</span> (type) {\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Common&#x27;</span>:\n      <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">common</span>, { ownerName });\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Password&#x27;</span>:\n      <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">password</span>, { password });\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Biometry&#x27;</span>:\n      <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">biometry</span>);\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">defaultMessage</span>);\n  }\n};\n</code></pre>\n<p>The type is hardcoded, so we could also refactor these constants using an enum:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ENTRY_INFO_TYPES</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>({\n  <span class="hljs-attr">COMMON</span>: <span class="hljs-string">&#x27;Common&#x27;</span>,\n  <span class="hljs-attr">PASSWORD</span>: <span class="hljs-string">&#x27;Password&#x27;</span>,\n  <span class="hljs-attr">BIOMETRY</span>: <span class="hljs-string">&#x27;Biometry&#x27;</span>,\n});\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">getEntryInfo</span> = (<span class="hljs-params">{ type, password, ownerName, intl }</span>) =&gt; {\n  <span class="hljs-keyword">switch</span> (type) {\n    <span class="hljs-keyword">case</span> <span class="hljs-variable constant_">ENTRY_INFO_TYPES</span>.<span class="hljs-property">COMMON</span>:\n      <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">common</span>, { ownerName });\n    <span class="hljs-keyword">case</span> <span class="hljs-variable constant_">ENTRY_INFO_TYPES</span>.<span class="hljs-property">PASSWORD</span>:\n      <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">password</span>, { password });\n    <span class="hljs-keyword">case</span> <span class="hljs-variable constant_">ENTRY_INFO_TYPES</span>.<span class="hljs-property">BIOMETRY</span>:\n      <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">biometry</span>);\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">format</span>(messages.<span class="hljs-property">defaultMessage</span>);\n  }\n};\n</code></pre>\n<p>Now we are good to go.</p>\n<p>Thinking about <code>cohesion</code>, I thought the <code>getEntryInfo</code> function did know too much about how the component renders the message text (by using <code>intl</code>).</p>\n<p>One idea is to think about the single responsibility of each function.</p>\n<p>So, for the <code>getEntryInfo</code> function, we can remove the <code>intl</code> parameter as a dependency and build the message object, instead of returning a string.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getEntryInfoMessage</span> = (<span class="hljs-params">{ type, password, ownerName }</span>) =&gt; {\n  <span class="hljs-keyword">switch</span> (type) {\n    <span class="hljs-keyword">case</span> <span class="hljs-variable constant_">ENTRY_INFO_TYPES</span>.<span class="hljs-property">COMMON</span>:\n      <span class="hljs-keyword">return</span> { <span class="hljs-attr">message</span>: messages.<span class="hljs-property">common</span>, <span class="hljs-attr">values</span>: { ownerName } };\n    <span class="hljs-keyword">case</span> <span class="hljs-variable constant_">ENTRY_INFO_TYPES</span>.<span class="hljs-property">PASSWORD</span>:\n      <span class="hljs-keyword">return</span> { <span class="hljs-attr">message</span>: messages.<span class="hljs-property">password</span>, <span class="hljs-attr">values</span>: { password } };\n    <span class="hljs-keyword">case</span> <span class="hljs-variable constant_">ENTRY_INFO_TYPES</span>.<span class="hljs-property">BIOMETRY</span>:\n      <span class="hljs-keyword">return</span> { <span class="hljs-attr">message</span>: messages.<span class="hljs-property">biometry</span>, <span class="hljs-attr">values</span>: {} };\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> { <span class="hljs-attr">message</span>: messages.<span class="hljs-property">defaultMessage</span>, <span class="hljs-attr">values</span>: {} };\n  }\n};\n</code></pre>\n<p>And use like this in the component:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">EntryInfo</span> = (<span class="hljs-params">{ type, password, ownerName, intl }</span>) =&gt; {\n  <span class="hljs-keyword">const</span> entryInfoMessage = <span class="hljs-title function_">getEntryInfoMessage</span>({ type, password, ownerName });\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{intl.format(entryInfoMessage.message, entryInfoMessage.values)}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<p>As a component refactor, we can destructure the message object:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">EntryInfo</span> = (<span class="hljs-params">{ type, password, ownerName, intl }</span>) =&gt; {\n  <span class="hljs-keyword">const</span> { message, values } = <span class="hljs-title function_">getEntryInfoMessage</span>({\n    type,\n    password,\n    ownerName,\n  });\n\n  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{intl.format(message, values)}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;\n};\n</code></pre>\n<p>It is more readable and less verbose.</p>\n<p>For the message object, we can build a simple function to handle the message object creation:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">buildMessageObject</span> = (<span class="hljs-params">message, values = {}</span>) =&gt; ({\n  message,\n  values,\n});\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">getEntryInfoMessage</span> = (<span class="hljs-params">{ type, password, ownerName }</span>) =&gt; {\n  <span class="hljs-keyword">switch</span> (type) {\n    <span class="hljs-keyword">case</span> <span class="hljs-variable constant_">ENTRY_INFO_TYPES</span>.<span class="hljs-property">COMMON</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">buildMessageObject</span>(messages.<span class="hljs-property">common</span>, { ownerName });\n    <span class="hljs-keyword">case</span> <span class="hljs-variable constant_">ENTRY_INFO_TYPES</span>.<span class="hljs-property">PASSWORD</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">buildMessageObject</span>(messages.<span class="hljs-property">password</span>, { password });\n    <span class="hljs-keyword">case</span> <span class="hljs-variable constant_">ENTRY_INFO_TYPES</span>.<span class="hljs-property">BIOMETRY</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">buildMessageObject</span>(messages.<span class="hljs-property">biometry</span>);\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">buildMessageObject</span>(messages.<span class="hljs-property">defaultMessage</span>);\n  }\n};\n</code></pre>\n<p>Take a look at the <code>values = {}</code> argument. We add this empty object as the default value to not need to pass anything in the <code>biometry</code> and <code>default</code> cases.</p>\n<p>Without the <code>intl</code> dependency, it&#39;s easier to use and test the function. It relies only upon the data, not on the dependencies anymore.</p>\n<hr>\n<h2 id="the-final-component">The final component</h2>\n<p>The complete component with all the separated logic is more cohesive. Each part has its own responsibility and it helps to reduce the coupling.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> messages = <span class="hljs-title function_">defineMessages</span>({\n  <span class="hljs-attr">common</span>: {\n    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;app.containers.entryInfo.owner&#x27;</span>,\n    <span class="hljs-attr">defaultMessage</span>: <span class="hljs-string">&#x27;Owner {ownerName} will be there&#x27;</span>,\n  },\n  <span class="hljs-attr">password</span>: {\n    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;app.containers.entryInfo.password&#x27;</span>,\n    <span class="hljs-attr">defaultMessage</span>: <span class="hljs-string">&#x27;Password: {password}&#x27;</span>,\n  },\n  <span class="hljs-attr">biometry</span>: {\n    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;app.containers.entryInfo.biometry&#x27;</span>,\n    <span class="hljs-attr">defaultMessage</span>: <span class="hljs-string">&#x27;Type: biometry&#x27;</span>,\n  },\n  <span class="hljs-attr">defaultMessage</span>: {\n    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;app.containers.entryInfo.default&#x27;</span>,\n    <span class="hljs-attr">defaultMessage</span>: <span class="hljs-string">&#x27;Call the owner&#x27;</span>,\n  },\n}\n\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ENTRY_INFO_TYPES</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>({\n  <span class="hljs-attr">COMMON</span>: <span class="hljs-string">&#x27;Common&#x27;</span>,\n  <span class="hljs-attr">PASSWORD</span>: <span class="hljs-string">&#x27;Password&#x27;</span>,\n  <span class="hljs-attr">BIOMETRY</span>: <span class="hljs-string">&#x27;Biometry&#x27;</span>,\n});\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">buildMessageObject</span> = (<span class="hljs-params">message, values = {}</span>) =&gt; ({\n  message,\n  values,\n});\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">getEntryInfoMessage</span> = (<span class="hljs-params">{ type, password, ownerName }</span>) =&gt; {\n  <span class="hljs-keyword">switch</span> (type) {\n    <span class="hljs-keyword">case</span> <span class="hljs-variable constant_">ENTRY_INFO_TYPES</span>.<span class="hljs-property">COMMON</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">buildMessageObject</span>(messages.<span class="hljs-property">common</span>, { ownerName });\n    <span class="hljs-keyword">case</span> <span class="hljs-variable constant_">ENTRY_INFO_TYPES</span>.<span class="hljs-property">PASSWORD</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">buildMessageObject</span>(messages.<span class="hljs-property">password</span>, { password });\n    <span class="hljs-keyword">case</span> <span class="hljs-variable constant_">ENTRY_INFO_TYPES</span>.<span class="hljs-property">BIOMETRY</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">buildMessageObject</span>(messages.<span class="hljs-property">biometry</span>);\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">buildMessageObject</span>(messages.<span class="hljs-property">defaultMessage</span>);\n  }\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">EntryInfo</span> = (<span class="hljs-params">{ type, password, ownerName, intl }</span>) =&gt; {\n  <span class="hljs-keyword">const</span> { message, values } = <span class="hljs-title function_">getEntryInfoMessage</span>({ type, password, ownerName });\n\n  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{intl.format(message, values)}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">injectIntl</span>(<span class="hljs-title class_">EntryInfo</span>);\n</code></pre>\n<h2 id="resources">Resources</h2>\n<h3 id="react">React</h3>\n<ul>\n<li><a href="https://www.educative.io/path/become-a-react-developer?aff=x8bV">Become a React Developer</a></li>\n<li><a href="https://www.educative.io/path/react-development-for-professionals?aff=x8bV">React Development for Professionals</a></li>\n<li><a href="https://www.educative.io/path/react-app-testing?aff=x8bV">React App Testing</a></li>\n<li><a href="https://www.educative.io/path/react-front-end-developer?aff=x8bV">React for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/react-beginner-to-advanced?aff=x8bV">React Deep Dive: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/test-driven-react-development?aff=x8bV">Test-driven Development with React</a></li>\n<li><a href="https://www.educative.io/courses/the-road-to-learn-react?aff=x8bV">The Road to learn React</a></li>\n<li><a href="https://www.educative.io/courses/reintroducing-react-v16-beyond?aff=x8bV">Reintroducing React: V16 and Beyond</a></li>\n<li><a href="https://www.educative.io/courses/advanced-react-patterns-with-hooks?aff=x8bV">Advanced React Patterns With Hooks</a></li>\n<li><a href="https://reactforbeginners.com/friend/LEANDRO">React for Beginners Course</a></li>\n<li><a href="https://advancedreact.com/friend/LEANDRO">Advanced React Course</a></li>\n</ul>\n<h3 id="javascript">JavaScript</h3>\n<ul>\n<li><a href="https://www.educative.io/courses/javascript-in-detail-from-beginner-to-advanced?aff=x8bV">JavaScript in Detail: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/simplifying-javascript-handy-guide?aff=x8bV">Simplifying JavaScript: A Handy Guide for Software Engineers</a></li>\n<li><a href="https://www.educative.io/courses/complete-guide-to-modern-javascript?aff=x8bV">The Complete Guide to Modern JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/learn-object-oriented-programming-in-javascript?aff=x8bV">Learn Object-Oriented Programming in JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/javascript-in-practice-es6-and-beyond?aff=x8bV">JavaScript In Practice: ES6 And Beyond</a></li>\n<li><a href="https://www.educative.io/courses/data-structures-coding-interviews-javascript?aff=x8bV">Data Structures for Coding Interviews in JavaScript</a></li>\n<li><a href="https://mbsy.co/lFtbC">JavaScript Course by OneMonth</a></li>\n<li><a href="https://es6.io/friend/LEANDRO">ES6 Course</a></li>\n<li><a href="https://beginnerjavascript.com/friend/LEANDRO">Beginner JavaScript Course</a></li>\n<li><a href="https://www.educative.io/courses/javascript-fundamentals-before-learning-react?aff=x8bV">JavaScript Fundamentals Before Learning React</a></li>\n<li><a href="https://www.educative.io/courses/rediscovering-javascript?aff=x8bV">Rediscovering JavaScript: ES6, ES7 &amp; ES8</a></li>\n</ul>\n',
  },
  {
    title: 'Building a simple Individual Development Plan (IDP) with Notion',
    content:
      '<p>Some time ago, I wrote about <a href="/designing-my-lifes-system">how I design my life&#39;s system</a> using mainly Notion. Over the months, I&#39;m getting used to have an open Notion app to use, document, and do absolutely everything there.</p>\n<p>The last month I got to know more about the Individual Development Plan (IDP) by a talk from the company I work now. And I thought it was pretty interesting and I wanted to try, but in my own way.</p>\n<p>In a certain way, I was already doing this IDP thing in Notion. I have the <code>Learning Paths</code>, the <code>Goals</code>, the <code>Habit Tracker</code>, the <code>Journaling</code>, and the <code>Personal Knowledge Base (PKB)</code> pages today that I use daily to document and manage my growth as a person.</p>\n<p>But I also wanted to do the same idea in my work and give visibility to my leader and peers about my career next steps, what I&#39;m working on, collect feedback, and show what I accomplished.</p>\n<p>I like this idea of learning in public and <a href="">I practice it with this blog for 6 years now</a>. Doing the same thing at work and being transparent with the people I work with is something I value and I wanted to give it a try.</p>\n<h2 id="how-did-i-start">How did I start?</h2>\n<p>As everything I do, I like to have a first draft page. Somewhere I can just dump the ideas from my brain.</p>\n<p>So I created an empty page called <code>Career: Next Steps</code>. I started just writing down all the ideas I had about the next steps of my career. But this task is actually pretty hard in practice. So, instead of force myself to write down anything, I added some questions to help and guide me gain visibility of the possibilities I have:</p>\n<ul>\n<li>What do I want to learn?</li>\n<li>What do I need to improve?</li>\n<li>Good skills and behavior I want to maintain?</li>\n<li>Interesting challenges and opportunities I have (or I can create) to embrace in the next 3 months?</li>\n<li>Feedback from peers and leader? (if I don&#39;t have, proactive ask for)</li>\n</ul>\n<p>With these questions, it got easier to generate some draft ideas.</p>\n<h2 id="draft-ideas-and-organizing--grouping">Draft ideas and Organizing &amp; Grouping</h2>\n<p>Now with the draft ideas, it was a mess. Just a bunch of ideas there without no idea of what I could work on.</p>\n<p>Organizing this mess was obvious and it should be the next step. I&#39;ll share some examples of how I simply transformed draft ideas into an organizing one.</p>\n<p>My list of ideas was first like this:</p>\n<ul>\n<li>Learn about browsers</li>\n<li>Help with the sprint planning</li>\n<li>Mentor peers</li>\n<li>Give tech talks</li>\n<li>Learn about performance</li>\n<li>Learn about error messages</li>\n<li>Write more articles</li>\n</ul>\n<p>Very generic. I could specify more to create some actions about each one. So I transformed it into this:</p>\n<ul>\n<li>Learn about how browsers work</li>\n<li>Learn about browser threads and network</li>\n<li>Help planning the following sprints in our team</li>\n<li>(In)formally mentor my peers with in the technology I&#39;m specialized</li>\n<li>Give a tech talk about the Testing Library tool and how to properly test frontend</li>\n<li>Learn about React performance</li>\n<li>Learn about Sentry error messages</li>\n<li>Write an article about React Testing Library</li>\n</ul>\n<p>A bit better.</p>\n<p>I started to see that I could group them to help me organize these ideas. So I just categorized them:</p>\n<h3 id="specialization--learning">Specialization / Learning</h3>\n<ul>\n<li>Learn about how browsers work</li>\n<li>Learn about browser threads and network</li>\n<li>Learn about React performance</li>\n<li>Learn about Sentry error messages</li>\n</ul>\n<h3 id="leadership-skills">Leadership Skills</h3>\n<ul>\n<li>Help planning the following sprints in our team</li>\n<li>(In)formally mentor my peers with in the technology I&#39;m specialized</li>\n</ul>\n<h3 id="knowledge-sharing">Knowledge Sharing</h3>\n<ul>\n<li>Give a tech talk about the Testing Library tool and how to properly test frontend</li>\n<li>Write an article about React Testing Library</li>\n</ul>\n<p>It was a simple and amazing way to have a clear path to work on. Now I have areas I can work on and generate more ideas.</p>\n<h2 id="actionables--execution">Actionables &amp; Execution</h2>\n<p>With the new page with all the ideas organized, I could break everything down into actions to execute each one of them.</p>\n<p>I chose a Kanban-style page to have and give visibility of the things I want to execute, things I&#39;m working on, and things I&#39;ve already done. It looks like this:</p>\n<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b035324e-b84b-40b1-828f-808878fb4103/Screenshot_from_2020-10-18_14-12-16.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b035324e-b84b-40b1-828f-808878fb4103/Screenshot_from_2020-10-18_14-12-16.png"></p>\n<p>The <code>Backlog</code> is just to put somethings there to improve later. Sometimes I have some ideas, but I don&#39;t want to forget about them, so I just add to the backlog and add a <code>[Improve]</code> tag in the title.</p>\n<p>The <code>ToDo</code> is basically everything I&#39;ve already thought about and it&#39;s ready to start working on them.</p>\n<p>And the <code>In progress</code> and <code>Completed</code> are self explanatory.</p>\n<p>One important detail is the <code>labels</code> for each Kanban card. I have <code>Learning</code>, <code>Knowledge Sharing</code>, <code>Writing</code>, <code>Leadership</code>, and so on. These way it&#39;s categorized by the topics I organized in the first page of ideas.</p>\n<p>With these labels, I know I can balance better my actions. For example: last 3 weeks I worked really hard in the <code>Knowledge Sharing</code> category, maybe I should get more time for <code>Leadership</code> and <code>Learning</code>.</p>\n<p>With this board, I can give visibility to my peers and my tech lead in 1x1s. Show the things I worked for the week, what I&#39;m working on, what are the problems I&#39;m facing, generate more ideas and add to the board, and ask for feedback based on my progress.</p>\n<h2 id="accomplishments-and-feedback">Accomplishments and Feedback</h2>\n<p>The other two pages I have in this how docs are the <code>Brag Document</code> and the <code>Feedback</code>.</p>\n<p>The <code>Feedback</code> is simple: whatever feedback I receive from people, I like to document to remember later and maybe act on them with a simple framework:</p>\n<ul>\n<li>Things I should improve or just not doing great: understand the problem and try some solutions (e.g. add a new card to the Kanban backlog to work in the next week)</li>\n<li>Things I&#39;m doing well: celebrate &amp; cultivate this behavior</li>\n</ul>\n<p>The <code>Brag Document</code> is a idea from <a href="https://jvns.ca/blog/brag-documents/">Julia Evans</a>. It&#39;s a tactic to get your work recognized and memorable.</p>\n<p>I like to use it to remember myself things I accomplished, things I learned along the way, and behaviors I did that I want to cultivate. It&#39;s a pretty simple idea and easy to execute in a day-to-day at work (or life!).</p>\n<p>Sometimes impostor syndrome gets me, but if I look at a ton of great work I did in the past, I feel better, I feel more confident, and it&#39;s always better to have positive energy instead of negative ones.</p>\n<hr>\n<p>Today the whole page looks like this:</p>\n<img src="/building-an-individual-development-plan-with-notion/example.png">\n\n<h2 id="final-words">Final words</h2>\n<p>First thanks for reading my blog post. I feel amazing that I&#39;m able to share my ideas, learnings, and maybe help other people.</p>\n<p>Feel free to use the ideas from this post, <a href="https://twitter.com/wordsofteekay">share with me</a> your own ideas too, and keep learning!</p>\n<p>Until next time.</p>\n',
  },
  {
    title: 'Closures, Currying, and Cool Abstractions',
    content:
      '<p>In this article, we will talk about closures, curried functions, and play around with these concepts to build cool abstractions. I want to show the idea behind each concept, but also make it very practical with examples and refactor code to make it more fun.</p>\n<h2 id="closures">Closures</h2>\n<p>So closure is a common topic in JavaScript and we will start with it. As MDN web docs defines:</p>\n<blockquote>\n<p>&quot;A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).&quot;</p>\n</blockquote>\n<p>Basically, every time a function is created, a closure is also created and it gives access to all state (variables, constants, functions, etc). The surrounding state is known as the <code>lexical environment</code>.</p>\n<p>Let&#39;s show a simple example:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeFunction</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;TK&#x27;</span>;\n  <span class="hljs-keyword">function</span> <span class="hljs-title function_">displayName</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);\n  }\n  <span class="hljs-keyword">return</span> displayName;\n}\n</code></pre>\n<p>What do we have here?</p>\n<ul>\n<li>Our main function called <code>makeFunction</code></li>\n<li>A constant named <code>name</code> assigned with a string <code>&#39;TK&#39;</code></li>\n<li>The definition of the <code>displayName</code> function (that just log the <code>name</code> constant)</li>\n<li>And finally the <code>makeFunction</code> returns the <code>displayName</code> function</li>\n</ul>\n<p>This is just a definition of a function. When we call the <code>makeFunction</code>, it will create everything within it: constant and function in this case.</p>\n<p>As we know, when the <code>displayName</code> function is created, the closure is also created and it makes the function aware of the environment, in this case, the <code>name</code> constant. This is why we can <code>console.log</code> the <code>name</code> without breaking anything. The function knows about the lexical environment.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> myFunction = <span class="hljs-title function_">makeFunction</span>();\n<span class="hljs-title function_">myFunction</span>(); <span class="hljs-comment">// TK</span>\n</code></pre>\n<p>Great! It works as expected! The return of the <code>makeFunction</code> is a function that we store it in the <code>myFunction</code> constant, call it later, and displays <code>TK</code>.</p>\n<p>We can also make it work as an arrow function:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">makeFunction</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;TK&#x27;</span>;\n  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);\n};\n</code></pre>\n<p>But what if we want to pass the name and display it? A parameter!</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">makeFunction</span> = (<span class="hljs-params">name = <span class="hljs-string">&#x27;TK&#x27;</span></span>) =&gt; {\n  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);\n};\n\n<span class="hljs-comment">// Or a one-liner</span>\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">makeFunction</span> =\n  (<span class="hljs-params">name = <span class="hljs-string">&#x27;TK&#x27;</span></span>) =&gt;\n  <span class="hljs-function">() =&gt;</span>\n    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);\n</code></pre>\n<p>Now we can play with the name:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> myFunction = <span class="hljs-title function_">makeFunction</span>();\n<span class="hljs-title function_">myFunction</span>(); <span class="hljs-comment">// TK</span>\n\n<span class="hljs-keyword">const</span> myFunction = <span class="hljs-title function_">makeFunction</span>(<span class="hljs-string">&#x27;Dan&#x27;</span>);\n<span class="hljs-title function_">myFunction</span>(); <span class="hljs-comment">// Dan</span>\n</code></pre>\n<p>Our <code>myFunction</code> is aware of the arguments passed: default or dynamic value.\nThe closure does make the created function not only aware of constants/variables, but also other functions within the function.</p>\n<p>So this also works:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">makeFunction</span> = (<span class="hljs-params">name = <span class="hljs-string">&#x27;TK&#x27;</span></span>) =&gt; {\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">display</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);\n  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">display</span>();\n};\n\n<span class="hljs-keyword">const</span> myFunction = <span class="hljs-title function_">makeFunction</span>();\n<span class="hljs-title function_">myFunction</span>(); <span class="hljs-comment">// TK</span>\n</code></pre>\n<p>The returned function knows about the <code>display</code> function and it is able to call it.</p>\n<p>One powerful technique is to use closures to build &quot;private&quot; functions and variables.</p>\n<p>Months ago I was learning data structures (again!) and wanted to implement each one. But I was always using the object oriented approach. As a functional programming enthusiast, I wanted to build all the data structures following FP principles (pure functions, immutability, referential transparency, etc).</p>\n<p>The first data structure I was learning was the Stack. It is pretty simple. The main API is:</p>\n<ul>\n<li><code>push</code>: add an item to the first place of the stack</li>\n<li><code>pop</code>: remove the first item from the stack</li>\n<li><code>peek</code>: get the first item from the stack</li>\n<li><code>isEmpty</code>: verify if the stack is empty</li>\n<li><code>size</code>: get the number of items the stack has</li>\n</ul>\n<p>We could clearly create a simple function to each &quot;method&quot; and pass the stack data to it. It use/transform the data and return it.</p>\n<p>But we can also create a private stack data and exposes only the API methods. Let&#39;s do this!</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">buildStack</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">let</span> items = [];\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">push</span> = (<span class="hljs-params">item</span>) =&gt; (items = [item, ...items]);\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">pop</span> = (<span class="hljs-params"></span>) =&gt; (items = items.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>));\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">peek</span> = (<span class="hljs-params"></span>) =&gt; items[<span class="hljs-number">0</span>];\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">isEmpty</span> = (<span class="hljs-params"></span>) =&gt; !items.<span class="hljs-property">length</span>;\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">size</span> = (<span class="hljs-params"></span>) =&gt; items.<span class="hljs-property">length</span>;\n\n  <span class="hljs-keyword">return</span> {\n    push,\n    pop,\n    peek,\n    isEmpty,\n    size,\n  };\n};\n</code></pre>\n<p>As we created the <code>items</code> stack data inside our <code>buildStack</code> function, it is &quot;private&quot;. It can be accessed only within the function. In this case, only the <code>push</code>, <code>pop</code>, etc could touch the data. And this is what we&#39;re looking for.</p>\n<p>And how do we use it? Like this:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> stack = <span class="hljs-title function_">buildStack</span>();\n\nstack.<span class="hljs-title function_">isEmpty</span>(); <span class="hljs-comment">// true</span>\n\nstack.<span class="hljs-title function_">push</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// [1]</span>\nstack.<span class="hljs-title function_">push</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// [2, 1]</span>\nstack.<span class="hljs-title function_">push</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// [3, 2, 1]</span>\nstack.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>); <span class="hljs-comment">// [4, 3, 2, 1]</span>\nstack.<span class="hljs-title function_">push</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// [5, 4, 3, 2, 1]</span>\n\nstack.<span class="hljs-title function_">peek</span>(); <span class="hljs-comment">// 5</span>\nstack.<span class="hljs-title function_">size</span>(); <span class="hljs-comment">// 5</span>\nstack.<span class="hljs-title function_">isEmpty</span>(); <span class="hljs-comment">// false</span>\n\nstack.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// [4, 3, 2, 1]</span>\nstack.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// [3, 2, 1]</span>\nstack.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// [2, 1]</span>\nstack.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// [1]</span>\n\nstack.<span class="hljs-title function_">isEmpty</span>(); <span class="hljs-comment">// false</span>\nstack.<span class="hljs-title function_">peek</span>(); <span class="hljs-comment">// 1</span>\nstack.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// []</span>\nstack.<span class="hljs-title function_">isEmpty</span>(); <span class="hljs-comment">// true</span>\nstack.<span class="hljs-title function_">size</span>(); <span class="hljs-comment">// 0</span>\n</code></pre>\n<p>So, when the stack is created, all the functions are aware of the <code>items</code> data. But outside the function, we can&#39;t access this data. It&#39;s private. We just modify the data by using the stack builtin API.</p>\n<h2 id="curry"><strong>Curry</strong></h2>\n<blockquote>\n<p>&quot;Currying is the process of taking a function with multiple arguments and turning it into a sequence of functions each with only a single argument.&quot; - Wikipedia</p>\n</blockquote>\n<p>So imagine you have a function with multiple arguments: <code>f(a, b, c)</code>. Using currying, we achieve a function <code>f(a)</code> that returns a function <code>g(b)</code> the returns a function <code>h(c)</code>.</p>\n<p>Basically: <code>f(a, b, c)</code> —&gt; <code>f(a) =&gt; g(b) =&gt; h(c)</code></p>\n<p>Let&#39;s build a simple example: add two numbers. But first, without currying!</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">x, y</span>) =&gt; x + y;\n<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 3</span>\n</code></pre>\n<p>Great! Super simple! Here we have a function with two arguments. To transform it into a curried function we need a function that receives <code>x</code> and returns a function that receives <code>y</code> and returns the sum of both values.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">x</span>) =&gt; {\n  <span class="hljs-keyword">function</span> <span class="hljs-title function_">addY</span>(<span class="hljs-params">y</span>) {\n    <span class="hljs-keyword">return</span> x + y;\n  }\n\n  <span class="hljs-keyword">return</span> addY;\n};\n</code></pre>\n<p>We can refactor this <code>addY</code> into a anonymous arrow function:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">x</span>) =&gt; {\n  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">y</span>) =&gt;</span> {\n    <span class="hljs-keyword">return</span> x + y;\n  };\n};\n</code></pre>\n<p>Or simplify it by building one liner arrow functions:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">x</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">y</span>) =&gt;</span> x + y;\n</code></pre>\n<p>These three different curried functions have the same behavior: build a sequence of functions with only one argument.</p>\n<p>How we use it?</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>)(<span class="hljs-number">20</span>); <span class="hljs-comment">// 30</span>\n</code></pre>\n<p>At first, it can look a bit strange, but it has a logic behind it. <code>add(10)</code> returns a function. And we call this function with the <code>20</code> value.</p>\n<p>This is the same as:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> addTen = <span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>);\n<span class="hljs-title function_">addTen</span>(<span class="hljs-number">20</span>); <span class="hljs-comment">// 30</span>\n</code></pre>\n<p>And this is interesting. We can generate specialized functions by calling the first function. Imagine we want an <code>increment</code> function. We can generate it from our <code>add</code> function by passing the <code>1</code> as the value.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> increment = <span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>);\n<span class="hljs-title function_">increment</span>(<span class="hljs-number">9</span>); <span class="hljs-comment">// 10</span>\n</code></pre>\n<hr>\n<p>When I was implementing the <a href="https://github.com/imteekay/lazy-cypress">Lazy Cypress</a>, a npm library to record the user behavior in a form page and generate Cypress testing code, I want to build a function to generate this string <code>input[data-testid=&quot;123&quot;]</code>. So here we have the element (<code>input</code>), the attribute (<code>data-testid</code>), and the value (<code>123</code>). Interpolating this string in JavaScript would look like this: <code>${element}[${attribute}=&quot;${value}&quot;]</code>.</p>\n<p>the first implementation in mind is to receive these three values as parameters and return the interpolated string above.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">buildSelector</span> = (<span class="hljs-params">element, attribute, value</span>) =&gt;\n  <span class="hljs-string">`<span class="hljs-subst">${element}</span>[<span class="hljs-subst">${attribute}</span>=&quot;<span class="hljs-subst">${value}</span>&quot;]`</span>;\n\n<span class="hljs-title function_">buildSelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-string">&#x27;data-testid&#x27;</span>, <span class="hljs-number">123</span>); <span class="hljs-comment">// input[data-testid=&quot;123&quot;]</span>\n</code></pre>\n<p>And it is great. I achieved what I was looking for. But at the same time, I wanted to build a more idiomatic function. Something I could write &quot;<em>get an element X with attribute Y and value Z</em>&quot;. So what if we break this phrase into three steps:</p>\n<ul>\n<li>&quot;<em>get an element X</em>&quot;: <code>get(x)</code></li>\n<li>&quot;<em>with attribute Y</em>&quot;: <code>withAttribute(y)</code></li>\n<li>&quot;<em>and value Z</em>&quot;: <code>andValue(z)</code></li>\n</ul>\n<p>We can transform the <code>buildSelector(x, y, z)</code> into <code>get(x)</code> ⇒ <code>withAttribute(y)</code> ⇒ <code>andValue(z)</code> by using the currying concept.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">get</span> = (<span class="hljs-params">element</span>) =&gt; {\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">withAttribute</span>: <span class="hljs-function">(<span class="hljs-params">attribute</span>) =&gt;</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">andValue</span>: <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">${element}</span>[<span class="hljs-subst">${attribute}</span>=&quot;<span class="hljs-subst">${value}</span>&quot;]`</span>,\n      };\n    },\n  };\n};\n</code></pre>\n<p>Here we use a different idea: returning an object with function as key-value. This way we can achieve this syntax: <code>get(x).withAttribute(y).andValue(z)</code>.</p>\n<p>And for each returned object, we have the next function and argument.</p>\n<p>Refactoring time! Remove the <code>return</code> statements:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">get</span> = (<span class="hljs-params">element</span>) =&gt; ({\n  <span class="hljs-attr">withAttribute</span>: <span class="hljs-function">(<span class="hljs-params">attribute</span>) =&gt;</span> ({\n    <span class="hljs-attr">andValue</span>: <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">${element}</span>[<span class="hljs-subst">${attribute}</span>=&quot;<span class="hljs-subst">${value}</span>&quot;]`</span>,\n  }),\n});\n</code></pre>\n<p>I think it looks prettier. And we use it like:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> selector = <span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-title function_">withAttribute</span>(<span class="hljs-string">&#x27;data-testid&#x27;</span>).<span class="hljs-title function_">andValue</span>(<span class="hljs-number">123</span>);\n\nselector; <span class="hljs-comment">// input[data-testid=&quot;123&quot;]</span>\n</code></pre>\n<p>The <code>andValue</code> function knows about the <code>element</code> and <code>attribute</code> values because it is aware of the lexical environment as we talked about closures before.</p>\n<hr>\n<p>We can also implement functions using &quot;partial currying&quot;. Separate only the first argument from the rest for example.</p>\n<p>Doing web development for a long time, I commonly used the <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener">event listener Web API</a>. It is used this way:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">log</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;clicked&#x27;</span>);\nbutton.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, log);\n</code></pre>\n<p>I wanted to create an abstraction to build specialized event listeners and use them by passing the element and callback handler.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">buildEventListener</span> = (<span class="hljs-params">event</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">element, handler</span>) =&gt;</span>\n  element.<span class="hljs-title function_">addEventListener</span>(event, handler);\n</code></pre>\n<p>This way I can create different specialized event listeners and use it as functions.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> onClick = <span class="hljs-title function_">buildEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>);\n<span class="hljs-title function_">onClick</span>(button, log);\n\n<span class="hljs-keyword">const</span> onHover = <span class="hljs-title function_">buildEventListener</span>(<span class="hljs-string">&#x27;hover&#x27;</span>);\n<span class="hljs-title function_">onHover</span>(link, log);\n</code></pre>\n<hr>\n<p>With all these concepts, I could create a SQL query using JavaScript syntax. I wanted to SQL query a JSON data like:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> json = {\n  <span class="hljs-attr">users</span>: [\n    {\n      <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,\n      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>,\n      <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>,\n      <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;tk@mail.com&#x27;</span>,\n    },\n    {\n      <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,\n      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kaio&#x27;</span>,\n      <span class="hljs-attr">age</span>: <span class="hljs-number">11</span>,\n      <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;kaio@mail.com&#x27;</span>,\n    },\n    {\n      <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,\n      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Daniel&#x27;</span>,\n      <span class="hljs-attr">age</span>: <span class="hljs-number">28</span>,\n      <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;dani@mail.com&#x27;</span>,\n    },\n  ],\n};\n</code></pre>\n<p>So I built a simple engine to handle this implementation:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">startEngine</span> = (<span class="hljs-params">json</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">attributes</span>) =&gt;</span> ({\n  <span class="hljs-attr">from</span>: <span class="hljs-title function_">from</span>(json, attributes),\n});\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">buildAttributes</span> = (<span class="hljs-params">node</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">acc, attribute</span>) =&gt;</span> ({\n  ...acc,\n  [attribute]: node[attribute],\n});\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">executeQuery</span> = (<span class="hljs-params">attributes, attribute, value</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">resultList, node</span>) =&gt;</span>\n  node[attribute] === value\n    ? [...resultList, attributes.<span class="hljs-title function_">reduce</span>(<span class="hljs-title function_">buildAttributes</span>(node), {})]\n    : resultList;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">where</span> = (<span class="hljs-params">json, attributes</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">attribute, value</span>) =&gt;</span>\n  json.<span class="hljs-title function_">reduce</span>(<span class="hljs-title function_">executeQuery</span>(attributes, attribute, value), []);\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">from</span> = (<span class="hljs-params">json, attributes</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> ({\n  <span class="hljs-attr">where</span>: <span class="hljs-title function_">where</span>(json[node], attributes),\n});\n</code></pre>\n<p>With this implementation, we can start the engine with the JSON data:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> select = <span class="hljs-title function_">startEngine</span>(json);\n</code></pre>\n<p>And use it like a SQL query:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title function_">select</span>([<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>]).<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;users&#x27;</span>).<span class="hljs-title function_">where</span>(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">1</span>);\n\nresult; <span class="hljs-comment">// [{ id: 1, name: &#x27;TK&#x27; }]</span>\n</code></pre>\n<hr>\n<p>That&#39;s it for today. We could go on and on showing a lot of different examples of abstractions, but now I let you play with those concepts.</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://mbsy.co/lFtbC">JavaScript Course by OneMonth</a></li>\n<li><a href="https://github.com/tk-notes/blog/tree/master/closures-currying-and-cool-abstractions">Blog post source code</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">Closures | MDN Web Docs</a></li>\n<li><a href="https://www.youtube.com/watch?v=iZLP4qOwY8I">Currying | Fun Fun Function</a></li>\n<li><a href="https://ReactForBeginners.com/friend/LEANDRO">React for Beginners Course</a></li>\n<li><a href="https://AdvancedReact.com/friend/LEANDRO">Advanced React Course</a></li>\n<li><a href="https://alterclass.io/?ref=5ec57f513c1321001703dcd2">Learn React by building an App</a></li>\n<li><a href="https://www.educative.io/courses/javascript-in-detail-from-beginner-to-advanced?aff=x8bV">JavaScript in Detail: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/simplifying-javascript-handy-guide?aff=x8bV">Simplifying JavaScript: A Handy Guide for Software Engineers</a></li>\n<li><a href="https://www.educative.io/courses/complete-guide-to-modern-javascript?aff=x8bV">The Complete Guide to Modern JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/learn-object-oriented-programming-in-javascript?aff=x8bV">Learn Object-Oriented Programming in JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/javascript-in-practice-es6-and-beyond?aff=x8bV">JavaScript In Practice: ES6 And Beyond</a></li>\n<li><a href="https://www.educative.io/courses/data-structures-coding-interviews-javascript?aff=x8bV">Data Structures for Coding Interviews in JavaScript</a></li>\n<li><a href="https://mbsy.co/lFtbC">JavaScript Course by OneMonth</a></li>\n<li><a href="https://es6.io/friend/LEANDRO">ES6 Course</a></li>\n<li><a href="https://beginnerjavascript.com/friend/LEANDRO">Beginner JavaScript Course</a></li>\n<li><a href="https://www.educative.io/courses/javascript-fundamentals-before-learning-react?aff=x8bV">JavaScript Fundamentals Before Learning React</a></li>\n<li><a href="https://www.educative.io/courses/rediscovering-javascript?aff=x8bV">Rediscovering JavaScript: ES6, ES7 &amp; ES8</a></li>\n</ul>\n',
  },
  {
    title: 'Consistent State Management in React and Redux',
    content:
      '<p>This is part of my studies on how to build sustainable and consistent software. In this post, we will talk about state management in the context of React and Redux. I&#39;ll show you a problem I was trying to solve and a proposed solution I made for QuintoAndar.</p>\n<h1 id="the-problem">The problem</h1>\n<p>First thing first: the problem! This part is really important. I was trying to solve a problem, not adding shiny technologies to QuintoAndar&#39;s tech stack.</p>\n<p>While developing the new Originals listing, we fetched data from an API to render the page. An important part of this data was an attribute called <code>specialConditions</code>. It is a list of real estate conditions.</p>\n<p>A list. Yes, we expected it to be always a list, but somewhere in the codebase, we dispatched an action to mutate this value to an <code>undefined</code> causing a bug and need for a bug fix.</p>\n<p>Since that day, I was searching for a solution to make the system more consistent. If it is a list, it will always be a list. No matter how creative we are as developers.</p>\n<p>This problem can be really common as the codebase grows. Because it is easy to have hidden effects that you are not aware of. It scales badly.</p>\n<p>So typing the whole redux lifecycle came to mind. If we type the state and each Redux &quot;lifecycle agent&quot;, we can make it resilient and consistent.</p>\n<h1 id="the-solution">The solution</h1>\n<p>The idea was to make the PWA architecture explicit, resilient, and consistent across the Redux lifecycle by typing the state, actions, reducers, handlers, and selectors.</p>\n<p>Handling frontend state management is complex. As we use Redux as the main state management architecture for - almost - all PWAs at QuintoAndar, building a framework to apply typings to Redux is a good way to make a guideline with best practices and conventions to scale across QuintoAndar PWAs.</p>\n<p><a href="https://www.youtube.com/watch?v=TqfbAXCCVwE&amp;feature=emb_title">Constraints</a> are a really important concept to keep us away from making simple mistakes. By typing our redux lifecycle, we can protect, at least in compile-time, our main data handler from these kinds of mistakes.</p>\n<p>By typing our initial states, reducers, and handlers <a href="https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python">we gain for free good documentation</a> about the Redux lifecycle, making it easier to reason the details about what is expected in each step.</p>\n<h1 id="the-proposal">The proposal</h1>\n<p>An important note in this proposal is that we created it thinking about the problem and the QuintoAndar&#39;s context (current tech stack and tooling, developers acceptance, what could scale across our PWAs). We will talk about these topics:</p>\n<ul>\n<li>Choosing the tool</li>\n<li>Redux Lifecycle Agents</li>\n<li>Immutable data</li>\n<li>Proof of Concept with one of our PWAs</li>\n<li>Pros and Cons</li>\n</ul>\n<h2 id="choosing-the-tool">Choosing the tool</h2>\n<p>We came across some questions to choose a tool:</p>\n<ul>\n<li>Does it really solve the problem?</li>\n<li>Acceptance at QuintoAndar.</li>\n<li>The tool in the tech community.</li>\n</ul>\n<p>Some tools that can solve the problem: Flow, ReasonML, Elm, ClojureScript, and Typescript. (<em>disclaimer</em>: ClojureScript is from the LISP family. It doesn&#39;t have a static type system. But it has some cool features like immutable data structures)</p>\n<p>Thinking about the QuintoAndar&#39;s codebase, it&#39;s all JavaScript. Choosing a different language like ReasonML, Elm or ClojureScript would be a drawback in terms of learning a new language and have a guideline with best practices and conventions. Flow and Typescript, instead, are wrappers - or a superset - to JavaScript. It&#39;s easier to learn new APIs in comparison to a totally new language. Even though we like learning and trying new things, I thought that we should have a gentle learning curve and still solve the main problem.</p>\n<p>Typescript is used in some PWAs. Some use to type the API and app data contract with Typescript models (classes, interfaces, types). Others use the data fetcher for houses, search, and neighborhood. Flow, instead, is not used in our PWAs.</p>\n<p>TypeScript is one of the fastest-growing languages and is <a href="https://medium.com/javascript-scene/the-typescript-tax-132ff4cb175b">currently the leading compile-to-JavaScript language</a>. Some big companies - like <a href="https://www.youtube.com/watch?v=P-J9Eg7hJwE">Airbnb - are also adopting this tool at scale</a>.</p>\n<p>So we started with Typescript to do a proof of concept and see how it goes.</p>\n<h2 id="redux-lifecycle-agents">Redux Lifecycle Agents</h2>\n<p>The idea behind the proposal is to type Redux agents. For - almost - all QuintoAndar&#39;s PWAs, we have actions, reducers, handlers, and selectors to type.</p>\n<ul>\n<li><p><strong>Actions</strong>: Using types to type the actions contract - type, promise, meta, extraProperties, properties, etc.</p>\n</li>\n<li><p><strong>Store state</strong>: Contract for initialState and make it consistent across the Redux lifecycle.</p>\n</li>\n<li><p><strong>Reducers</strong>: Take care of the state contract, returning only the correct type contract - changing only the data, not the types - by using handlers.</p>\n</li>\n<li><p><strong>Handlers</strong>: Take care of the external interaction lifecycle and state mapping. Enforce that the final state will have the same contract as expected - the store state contract. Handlers are a common pattern when using <a href="https://github.com/lelandrichardson/redux-pack">redux-pack</a>.</p>\n</li>\n<li><p><strong>From External Interaction Data</strong>: A contract for data from API or Firestore or any other external interaction.</p>\n</li>\n<li><p><strong>To Store State</strong>: Use the store state contract - basically, the reducer initial state contract.</p>\n</li>\n<li><p><strong>Selectors</strong>: Get the store state and map to component state - props - with mapStateToProps.</p>\n</li>\n<li><p><strong>Types</strong>: a repository of types for all the agents.</p>\n</li>\n</ul>\n<p>We can organize these agents inside the container component folder:</p>\n<pre><code class="hljs language-bash">__ containers\n      |__ MyComponent\n        |__ actions.ts\n        |__ handlers.ts\n        |__ reducer.ts\n        |__ selectors.ts\n        |__ types.ts\n</code></pre>\n<h2 id="immutable-data">Immutable data</h2>\n<h3 id="immutablejs">Immutable.js</h3>\n<p>Immutable data is a fundamental feature to <a href="https://medium.com/javascript-scene/the-dao-of-immutability-9f91a70c88cd#.9g51h5stk">make the frontend state management less complex</a>. It&#39;s a core principle to make pure functions, a mathematical function concept of for a giving input, it always returns the same output, without mutation or side effects.</p>\n<p>We currently use Immutable.js to make JavaScript with immutable data structures. It gives JavaScript new data structures to handle immutable data with a whole new API.</p>\n<p>Predictability is really important to understand code. But Immutable.js doesn&#39;t enforce us to always use it in the state, so we don&#39;t know which API to use - Immutable or JavaScript API - to get data in the selector, for example. It is easy to mix data in the store. Part of it is an Immutable object. Other is vanilla JavaScript objects.</p>\n<p>Redux docs <a href="https://redux.js.org/recipes/using-immutablejs-with-redux/">raised some concerns about using Immutable.js</a>. And Redux authors <a href="https://www.reddit.com/r/javascript/comments/4rcqpx/dan_abramov_redux_is_not_an_architecture_or/d51g4k4/?utm_source=share&amp;utm_medium=web2x">suggests avoiding using Immutable.js with Redux</a>. For immutable data, <a href="https://redux.js.org/style-guide/style-guide/#use-immer-for-writing-immutable-updates">they strongly recommend using Immer.js</a>.</p>\n<p>To make it consistent and predictable, what if we handle immutable data in compile-time and in development - with <a href="https://github.com/jonaskello/tslint-immutable">lint</a> - and use only one language API, without the need to reason about between languages - JavaScript and Immutable.js?</p>\n<h3 id="typescript-readonly-and-tslint-immutable">Typescript readonly and TSLint-Immutable</h3>\n<p>Typescript has <a href="https://mariusschulz.com/blog/read-only-properties-in-typescript">Readonly properties</a> to handle <a href="https://stackoverflow.com/questions/55905801/can-typescripts-readonly-fully-replace-immutable-js/55906256#55906256">immutable data in compile-time</a>. They are:</p>\n<ul>\n<li><p><strong>readonly</strong>: immutable primitive data</p>\n</li>\n<li><p><strong>Readonly</strong>: immutable object</p>\n</li>\n<li><p><strong>ReadonlyArray</strong>: immutable array</p>\n</li>\n</ul>\n<h3 id="readonly">readonly</h3>\n<p>Add immutable features for primitive values as a number, string, boolean, etc.</p>\n<p>If we add this feature to a type definition, we enforce the data to be immutable in compile time. If you are using VS Code, your code will have an error &quot;Cannot assign to &#39;your property here&#39; because it is a read-only property&quot;.</p>\n<h3 id="readonly-1">Readonly</h3>\n<p>Add immutable features for <a href="https://stackoverflow.com/questions/41879327/deepreadonly-object-typescript/49670389#49670389">objects</a>.</p>\n<p>If you are handling an object, you will probably use Readonly to mark all of its properties as readonly using mapped types.</p>\n<h3 id="readonlyarray">ReadonlyArray</h3>\n<p>Add immutable features for lists.</p>\n<p>If you try adding new items to the readonly array, you will have an error &quot;Property &#39;push&#39; does not exist on type &#39;readonly Readonly<T>[]&quot;</p>\n<h2 id="benchmark-immutablejs-vs-native-apis">Benchmark: Immutable.js vs Native APIs</h2>\n<p>We did some <a href="https://github.com/imteekay/javascript-immutable-data-benchmarks">benchmarks to compare the PWA with and without Immutable.js</a>. In the first benchmark, we decided to compare native JavaScript and Immutable.js APIs: get, get-in, set, and set-in. And understand how it looks like to transform data structure with fromJS and toJS functions.</p>\n<p><strong><a href="https://github.com/imteekay/javascript-immutable-data-benchmarks/blob/master/src/get.js">Get - Object and Array</a></strong>: getting the first attribute of an object is way more costly for the Immutable.js API. 7 times (in milliseconds) running with 1 million cycles and 5 million cycles. Getting the first element of an array is closer compared to those APIs.</p>\n<p><img src="https://raw.githubusercontent.com/leandrotk/javascript-immutable-data-benchmarks/master/results/get.png" alt="Object.get results"></p>\n<p><strong><a href="https://github.com/imteekay/javascript-immutable-data-benchmarks/blob/master/src/getin.js">Get-In - Object and Array</a></strong>: getting a nested attribute for an object or a nested element of an array is way more costly for the Immutable.js API than the native one. For both 1 and 5 million cycles.</p>\n<p><img src="https://raw.githubusercontent.com/leandrotk/javascript-immutable-data-benchmarks/master/results/getin.png" alt="Object.getIn results"></p>\n<p><strong><a href="https://github.com/imteekay/javascript-immutable-data-benchmarks/blob/master/src/set.js">Set - Object and Array</a></strong>: setting a new value to an object attribute is way more costly for the native JavaScript API. But using the set method, we can still work with native Objects and drastically decrease the milliseconds. For the array, it&#39;s closer, but it can be better with the set method.</p>\n<p><img src="https://raw.githubusercontent.com/leandrotk/javascript-immutable-data-benchmarks/master/results/set.png" alt="Object.set results"></p>\n<p><strong><a href="https://github.com/imteekay/javascript-immutable-data-benchmarks/blob/master/src/setin.js">Set-In - Object and Array</a></strong>: for both objects and arrays, it&#39;s better to use the native JavaScript API instead of the Immutable.js data structures and methods.</p>\n<p><img src="https://raw.githubusercontent.com/leandrotk/javascript-immutable-data-benchmarks/master/results/setin.png" alt="Object.setIn results"></p>\n<p><strong><a href="https://github.com/imteekay/javascript-immutable-data-benchmarks/blob/master/src/fromJS.js">fromJS</a> &amp; <a href="https://github.com/imteekay/javascript-immutable-data-benchmarks/blob/master/src/toJS.js">toJS</a></strong>: we can see that the fromJS function can be costly when transforming native JavaScript data structures to Immutable DS. toJS is way less costly, but every time we need to get a value, in the selector, for example, we use toJS and it can influence performance.</p>\n<p><img src="https://raw.githubusercontent.com/leandrotk/javascript-immutable-data-benchmarks/master/results/transformation.png" alt="fromJS toJS"></p>\n<h1 id="typed-state-management-the-lifecycle">Typed State Management: The lifecycle</h1>\n<p><img src="https://user-images.githubusercontent.com/5835798/70868988-f96bbe80-1f64-11ea-948d-7be14ad19cdc.gif" alt="Redux Lifecycle"></p>\n<p>The component renders with the initial state defined in the reducer. It dispatches an action. This action will have an external interaction, so it uses the promise concurrent model. The new data arrives in the reducer as part of the action and it passes the action to the handler to handle the external interaction lifecycle and add new data to the state if it succeeds. With an updated state, the selector will get and pass it to the component as props in mapStateToProps.</p>\n<p>The concept of typed state management is to make sure all the communication between these agents has a consistent and predictable state contract. From the initial state to the updated state after the external interaction, it has the same type of contract.</p>\n<h1 id="typed-state-management-poc">Typed State Management PoC</h1>\n<p>Trying this concept as a Photos PWA Proof of Concept: Photos PWA is a small app maintained by a small team, this is why we chose it as part of the PoC. We needed to validate this idea in production, but without too much complication.</p>\n<p>The container component we applied to this concept is called NotStartedPhotoSessions. It fetches an API endpoint to get photo sessions to list in the photographer&#39;s agenda.</p>\n<p>The first thing was to build the store state contract as the initial state:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-comment">// types.ts</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">PhotoSessionsState</span> = {\n  <span class="hljs-attr">notStarted</span>: <span class="hljs-title class_">ReadonlyPhotoSession</span>;\n  <span class="hljs-attr">started</span>: <span class="hljs-title class_">ReadonlyPhotoSession</span>;\n};\n\n<span class="hljs-comment">// reducer.ts</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">initialState</span>: <span class="hljs-title class_">PhotoSessionsState</span> = {\n  <span class="hljs-attr">notStarted</span>: [],\n  <span class="hljs-attr">started</span>: [],\n};\n</code></pre>\n<p>So in the first render, the component will access these values as props. In the rendering, it will dispatch a new typed action:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-comment">// actions.ts</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> fetchNotStartedPhotoSessionsAction = (): <span class="hljs-function"><span class="hljs-params">PhotoSessionsActions</span> =&gt;</span> ({\n  <span class="hljs-attr">type</span>: <span class="hljs-variable constant_">FETCH_NOT_STARTED_PHOTO_SESSIONS</span>,\n  <span class="hljs-attr">promise</span>: <span class="hljs-title function_">fetchNotStartedPhotoSessions</span>(),\n});\n\n<span class="hljs-comment">// types.ts</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">FetchNotStartedPhotoSessionsAction</span> = {\n  <span class="hljs-attr">type</span>: <span class="hljs-keyword">typeof</span> <span class="hljs-variable constant_">FETCH_NOT_STARTED_PHOTO_SESSIONS</span>;\n  promise?: <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt;;\n  payload?: <span class="hljs-title class_">PhotoSessionsPayloadType</span>;\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">PhotoSessionsActions</span> =\n  | <span class="hljs-title class_">FetchNotStartedPhotoSessionsAction</span>\n  | <span class="hljs-title class_">FetchStartedPhotoSessionsAction</span>\n  | <span class="hljs-title class_">PhotoSessionsPageViewedAnalyticsAction</span>\n  | <span class="hljs-title class_">PhotoSessionsClickedAnalyticsAction</span>;\n</code></pre>\n<p>The reducer will receive this action. And ensure that the final result will have the same state contract as the initial state:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> photoSessionsReducer = (state = initialState, <span class="hljs-attr">action</span>: <span class="hljs-title class_">PhotoSessionsActions</span>): <span class="hljs-function"><span class="hljs-params">PhotoSessionsState</span> =&gt;</span> {\n  ...\n};\n</code></pre>\n<p>The reducer then calls the handler and it transforms the API response payload into the store state. It&#39;s just data mapping.</p>\n<p>Now that the store state is updated, it&#39;s time to let the selector gets the new data:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> selectNotStartedPhotoSessions = (\n  <span class="hljs-attr">photoSessions</span>: <span class="hljs-title class_">PhotoSessionsState</span>,\n): <span class="hljs-function"><span class="hljs-params">ReadonlyPhotoSession</span> =&gt;</span> photoSessions.<span class="hljs-property">notStarted</span>;\n</code></pre>\n<p>And we get back to the component, where we map state to props and receive the new data.</p>\n<h1 id="benefits">Benefits</h1>\n<ul>\n<li>Foreseeability: type checking makes the code more foreseeable and, in turn, makes it less error-prone.</li>\n<li>Documentation: making contracts for each agent in the redux lifecycle gives us good documentation about them for free.</li>\n<li>Type safety to data flow: since most of our data flow happens in the redux lifecycle we get type safety, at least in compile-time, to our data - where most of our bugs originate.</li>\n<li>If we choose to remove Immutable.js (fromJS and toJS) from the store state, we can still use cool functions like <a href="https://immutable-js.github.io/immutable-js/docs/#/mergeDeep">mergeDeep</a> without an Immutable Map/Array/DS, but only using Immutable.js version 4.</li>\n<li>Performance optimization when removing Immutable in favor of Typescript readonly<ul>\n<li><a href="https://github.com/imteekay/javascript-immutable-data-benchmarks">Immutable vs JS Benchmark</a>: get, get-in, set, set-in, fromJS, toJS.</li>\n<li>Google Lighthouse: a slight improvement when running Google Lighthouse without Immutable.js.</li>\n</ul>\n</li>\n</ul>\n<h1 id="resources">Resources</h1>\n<ul>\n<li><a href="https://www.educative.io/path/typescript-for-front-end-developers?aff=x8bV">TypeScript for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/using-typescript-with-react?aff=x8bV">Using TypeScript with React</a></li>\n<li><a href="https://www.educative.io/courses/learn-typescript-complete-course?aff=x8bV">Learn TypeScript: The Complete Course for Beginners</a></li>\n<li><a href="https://www.educative.io/courses/advanced-typescript-masterclass?aff=x8bV">Advanced TypeScript Masterclass</a></li>\n<li><a href="https://BeginnerJavaScript.com/friend/LEANDRO">Beginner JavaScript Course</a></li>\n<li><a href="https://ReactForBeginners.com/friend/LEANDRO">React for Beginners Course</a></li>\n<li><a href="https://AdvancedReact.com/friend/LEANDRO">Advanced React Course</a></li>\n<li><a href="https://ES6.io/friend/LEANDRO">ES6 Course</a></li>\n<li><a href="https://mbsy.co/lFtbC">JavaScript Course by OneMonth</a></li>\n<li><a href="https://www.youtube.com/watch?v=TqfbAXCCVwE&amp;feature=emb_title">Constraints in frontend development</a></li>\n<li><a href="https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python">Our journey to type checking 4 million lines of Python</a></li>\n<li><a href="https://medium.com/javascript-scene/the-typescript-tax-132ff4cb175b">The Typescript Tax</a></li>\n<li><a href="https://www.youtube.com/watch?v=P-J9Eg7hJwE">Adopting Typescript at Scale</a></li>\n<li><a href="https://medium.com/javascript-scene/the-dao-of-immutability-9f91a70c88cd#.9g51h5stk">The Dao of Immutability</a></li>\n<li><a href="https://redux.js.org/recipes/using-immutablejs-with-redux/">Concerns on using Immutable.js with Redux</a><ul>\n<li><a href="https://www.reddit.com/r/javascript/comments/4rcqpx/dan_abramov_redux_is_not_an_architecture_or/d51g4k4?utm_source=share&amp;utm_medium=web2x">Avoid using Immutable.js with Redux</a></li>\n<li><a href="https://medium.com/better-programming/3-reasons-to-avoid-using-immutablejs-with-redux-b0109d0123e8">3 Reasons to Avoid Using ImmutableJS With Redux</a></li>\n<li><a href="https://redux.js.org/style-guide/style-guide/#use-immer-for-writing-immutable-updates">Use Immer for Writing Immutable Updates</a></li>\n</ul>\n</li>\n<li><a href="https://github.com/jonaskello/tslint-immutable">Tslint-immutable</a></li>\n<li><a href="https://mariusschulz.com/blog/read-only-properties-in-typescript">Read-only Typescript</a></li>\n<li><a href="https://stackoverflow.com/a/55906256/11314146">Typescript Read-only doesn&#39;t fully replace Immutable</a></li>\n<li><a href="https://stackoverflow.com/a/49670389/11314146">Deep ReadOnly Objects</a></li>\n<li><a href="https://github.com/imteekay/javascript-immutable-data-benchmarks">Native JavaScript vs Immutable.js APIs</a></li>\n<li><a href="https://github.com/gcanti/io-ts">io-ts</a></li>\n<li><a href="https://klzns.github.io/how-to-use-type-script-and-jest-mocks/">Typescript and jest mock</a></li>\n<li><a href="https://www.educative.io/courses/the-road-to-learn-react?aff=x8bV">The Road to learn React</a></li>\n<li><a href="https://www.educative.io/courses/javascript-fundamentals-before-learning-react?aff=x8bV">JavaScript Fundamentals Before Learning React</a></li>\n<li><a href="https://www.educative.io/courses/reintroducing-react-v16-beyond?aff=x8bV">Reintroducing React: V16 and Beyond</a></li>\n<li><a href="https://www.educative.io/courses/advanced-react-patterns-with-hooks?aff=x8bV">Advanced React Patterns With Hooks</a></li>\n<li><a href="https://www.educative.io/courses/practical-redux?aff=x8bV">Practical Redux</a></li>\n<li><a href="https://www.educative.io/courses/ultimate-guide-to-redux?aff=x8bV">The Ultimate Guide to Redux</a></li>\n<li><a href="https://www.educative.io/courses/intermediate-redux-toolkit?aff=x8bV">Intermediate Redux with Redux Toolkit</a></li>\n</ul>\n',
  },
  {
    title: 'Constant feedback driven development with Nodemon',
    content:
      '<p>I&#39;m learning a lot about building new projects using Typescript. Today I want to tell you more about building things with constant feedback and how to make the development dynamic.</p>\n<p>At first, when I started building things with Typescript, for every function I built, I had two options:</p>\n<ol>\n<li>Execute the file by using <code>ts-node</code>.</li>\n<li>Open a repl with <code>ts-node</code> and copy and paste the function there.</li>\n</ol>\n<p>At first, it is ok to test simple things. But you all need to stop the development and lose the flow. I wanted a more dynamic development flow and I found <code>nodemon</code>.</p>\n<p><code>nodemon</code> is not specific for Typescript. It is a</p>\n<blockquote>\n<p>Tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected. - nodemon.io</p>\n</blockquote>\n<p>So, for every file you saved, <code>nodemon</code> will restart the application. With that, you can have constant feedback from what you are building.</p>\n<h2 id="setting-up">Setting up</h2>\n<p>If you really like this tooling, you can install it globally:</p>\n<pre><code class="hljs language-bash">npm install -g nodemon\n</code></pre>\n<p>But I like to configure dependencies for each project. So I install it in the dev dependencies in the project I want to use it.</p>\n<pre><code class="hljs language-bash">npm install --save-dev nodemon\n</code></pre>\n<p>After installing it, we have to configure the nodemon json config. This is the simple configuration I did for my <a href="/publisher-a-tooling-to-automate-the-process-to-publish-my-blog-posts">publisher tool</a>:</p>\n<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;watch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;examples&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;ext&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.ts,.js,.html,.json&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;ignore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;exec&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ts-node ./src/index.ts&quot;</span>\n<span class="hljs-punctuation">}</span>\n</code></pre>\n<p>It watches the <code>src</code> and <code>example</code> folders with <code>.ts</code>, <code>.js</code>, <code>.html</code>, and <code>.json</code> files. If one of these files changes, the nodemon executes your main file defined in the <code>exec</code> property. In my project, I add the main file in the <code>./src/index.ts</code>.</p>\n<p>In your <code>package.json</code>, you can add a script to handle nodemon:</p>\n<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n    <span class="hljs-attr">&quot;start:dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nodemon&quot;</span>\n  <span class="hljs-punctuation">}</span>\n<span class="hljs-punctuation">}</span>\n</code></pre>\n<p>Run the command:</p>\n<pre><code class="hljs language-bash">npm run start:dev\n</code></pre>\n<p>And now your app is up and running.. with constant feedback.</p>\n<p>As I said earlier, dynamic feedback is really important in development mode. It helps you have instant feedback as early as possible, making it breaking and working faster.</p>\n<p>For your next project, I really recommend you to play around with this library. Or set up a different tool to make your development more dynamic.</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://www.npmjs.com/package/nodemon">npm package</a></li>\n<li><a href="https://www.educative.io/courses/advanced-typescript-masterclass?aff=x8bV">Advanced TypeScript Masterclass</a></li>\n</ul>\n',
  },
  {
    title: 'Data Fetching in React with react-query',
    content:
      '<p>One of the fundamental parts of web development is requesting data from a backend service or an API. This task is also known as data fetching in the frontend world.</p>\n<p>In the early days of the frontend, we were usually building websites with HTML and CSS. The template or the pages were server-side rendered. And JavaScript was mainly used to do some animations and, at most, form validations.</p>\n<p>The idea of fetching data asynchronously starts with a technique called Ajax, which stands for &quot;Asynchronous JavaScript and XML&quot;.</p>\n<p>I remember using <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a> Web APIs object to request data from servers while the user interacted with the page. The usage of Ajax kept growing and one of the favorite toolings that we used back in the days was <a href="https://api.jquery.com/jquery.ajax/">jQuery Ajax</a>. It was very simple to use and less scary than the name <code>XMLHttpRequest</code>.</p>\n<p>Gmail and Trello were heavily using these techniques to retrieve and update info without having the browser reload the entire page.</p>\n<h2 id="data-fetching-with-fetch">Data fetching with Fetch</h2>\n<p>Nowadays we commonly use <code>fetch</code> to handle data fetching. As <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data#fetch">MDN wrote:</a></p>\n<blockquote>\n<p>&quot;The Fetch API is basically a modern replacement for XHR; it was introduced in browsers recently to make asynchronous HTTP requests easier to do in JavaScript.&quot;</p>\n</blockquote>\n<p>And it really made it easier to make async requests. Let&#39;s see a simple use:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://pokeapi.co/api/v2/pokemon/pikachu&#x27;</span>)\n  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> response.<span class="hljs-title function_">json</span>())\n  .<span class="hljs-title function_">then</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>);\n</code></pre>\n<p>You can go right now and type this code in your Browser&#39;s console. It&#39;ll request the data from the <a href="https://pokeapi.co/">Pokemon&#39;s API</a>.</p>\n<p>We pass the resource URL and the <code>fetch</code> will return a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a>. The first <code>.then</code> receives the request&#39;s <code>response</code> object, which has a method called <code>json</code>. The <code>json</code> method returns the response JSON data. As the <code>.then</code> returns another Promise, we can make chained promises. The console log will return the Pikachu&#39;s info.</p>\n<p>We can use the <code>async-await</code> to handle promises:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://pokeapi.co/api/v2/pokemon/pikachu&#x27;</span>);\n<span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();\n</code></pre>\n<p>In modern browsers, we can use this code as they implemented <a href="https://v8.dev/features/top-level-await#:~:text=Top%2Dlevel%20await%20enables%20developers,they%20start%20evaluating%20their%20body.">top-level await</a>.</p>\n<h2 id="react-fetch-and-custom-hooks">React, Fetch, and custom hooks</h2>\n<p>In React application, we also need to handle data fetching. If you see 5 different codebases, it&#39;s possible to see 5 different ways of building the communication between the frontend and the server.</p>\n<p>Let&#39;s implement our own fetch hook.</p>\n<p>The hook&#39;s API would be very simple:</p>\n<ul>\n<li>It should receive an URL</li>\n<li>It can receive the initial data</li>\n<li>It will return the fetch state:<ul>\n<li><code>data</code>: the data returned from the API.</li>\n<li><code>isLoading</code>: a boolean that represents if the request is currently happenning or not.</li>\n<li><code>hasError</code>: a boolean that represents if the request got any error.</li>\n</ul>\n</li>\n</ul>\n<h3 id="it-should-receive-an-url">It should receive an URL</h3>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">useFetch</span> = (<span class="hljs-params">url</span>) =&gt; {};\n</code></pre>\n<h3 id="it-can-receive-the-initial-data">It can receive the initial data</h3>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">useFetch</span> = (<span class="hljs-params">url, initialData</span>) =&gt; {\n  <span class="hljs-keyword">const</span> initialState = {\n    <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,\n    <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span>,\n    <span class="hljs-attr">data</span>: initialData,\n  };\n};\n</code></pre>\n<p>The simple fetch can be wrapped in a <code>useEffect</code>. It would look very similar to the async-await fetch that we did earlier.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">const</span> fetchAPI = <span class="hljs-keyword">async</span> () =&gt; {\n    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url);\n    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();\n  };\n\n  <span class="hljs-title function_">fetchAPI</span>();\n}, [url]);\n</code></pre>\n<p>But now we need to build the request state: basically, if it&#39;s loading, if it got an error, the data that came from the server, and so on.</p>\n<p>We could do that by simply using the <code>useState</code>, but I&#39;ll show an example abstracting the logic in a reducer. To do that, we&#39;ll use the <code>useReducer</code> hook. It looks like this:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">FetchActionType</span> = {\n  <span class="hljs-attr">FETCH_INIT</span>: <span class="hljs-string">&#x27;FETCH_INIT&#x27;</span>,\n  <span class="hljs-attr">FETCH_SUCCESS</span>: <span class="hljs-string">&#x27;FETCH_SUCCESS&#x27;</span>,\n  <span class="hljs-attr">FETCH_ERROR</span>: <span class="hljs-string">&#x27;FETCH_ERROR&#x27;</span>,\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchReducer</span> = (<span class="hljs-params">state, action</span>) =&gt; {\n  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {\n    <span class="hljs-keyword">case</span> <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_INIT</span>:\n      <span class="hljs-keyword">return</span> {\n        ...state,\n        <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span>,\n      };\n    <span class="hljs-keyword">case</span> <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_SUCCESS</span>:\n      <span class="hljs-keyword">return</span> {\n        ...state,\n        <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">data</span>: action.<span class="hljs-property">payload</span>,\n      };\n    <span class="hljs-keyword">case</span> <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_ERROR</span>:\n      <span class="hljs-keyword">return</span> {\n        ...state,\n        <span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,\n      };\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> state;\n  }\n};\n</code></pre>\n<p>First we have all the actions:</p>\n<ul>\n<li><code>FETCH_INIT</code>: when the fetch initializes</li>\n<li><code>FETCH_SUCCESS</code>: when the fetch succeed</li>\n<li><code>FETCH_ERROR</code>: when the fetch got an error</li>\n</ul>\n<p>Then we have the reducer. It&#39;s basically a switch case mapping the action to the execution we do in the state.</p>\n<p>For the <code>FETCH_INIT</code>, we get the current state and update the <code>isLoading</code> to <code>true</code> (it&#39;s loading) and the <code>hasError</code> to <code>false</code> (in case it got an error before, we need to make sure that it doesn&#39;t have an error anymore as we are fetching again).</p>\n<p>For the <code>FETCH_SUCCESS</code>, we update the <code>hasError</code> and the <code>isLoading</code> to <code>false</code> and add the request payload to the state.</p>\n<p>For the <code>FETCH_ERROR</code>, we just make sure that the <code>isLoading</code> is <code>false</code> and update the <code>hasError</code> to <code>true</code>.</p>\n<p>Now that we have our reducer, let&#39;s use it in the custom fetch hook.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(fetchReducer, initialState);\n</code></pre>\n<p>As I mentioned earlier, we&#39;ll use the <code>useReducer</code> hook and pass our new reducer and an initial state for it. The hook returns the current state and a function called <code>dispatch</code> to dispatch actions that the reducer is listening to.</p>\n<p>We can now modify our fetch and add the apropriate action dispatchers to it.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">const</span> fetchAPI = <span class="hljs-keyword">async</span> () =&gt; {\n    <span class="hljs-title function_">dispatch</span>({ <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_INIT</span> });\n\n    <span class="hljs-keyword">try</span> {\n      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url);\n      <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();\n\n      <span class="hljs-title function_">dispatch</span>({\n        <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_SUCCESS</span>,\n        <span class="hljs-attr">payload</span>: data,\n      });\n    } <span class="hljs-keyword">catch</span> (error) {\n      <span class="hljs-title function_">dispatch</span>({ <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_ERROR</span> });\n    }\n  };\n\n  <span class="hljs-title function_">fetchAPI</span>();\n}, [url]);\n</code></pre>\n<ul>\n<li>When the fetch starts, we dispatch the <code>FETCH_INIT</code> action.</li>\n<li>When it got a success response, we dispatch the <code>FETCH_SUCCESS</code> action.</li>\n<li>When it got an error, we dispatch the <code>FETCH_ERROR</code> action.</li>\n</ul>\n<p>Doing this, we are always updating the state of our request. To finish we just return the <code>state</code>. So the entire hook would look like this:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">useFetch</span> = (<span class="hljs-params">url, initialData</span>) =&gt; {\n  <span class="hljs-keyword">const</span> initialState = {\n    <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,\n    <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span>,\n    <span class="hljs-attr">data</span>: initialData,\n  };\n\n  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(fetchReducer, initialState);\n\n  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> fetchAPI = <span class="hljs-keyword">async</span> () =&gt; {\n      <span class="hljs-title function_">dispatch</span>({ <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_INIT</span> });\n\n      <span class="hljs-keyword">try</span> {\n        <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url);\n        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();\n\n        <span class="hljs-title function_">dispatch</span>({\n          <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_SUCCESS</span>,\n          <span class="hljs-attr">payload</span>: data,\n        });\n      } <span class="hljs-keyword">catch</span> (error) {\n        <span class="hljs-title function_">dispatch</span>({ <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_ERROR</span> });\n      }\n    };\n\n    <span class="hljs-title function_">fetchAPI</span>();\n  }, [url]);\n\n  <span class="hljs-keyword">return</span> state;\n};\n</code></pre>\n<h2 id="data-fetching-with-react-query">Data fetching with react-query</h2>\n<p>Data fetching and server state are complex topics in web development when it comes to their challenges: caching, revalidation, complex async operations, retry logic, and so on.</p>\n<p>react-query came as the solution for data fetching in React. It solves many common problems out of the box and its simplicity improves hugely the dev experience.</p>\n<p>As stated in the Getting Started, the react-query&#39;s motivation was:</p>\n<blockquote>\n<p>&quot;Out of the box, React applications do not come with an opinionated way of fetching or updating data from your components so developers end up building their own ways of fetching data. This usually means cobbling together component-based state and effect using React hooks or using more general-purpose state management libraries to store and provide asynchronous data throughout their apps. While most traditional state management libraries are great for working with client state, they are not so great at working with async or server state. This is because server state is totally different.&quot; - <a href="https://react-query.tanstack.com/overview#motivation">react-query&#39;s motivation</a></p>\n</blockquote>\n<p>Some people are also saying the library is the obvious choice to handle data fetching in React and it&#39;s becoming the main tool to solve this problem:</p>\n<p><a href="https://twitter.com/kentcdodds/status/1379072162040926213?lang=en">https://twitter.com/kentcdodds/status/1379072162040926213?lang=en</a></p>\n<p>But we also have other choices to handle server cache like <a href="https://swr.vercel.app/">swr</a> (Stale-While-Revalidate). The APIs look very similar to react-query.</p>\n<h3 id="react-query-set-up">react-query: set up</h3>\n<p>The library set up is very simple. All we need to do is to install it:</p>\n<pre><code class="hljs language-bash">yarn add react-query\n</code></pre>\n<p>And add the <code>QueryClient</code> as a provider for our app:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">QueryClient</span>, <span class="hljs-title class_">QueryClientProvider</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-query&#x27;</span>;\n\n<span class="hljs-keyword">const</span> queryClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryClient</span>();\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">QueryClientProvider</span> <span class="hljs-attr">client</span>=<span class="hljs-string">{queryClient}</span>&gt;</span>\n      {/* the application here */}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">QueryClientProvider</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<p>In addition to this first setup, we can also add our own configuration. By <a href="https://react-query.tanstack.com/guides/important-defaults#_top">default</a>, it will have its own configurations, for example, when the window is refocused, it will refetch automatically. If it&#39;s something you want to keep, you don&#39;t need to do anything. But if it has a bad UX for your app, you can overwrite this setup by passing the <code>refetchOnWindowFocus</code> to the <code>QueryClient</code>:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> queryClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryClient</span>({\n  <span class="hljs-attr">defaultOptions</span>: {\n    <span class="hljs-attr">queries</span>: {\n      <span class="hljs-attr">refetchOnWindowFocus</span>: <span class="hljs-literal">false</span>,\n    },\n  },\n});\n</code></pre>\n<p>Reading the <a href="https://react-query.tanstack.com/guides/important-defaults#_top">&quot;Important Defaults&quot;</a> document is really important to understand the default behavior of the library. It&#39;ll also help you debug in an easier way.</p>\n<h3 id="react-query-simple-request">react-query: simple request</h3>\n<p>To see a simple request we can make with react-query, let&#39;s use the Pokemon&#39;s API again.</p>\n<p>The react-query&#39;s API is super simple:</p>\n<ul>\n<li>query key: this first parameter is used for the data cache and revalidation purposes.</li>\n<li>fetch promise: the request should always be wrapped in a Promise.</li>\n</ul>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> { data } = <span class="hljs-title function_">useQuery</span>([<span class="hljs-string">&#x27;pokemon&#x27;</span>, <span class="hljs-string">&#x27;pikachu&#x27;</span>], <span class="hljs-keyword">async</span> () =&gt; {\n  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://pokeapi.co/api/v2/pokemon/pikachu&#x27;</span>);\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();\n});\n</code></pre>\n<p>The query key is <code>[&#39;pokemon&#39;, &#39;pikachu&#39;]</code> because we can query all types of pokemons. Other variants would be:</p>\n<ul>\n<li><code>[&#39;pokemon&#39;, &#39;ditto&#39;]</code></li>\n<li><code>[&#39;pokemon&#39;, &#39;blastoise&#39;]</code></li>\n</ul>\n<p>All under the namespace <code>pokemon</code>. But it is up to you to define the query string and make it a convention or pattern in your application.</p>\n<p>To reuse this same query in other places to make it more testable, we can extract this code into a custom hook. We&#39;ll call it <code>usePokemon</code>.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">usePokemon</span>(<span class="hljs-params">pokemon</span>) {\n  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useQuery</span>([<span class="hljs-string">&#x27;pokemon&#x27;</span>, pokemon], <span class="hljs-title function_">fetchPokemon</span>(pokemon));\n}\n</code></pre>\n<p>As we also extract the fetch promise, it becomes very clean. The <code>fetchPokemon</code> just becomes</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchPokemon</span>(<span class="hljs-params">pokemon</span>) {\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> () =&gt; {\n    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(\n      <span class="hljs-string">`https://pokeapi.co/api/v2/pokemon/<span class="hljs-subst">${pokemon}</span>`</span>,\n    );\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();\n  };\n}\n</code></pre>\n<p>And now we can reuse this hook in all parts of our application:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> { data } = <span class="hljs-title function_">usePokemon</span>(<span class="hljs-string">&#x27;pikachu&#x27;</span>);\n</code></pre>\n<h3 id="react-query-requests-state">react-query: request&#39;s state</h3>\n<p>react-query also provides a nice API that represents the request&#39;s state:</p>\n<ul>\n<li><code>isLoading</code>: when the request is still in process. Nice to show a loading spinner or skeleton.</li>\n<li><code>isError</code>: when the request got an error. Nice for error handling like showing a dialog, error content, or snackbar.</li>\n<li><code>refetch</code>: a function to refetch the resource. A nice example is when it gets an error and we show the user the possibility of requesting the resource again.</li>\n</ul>\n<p>And so on. For the entire API, take a look at the <a href="https://react-query.tanstack.com/reference/useQuery">doc</a>.</p>\n<h2 id="conclusion">Conclusion</h2>\n<p>In the old days of frontend, it started very simply with little and, most of the time, with no JavaScript at all. Then the websites were getting more and more complex in terms of interactivity, and JavaScript&#39;s need was very much required. So much that jQuery was created to make it easier to do DOM manipulation and data fetching using the Ajax technique.</p>\n<p>The single page applications&#39; growth exploded and many developers and companies are building frontend applications using a frontend framework like VueJS, AngularJS, or libraries like ReactJS.</p>\n<p>Data fetching and server cache are really different than client state and they come with a lot of engineering challenges like caching, update state &quot;out of date&quot;, dedup multiple requests, and so on.</p>\n<p>To handle all these challenges, react-query was created and it&#39;s becoming the go-to option to handle data fetching out of the box in React applications. We also have other competing tools like <a href="https://swr.vercel.app/">swr</a>. They are both very well-thought libraries, easy to use, and solve the data fetching problems out of the box.</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data">Fetching data from the server</a></li>\n<li><a href="https://react-query.tanstack.com/">react-query: Performant and powerful data synchronization for React</a></li>\n<li><a href="https://www.educative.io/path/become-a-react-developer?aff=x8bV">Become a React Developer</a></li>\n<li><a href="https://www.educative.io/path/react-development-for-professionals?aff=x8bV">React Development for Professionals</a></li>\n<li><a href="https://www.educative.io/path/react-app-testing?aff=x8bV">React App Testing</a></li>\n<li><a href="https://www.educative.io/path/react-front-end-developer?aff=x8bV">React for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/react-beginner-to-advanced?aff=x8bV">React Deep Dive: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/test-driven-react-development?aff=x8bV">Test-driven Development with React</a></li>\n<li><a href="https://www.educative.io/courses/the-road-to-learn-react?aff=x8bV">The Road to learn React</a></li>\n<li><a href="https://www.educative.io/courses/reintroducing-react-v16-beyond?aff=x8bV">Reintroducing React: V16 and Beyond</a></li>\n<li><a href="https://www.educative.io/courses/advanced-react-patterns-with-hooks?aff=x8bV">Advanced React Patterns With Hooks</a></li>\n<li><a href="https://reactforbeginners.com/friend/LEANDRO">React for Beginners Course</a></li>\n<li><a href="https://advancedreact.com/friend/LEANDRO">Advanced React Course</a></li>\n</ul>\n',
  },
  {
    title: 'Designing my Learning Experience',
    content:
      '<p>In 2017, I posted about <a href="https://medium.com/the-renaissance-developer/how-i-hack-my-education-354fb5b8a025"><strong>my learning journey</strong></a>, I talk a lot about passion, willingness, and obsession. I always feel I have so much to do. So much to learn. In the same time this feeling makes me anxious, it makes me feel ready for the next challenge. It&#39;s mixed feelings.</p>\n<p>Since 2017, I&#39;m learning a lot and sharing knowledge (on <a href="https://medium.com/@leandrotk_/">Medium</a> and my <a href="http://leandrotk.github.io/tk">Blog</a>). I want to keep this mindset of trying new things, experiment new technologies, learn different paradigms. But I want to improve the whole process, making this a better experience and more conscious.</p>\n<p>As I&#39;m learning about myself and how my body and mind work, I&#39;m designing my learning process based on those things. So some questions started to pop in my mind:</p>\n<ul>\n<li>What&#39;s the best way to learn?</li>\n<li>How do I measure it?</li>\n<li>How do I improve my learning experience?</li>\n<li>How to design my life to have &quot;a good amount of productivity&quot;?</li>\n</ul>\n<p>Ok, we have a lot of work to do here. Let&#39;s answer these questions and see the final product.</p>\n<hr>\n<h2 id="whats-the-best-way-to-learn">What&#39;s the best way to learn?</h2>\n<p>The short answer is: I don&#39;t know.</p>\n<p>I think we don&#39;t have the right answer for every person in earth. But if I design the learning experience exclusively for myself, I think I have a chance.</p>\n<p>To understand what works and what is not so effective, I need to try different methods as experiments: podcast, articles, videos, courses, university, doing projects, books, etc. We have a bunch of resources and ways to learn.</p>\n<h3 id="what-works-for-me">What works for me?</h3>\n<ul>\n<li><strong>Podcast</strong>: I use it as a distraction tool when commuting, running, and playing video games. I like to listen to discussions on technology and experiences in tech. I tried to use it as a learning tool but I always get distracted. So now, for example, if I want to learn React Hooks, I don&#39;t listen to a podcast to learn Hooks. I prefer reading the docs (which is pretty good!). But if I want to learn how different teams/companies scale React, a podcast can be a good fit.</li>\n<li><strong>Articles</strong>: I love learning through reading articles. I tend to collect a bunch of different articles on one topic and read all to have a deep understanding with different perspectives. When I was learning JavaScript concurrent model with Promises, I got about 10 different articles to go deep in this subject. It&#39;s also good for spaced repetition in my learning process. For example, if I want to learn JavaScript Promises, I read the first 3 to 4 articles in the first place and do some experiments (a.k.a. practice, code!). In the following days/weeks, I read other articles to have other perspectives or to just remember the concept.</li>\n<li><strong>Videos &amp; Courses</strong>: When I started learning to code, videos were a big part of my learning process. As a visual person, I like to understand the concepts by seeing the code. It was also good because I watched a lot of tutorials. But nowadays, I don&#39;t watch a lot of videos, I tend to watch tech video as an entertaining+educational content like <a href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q">fun fun function</a> and <a href="https://www.youtube.com/channel/UCV0qA-eDDICsRR9rPcnG7tw">Joma Tech</a>. Specific for courses, I tend to like more educational platforms like Udacity that mixes theory (concepts) and practice (coding).</li>\n<li><strong>University</strong>: So let&#39;s skip this part... kidding! Hmm.. I&#39;m a bit skeptical about universities. I tried it, but I realized that the &quot;way of learning&quot; was not the best for me. I didn&#39;t fit it. A class of 30 people passively listening to a professor for 40 minutes. I like to be active, I like to question, I like to do experiments and practice. It didn&#39;t work for me. Maybe it works for you.. who knows?</li>\n<li><strong>Projects</strong>: I love doing project-based learning. I&#39;m doing a lot of this recently. When I was learning functional programming, I tried many different projects (<a href="https://github.com/imteekay/pomo-lambda">PomoLambda</a>, <a href="https://github.com/imteekay/luhn">Luhn</a>, <a href="https://github.com/imteekay/year-progress-bar">Year Progress Bar</a>). When I was learning React Hooks, I did some experiments to understand the concepts by building <a href="https://github.com/imteekay/pokehooks-labs">a mini pokemon &quot;game&quot;</a>. When I was learning JavaScript concurrent model with Promises, <a href="https://github.com/imteekay/promising">I also tried different things</a>. When I wanted to fix my struggles with CSS, I created the <a href="https://github.com/imteekay/ui-challenges">UI Challenges project</a>. I think you got the idea.</li>\n<li><strong>Books</strong>: Books are a big part of my learning process. But I&#39;m a slow reader. I like to take notes, organize my thoughts, and understand the details. And I know that I&#39;m too curious about a lot of different things, so the challenge to me is to keep it up, to be consistent, and finish the books. Having this in mind, I&#39;m trying something different: reading 3 books simultaneously. A biography or something about self-development (<a href="https://www.goodreads.com/book/show/13589182-mastery">Mastery</a>). A technical one (<a href="https://www.goodreads.com/book/show/43713.Structure_and_Interpretation_of_Computer_Programs">SICP: Structure and Interpretation of Computer Programs</a>). And a career one (<a href="https://www.goodreads.com/book/show/25238425-the-effective-engineer">The Effective Engineer</a>). This is how it&#39;s working for me. ¯*(ツ)*/¯</li>\n</ul>\n<p>So here we have a ton of resources and ways of learning. Basically my mindset is like a laboratory. Make experiments, try new things. But understanding <strong>what works for me</strong>. Asking myself how do I learn best? Which resources I really engage and get the most of it? Keep in mind it doesn&#39;t have any rules. Actually, <strong>you make the rules</strong>. You understand yourself, you understand the resources, and make the decision to keep it up with the best way of (<strong>your</strong>) learning.</p>\n<p>Now I divide my time in my three main resources: articles, projects, and books.</p>\n<p>I have my own time to keep reading books, as I told you my experiment to read three books at the same time with different topics. It&#39;s not daily yet, but my goal is to have a daily time to read it and make it more consistent.</p>\n<p>Articles I read once in a while, when I want to go deep in a topic, understand the theory and the concepts. I like to do a linked list of articles (or maybe a priority queue) and organize by topics to study later.</p>\n<p>The projects are the resource I spend most of my time. This is the way I practice. The way I get the concepts I learn and make it live. The way I do experiments. The way I think deeply about the concepts. Today I&#39;m in a good vibe to try different projects. But I want to explore it more, organize my time to get more done.</p>\n<hr>\n<h2 id="how-do-i-measure-it">How do I measure it?</h2>\n<p>This is an interesting topic, but I don&#39;t know if we can really measure the learning process. I have two things in mind when I want to &quot;evaluate&quot; if I&#39;m actually learning or not: project-based learning and real life projects.</p>\n<h3 id="project-based-learning">Project-based learning</h3>\n<p>As I mentioned in the resources topic, projects are a simple way to make the learning practical. Sometimes I call it &quot;mini projects&quot;, because I just want to do a Proof of Concept (PoC) or just a small experiment, making the learned theory real and practical. So I don&#39;t spend a lot of time doing a specific project or improving it. I create the project, do the experiment, and when I feel satisfied with the results I move on to the next thing I want to learn. As a software engineer, the coding part is always fun, but to go to the project and start the experiments early as possible, I created a framework to myself:</p>\n<ul>\n<li>Think about the project that I can apply the concepts I&#39;m learning</li>\n<li>Create a new Github repository</li>\n<li>Choose a programming language (sometimes I&#39;m learning a specific feature of a programming language. Sometimes I just want to apply the concepts and the PL is only a tool for this experiment)</li>\n<li>Coding time</li>\n<li>Share to receive feedback</li>\n</ul>\n<p>I like this framework because I start the project fast and then I can focus on the experiment and the feedback cycle.</p>\n<h3 id="real-life-projects">Real life projects</h3>\n<p>This is similar to project-based learning (PBL), but the PBL is a quick and small project just to experiment. A real life project will be a longer and probably bigger project (bigger codebase in software development). Some questions to &quot;measure&quot; the learning:</p>\n<ul>\n<li>Can I apply this learned concept and ship it to production?</li>\n<li>Does the learned concept helps me to have better (technical) decisions?</li>\n<li>Am I able to suggest the learned concept in code review or help other people working on this project?</li>\n</ul>\n<p>An example was a project I needed to implement an authentication and authorization in a serveless environment using node. As I learned promises, I wanted to implement using <code>async/await</code> syntax. I was confident about what I studied and wanted to see the results. After shipping the code to production, I realized my accomplishment. It&#39;s a good feeling when you study hard and can apply this in real life. Not just a good feeling, but a way to &quot;measure&quot; that I&#39;m learning it, that I understand it.</p>\n<h2 id="how-do-i-improve-my-learning-experience">How do I improve my learning experience?</h2>\n<p>Learning can be hard. Sometimes &quot;boring&quot;. But we can make it more engaging and &quot;fun&quot;. I&#39;ll tell you the three ways I use to improve my learning experience. I like these three ways because it gives me visibility and depth on the topics I&#39;m learning: <strong>The Flow,</strong> <strong>Sharing Knowledge</strong> &amp; <strong>Smart People Around</strong>.</p>\n<h3 id="the-flow-chart">The Flow chart</h3>\n<p>A couple years ago, I wrote a piece of content describing the turning point in the learning process: In the beginning it can be hard to learn a new thing, but keeping it consistent until a time <code>t</code>, you&#39;ll realize that you&#39;ll learning much faster than before. This time <code>t</code> is particular for each person.</p>\n<img src="/designing-my-learning-experience/learning-time.jpeg">\n\n<p>But it is very simplistic. So I kept searching for a better framework to understand this, but also give me visibility to understand how to improve my learnings and enable me to be actionable.</p>\n<p>I found this chart from the book <a href="https://www.amazon.com/Flow-Psychology-Experience-Perennial-Classics/dp/0061339202">Flow</a>. It talks about how to stay in the flow by managing your state between anxiety and boredom. Basically:</p>\n<ul>\n<li>Low Challege + High Skills = Boredom</li>\n<li>High Challenge + Low Skills = Anxiety</li>\n<li>Low Challenge + Low Skills = Flow</li>\n<li>High Challenge + High Skills = Flow</li>\n</ul>\n<img src="/designing-my-learning-experience/flow-chart.jpeg">\n\n<p>So now I can stop and reflect about my learning experience:</p>\n<ul>\n<li>Am I bored? Maybe I need to search for more challenging projects.</li>\n<li>Am I anxiety? Maybe I need to study something to get the challenge done.</li>\n<li>Am I in the flow? This feeling is good. Keep it up.</li>\n</ul>\n<p>I like this idea because it gives more visibility to understand the pain points on my learning process and also reflect and be actionable on the problems and opportunities I have to improve the whole learning experience. I also like it because it is simple, it&#39;s not that complex. And it doesn&#39;t need be.</p>\n<h3 id="sharing-knowledge">Sharing knowledge</h3>\n<p>For me, sharing knowledge is a way to give me depth on the topics I&#39;m learning. When I share knowledge, I force myself to go deep and understand every possible detail about the topic I&#39;m learning to teach in the best way. Now I usually do two things: Articles and Tech Talks</p>\n<p>I love to write detailed articles about things I&#39;m learning or had experience like when <a href="https://medium.com/free-code-camp/functional-programming-principles-in-javascript-1b8fc6c3563f">I was learning functional programming</a>, when <a href="https://medium.com/free-code-camp/all-you-need-to-know-about-tree-data-structures-bceacb85490c">I was learning data structures and fell in love with the tree data structure</a>, and <a href="https://medium.com/free-code-camp/learning-python-from-zero-to-hero-120ea540b567">my very first programming language: Python</a>!</p>\n<p>Tech talks are the last step for me when it comes to learning something new. I usually:</p>\n<ul>\n<li>Learn by reading a lot of articles</li>\n<li>Learn by doing some experiments and projects</li>\n<li>Learn by writing articles</li>\n<li>Learn by doing tech talks</li>\n</ul>\n<p>This &quot;framework&quot; is the exact thing I did when I was learning functional programming. I did read a lot of articles (and added all in this <a href="https://github.com/imteekay/functional-programming-learning-path">A Learning Path for Functional Programming</a> Github repo). I did some <a href="https://github.com/imteekay?tab=repositories">experiments and projects</a>. I did write an <a href="https://medium.com/free-code-camp/functional-programming-principles-in-javascript-1b8fc6c3563f">article</a>. And I did a <a href="https://github.com/imteekay/talks/blob/master/functional_programming/slides.pdf">tech talk</a>.</p>\n<h3 id="smart-people-around">Smart people around</h3>\n<p>I like the idea to always designing a better experience for my life. As I know I get most of my time at work, and if I have the possibility, I&#39;ll choose the best option out there. I like to choose a company or job/team based on three things:</p>\n<ul>\n<li><strong>Company / Team Culture</strong>: work in a team that supports/helps me to grow, a team that gives me freedom to question things and debate, a team with lifelong-learners, a team with great professionals, but also awesome human beings.</li>\n<li><strong>Learning / Challenges</strong>: I really like to solve interesting problems. It&#39;s not only fun, but also helps me to grow, try different solutions, and motivates me to keep learning.</li>\n<li><strong>Purpose</strong>: Looking inside me, I truly love the technical part of my job. I love the challenges and the learning involved. And it motivates me a lot. It sounds cliché, but I am deeply passionated about building new things, new products that have a good impact on people&#39;s lives</li>\n</ul>\n<p>With these three things in mind, I could choose a lot of good places I worked for. The places and people helped immensely to grow.</p>\n<p>But learning at a company is one way to do it. You can also be part of a community. Sometimes I go to meetups, or be active on groups on slack or telegram, to learn and discuss things I&#39;m interested or things I want to learn.</p>\n<hr>\n<h2 id="about-productivity">About Productivity</h2>\n<p>I want to get the most of my day to learn and improve, so I experimented different things. And this what I&#39;m aware of to get things done with quality.</p>\n<h3 id="energy"><strong>Energy</strong></h3>\n<ul>\n<li>Productivity is about the energy I put into tasks. Strive to think about quality, instead of only quantity of thing you get done in the end of the day.</li>\n<li>Strive to be physically and mentally well. Eat healthy. Do exercises. Sleep well. De-stress.</li>\n</ul>\n<h3 id="task-planning--prioritization"><strong>Task Planning &amp; Prioritization</strong></h3>\n<ul>\n<li>Realize you won&#39;t get done a thousand things in a single day.</li>\n<li>Prioritization is so important. Design your tasks to get done the most important and impactful things.</li>\n<li>Plan to get things done. It is easy to do other things not related to things you really need to get done. Planning your day, or the things you want to do is a way to be productive and not procrastinating all day.</li>\n</ul>\n<h3 id="focus--distractions"><strong>Focus &amp; Distractions</strong></h3>\n<ul>\n<li>Design your environment to be focused on your tasks: get a good headphone, stay away from loud places with too many people, silence the phone.</li>\n</ul>\n<hr>\n<h2 id="wrapping-up">Wrapping up</h2>\n<p>So here I have different things I&#39;m trying out, do experiments in my life, and reflect to understand what works for me. And this is important, because it works for me, but it may not work for you. Do experiments, try different ways of learning, keep the mindset of improving day after day, the lifelong mindset.</p>\n<p>The last thing I want say: this is an in progress design for my learning experience. I want to keep improving this, because I&#39;m trying new approaches. The design for my learning experience continues.</p>\n<h2 id="some-resources">Some resources</h2>\n<ul>\n<li><a href="https://alifeofproductivity.com/how-to-experience-flow-magical-chart/">Understanding the Flow</a></li>\n<li><a href="https://medium.com/swlh/flow-a-productive-antidote-to-anxiety-and-boredom-1b015be966b">Deep understand of Flow</a></li>\n<li><a href="https://medium.com/the-renaissance-developer/how-i-hack-my-education-354fb5b8a025">How I hack my education</a></li>\n<li><a href="https://www.amazon.com/gp/product/0670024961/">Mastery book</a></li>\n<li><a href="https://github.com/imteekay">My Github repositories</a></li>\n<li><a href="https://www.youtube.com/channel/UCrdWRLq10OHuy7HmSckV3Vg/videos?view=0&amp;sort=p&amp;flow=grid">Nathaniel Drew Youtube channel on self development</a></li>\n<li><a href="https://www.youtube.com/channel/UCJ24N4O0bP7LGLBDvye7oCA">Matt D&#39;Avilla Youtube channel</a></li>\n</ul>\n',
  },
  {
    title: "Designing my life's System",
    content:
      '<blockquote>\n<p><em>“You have power over your mind - not outside events. Realize this, and you will find strength.”</em> — Marcus Aurelius, Meditations</p>\n</blockquote>\n<p>I&#39;m always looking for ways to get better. I know it is a long term goal. Actually, it is a <em>forever goal</em>. It doesn&#39;t finish. I&#39;ll do it consistently for my eternity. Every single day.</p>\n<p>Sometimes I feel I&#39;m getting closer. But closer to what? It&#39;s just a feeling. I don&#39;t have a real end goal. Actually, my end goal is to be able to do what I love to do daily. It&#39;s all about the process. The end goal is my process. My process is my end goal. It&#39;s all connected.</p>\n<p>As Marcus Aurelius said &quot;<em>You have power over your mind - not outside events</em>&quot;. I don&#39;t control outside events, I only have power over myself. This is what I can fix, polish, and make better. I don&#39;t want to lose my time trying to change something I&#39;m not able to. Focus is important.</p>\n<p>The focus is on my process and how to make it works for me. Everything can get better. A system is not an exception. I build it to try and experiment for a week. See if it works. Fix and improve if needed.</p>\n<p>This post is my attempt to illustrate how I designed my life&#39;s system, what I&#39;m trying, and next steps.</p>\n<p>Topics I want to cover in this piece:</p>\n<ul>\n<li>Goals</li>\n<li>Systems</li>\n<li>Habits</li>\n<li>Mental Clarity</li>\n<li>Personal Knowledge Base</li>\n<li>Feedback &amp; Review</li>\n</ul>\n<p>Just a <em>disclaimer</em> before we start this conversation. This is how I designed my system. It can or cannot work for you. The best advice I can give is to read, experiment, and adjust it specifically for your life.</p>\n<p><em>Disclaimer</em> number 2: this essay won&#39;t be like every single Medium article. I will not write a <em>“5 steps to build your system”</em> or <em>&quot;I created a system and this is what I learned&quot;</em>. Nothing wrong with these types of articles, but my essay is more like rambling about different things I tried and thinking deeply in each part.</p>\n<h2 id="the-system">The System</h2>\n<p>It all started when I was feeling overwhelmed by my own mind. I wanted to do everything, read all the books, learn every programming language, embrace all projects. Basically I was saying <em>**yes! **</em> for everything and doing nothing.</p>\n<p>I needed to put my ideas down on paper. Literally. Yes, people still use paper. It cleared my mind. Writing and making drafts really help me gain visibility. And visibility is what I need. A place that I can see all the things I want to do. My goals, my studies, my projects, my bookshelf, etcetera.</p>\n<p>It could be a physical place. But I didn&#39;t want to use paper, notebooks, or physical calendars to organize my life. I wanted something digital. A place I could get very quickly anywhere I am. In my pocket. Or using my MacBook.</p>\n<p><em>So it must be online.</em></p>\n<p>But not only online. It should be simple to use. Easy to organise. And - maybe - the most important thing: give me the visibility of things I want to do and show my progress.</p>\n<p>At first, I used Evernote for a long time. But I always thought of it as a draft tool. Not a place I could I organise my life. Notion gives me that. It is digital, simple to use, easy to organise, and it enables me to create my system to give me visibility about everything.</p>\n<p>But one thing I want to make clear is that Notion - and any other software - is just a tool. The most important thing is <em>how</em> you will use it.</p>\n<p>As a perfectionist, I wanted everything, well, perfect. I wanted to design the best system for me. But to break this perfectionism feeling, the first thing that I did was to create a page called <strong><em>Drafts</em></strong>. This page was to write down everything I wanted. Or needed. All the expected ideas to the craziest ones. It allowed me to just try it out and make the ideas better. Polishing here. Refining there.</p>\n<p>It doesn&#39;t need to be perfect at first. Build the first version. Make it works. Experiment. Learn more things. Refine it.</p>\n<p>This is one thing that I learned. This cycle is forever. We can always make it better. But it is not the main reason. It&#39;s because we are people. We constantly change. What works now, may not work in a month. It doesn&#39;t need to be perfect at first.</p>\n<p>So I started simple. I built a <em>Home</em> page. This page would contain everything I need to have visibility. In the <em>Home</em>, I added the first page: the <em>Daily Schedule</em>. This page is a just a simple calendar. But it joins two power features: a calendar and a to-do.</p>\n<p>Every night before, I add To-Dos for the next day. Actually, not every night, but I tried my best. It has three main things:</p>\n<ul>\n<li>Daily Habits</li>\n<li>Work Expectation</li>\n<li>Projects</li>\n</ul>\n<p>I organise everything on these topics. With Notion, I can use the <em>template</em> feature to setup the default daily schedule very quickly.</p>\n<p>With that, I have a very clear vision of my day. Basically what I want to accomplish. I try to make it very actionable to just execute it. I also use them to do a weekly retrospective.</p>\n<p>This is an important topic. Doing a retrospective is like a feedback loop. I have all the information about my week there. I just need to grab and reflect on them. What worked. What doesn&#39;t. How I felt about the week. And actionable items to work on the next week.</p>\n<p><strong>Daily Habits</strong>: we will dive into this topic more in depth later, but the idea here is to cluster the habits I&#39;m building daily. It&#39;s just a bunch of checkboxes that help me keep track of the habits I set for me.</p>\n<p><img src="https://storage.googleapis.com/reading-supply-assets/reading.supply.bc7bfa08-c8a7-4322-981b-8fbcb8c6a754.png" alt="Untitled"></p>\n<p>I started with some habits that I was already maintaining. It is always easier when we are used to something than other new things that we need all the learnings curve process. It needed to be simple and easy to start.</p>\n<p>As Notion is a central system, I use it to organize everything and to give visibility of my day. But at night I store every habit in the <em>Loop Habit Tracker</em> app to build a chart and understand my progress for each habit I&#39;m building.</p>\n<p><strong>Work Expectation</strong>: this part is very related to the work I do as a software engineer. Add some important events or meetings I have, the tasks I&#39;m working on, and other projects or ideas I need to separate a time to work on.</p>\n<p>No big deal here. Just to remember me about the work for the day and organise my expectations.</p>\n<p><strong>Projects</strong>: writing, tech products, learning paths. I started with some topics I was already doing in my life. Start simple. Improve along the way.</p>\n<p>I love sharing knowledge and writing is my main channel. I feel I can express everything in every detail I want with writing. But it is not only about sharing, it&#39;s also about clearing my mind. We will dive into this topic later.</p>\n<p>I love building things. Tech products are the side projects that enable me to make stuff and ship it. It allows me to be creative, thinks in different tools to make life easier, and have a big impact.</p>\n<p>I&#39;m always studying. Learning. Reading. This is my hobby and my process. I love it since I know myself as a person. Lifelong learning is part of me.</p>\n<p>It was a very simple setup. I didn&#39;t want to make it hard at first. After some days, I felt the need to transform these three things into a more detailed and organised page.</p>\n<p>Actually, three separate pages: Project, Work, Habits.</p>\n<h3 id="work">Work</h3>\n<p>The <em>Work</em> page is the simplest one. It is just a page with different toggle lists.</p>\n<p><img src="https://storage.googleapis.com/reading-supply-assets/reading.supply.058d97bb-1f83-4390-a0cd-d3d09b88f8e8.png" alt="Untitled"></p>\n<p>Here I have these toggles:</p>\n<ul>\n<li><strong>Squad</strong>: I use it as the repository for basically everything related to the squad I&#39;m working on. The projects, meeting drafts, doubts, questions.</li>\n<li><strong>Projects</strong>: These are the project I do that are not related to my current squad. As a software engineer, I love to build dev tools. It is not part of my squad goals, but I know it can have a big impact in the developer experience across the company. It helps me keep track and share with my colleagues the last updates of theses projects.</li>\n<li><strong>1x1</strong>: This is easy to understand. Notes from 1x1s I have with colleagues and my tech leaders. Sometimes I write down some action points to do in the following weeks, or just add notes to have a focused conversation.</li>\n<li><strong>Learnings</strong>: At work I&#39;m always learning. This is one of my main reasons to work where I work. I need to be constantly learning. This page is just a repository of things I learned or notes from tech talks I participated.</li>\n<li><strong>Retrospective</strong>: This is one thing that is related to the squad, but I keep it separated to write down all the pain point along the weeks and be ready to share in our bi-weekly retrospective meetings.</li>\n</ul>\n<p>I said I needed to start simple. Don&#39;t get me wrong. This is not how I started. When I began to write it down, it was just the Squad toggle list. Nothing more. And I just added some notes from meetings to help me have a better understanding of business rules and product features.</p>\n<p>Over the weeks I saw the need to add notes about other topics and start improving it.</p>\n<p>This is the best part of the system. You can do your own way, start easy, and then increment with whatever you want.</p>\n<h3 id="habits">Habits</h3>\n<blockquote>\n<p><em>“Motivation is what gets you started. Habit is what keeps you going.”</em> ― Jim Ryun</p>\n</blockquote>\n<p>This topic is one of my passions. I really like to learn about habit, habit tracking, and how to apply it my daily life.</p>\n<p>I wanted small, smart, and actionable habits. With that, I could do every day and think long term and the compound effect. I wanted to set up to success: part of the system is to make everything <em>closer</em> and <em>convenient</em>. In other terms, make it easy to do in a daily basis. And I wanted to document this. I really like the idea of learning in public and document all my process.</p>\n<p>The last thing in my mind is to just enjoy and love the process, because the process is my biggest reward. It is the process and the end goal at the same time. I could do what I love every single day, consistently.</p>\n<p>At first, I wanted to add all the habits that will make me become the person I want to be. It is a natural thing to think and act like this. But after some reflection, I understood that I didn&#39;t need to do everything. What I&#39;ve learned?</p>\n<ul>\n<li><em>Prioritize</em> is important</li>\n<li><em>Saying no</em> is important</li>\n</ul>\n<p>Yeah, it is obvious. But it is difficult at the same time. It is something I need to be constantly active and aware of.</p>\n<p>So I wrote myself a question: <em>&quot;What are the essential habits I want to cultivate?&quot;</em>. To answer this, I started sketching and drawing on a paper. I came with something that made so much sense for me and my life.</p>\n<img src="/designing-my-lifes-system/mindset.jpeg">\n\n<p>It just illustrates that I want to be strong in three levels:</p>\n<ul>\n<li>Physically</li>\n<li>Mentally</li>\n<li>Spiritually</li>\n</ul>\n<p>I thought about these three levels because if I want to do my best work and have peak performance - and this is my own hypothesis - I believe I need to master and compose them.</p>\n<p>This <em>three levels</em> is a deep topic and require a long term journey. It doesn&#39;t work overnight. I picked level number one first: physically healthy; and started working on it.</p>\n<p>The habits I&#39;m building daily are: physical exercises, minimum of 2 litres of water, good amount of sleep, and eat healthily.</p>\n<p>The exercise habit was the easiest one. I was already running daily. And I love running, it is a hobby of mine. At 7 p.m. I stop working and start running. It&#39;s the best time for me to turn off work thoughts and be more energetic.</p>\n<p>It was already good. But I wanted to improve this system, so I started paying a gym membership. Sometimes I run, sometimes I go to the gym. I gain variety. I don&#39;t get bored.</p>\n<p>This <em>bored thing</em> is something I learned about habits. It&#39;s good to be consistent and all, but the routine can be tiring. It is healthy to mix it up, try new things, and add diversity to the routine. Get bored is the first step to stop the consistency of your habit.</p>\n<blockquote>\n<p><em>&quot;I love the idea that the important things that happen to us continue to appear again and again in our behavior patterns until we learn to understand &amp; confront them&quot;</em> — Ava Huang</p>\n</blockquote>\n<p>And the last habit I wanted to do was <em>sleep well</em>. It is so simple: I sleep well. I have more energy. I can perform better. I have a better focus. I can do my best work. But I need to tell you. Sometimes I don&#39;t take it seriously enough. So I&#39;m trying these three things to help me sleep well:</p>\n<ul>\n<li><strong>Less caffeine</strong>: I love coffee. But it drastically disturbs my sleep. Instead of 3 to 5 cups of coffee, I take 1 (or 2, one in the morning, one after lunch), and if I want to drink another cup, I get tea instead. The idea is to mimic the same feeling but reduce caffeine.</li>\n<li><strong>Less internet</strong>: I love internet. If I could, I would be almost all my time. But it is not really that healthy. To begin, I&#39;m changing internet time at night to read a book. This is a habit I wanted to cultivate: read the best books - I&#39;m looking at you, <em>Why We Sleep</em>. Instead of being in the computer at night, I read books.</li>\n<li><strong>Build a routine</strong>: Set the hour to sleep. Set the hour to wake up. It is not easy. Sometimes I go to sleep late, or I want to sleep more. But the idea is to have a routine. Give a chance to my body to get used to the <em>time to sleep, time to wake up</em>.</li>\n</ul>\n<p>With these three things, I want to improve the quality of my sleep. All these things are addict or difficult to do. But realistic and simple enough to try.</p>\n<p>One thing that I didn&#39;t talk about was food. This topic could be a whole other essay, but I want to illustrate part of the system I built to eat better.</p>\n<p>I&#39;m not a nutrition specialist - and I don&#39;t intend to be - but the food is a big part of my daily life, I wanted to have a better understanding of it. So I started going to a nutritionist. I didn&#39;t go to just receive a diet plan and start this food routine. I wanted to understand food, nutrients, fat, etc.</p>\n<blockquote>\n<p><em>“Any fool can know. The point is to understand.”</em> ― Albert Einstein</p>\n</blockquote>\n<p>Knowledge is important in all areas. It is the path to good decisions. In terms of food, I could have a better understanding of how to cook, what to buy in supermarkets, enough amount of food to eat in each part of the day. I didn&#39;t need to do all this. But knowledge enables me to act like this.</p>\n<p>I&#39;m pretty amazed how healthy I&#39;m eating now - but I&#39;m more amazed to had confronted my laziness. It didn&#39;t take too much effort. Buy quality food, cook at home, if go eat outside, try restaurants with a better quality of food, cut soda, reduce sugar, and so on. We all can do this. (<em>disclaimer</em>: we all can do this in terms of effort, not in terms of money. I have the privilege of independence).</p>\n<p>But I have my days of junky food too and it is totally ok. We need to be happy with our decisions.</p>\n<p>To be mentally strong, I wanted to cultivate habits that <em>reduce</em> toxic things in my life, not something that adds new features. And this is a powerful habit concept: a habit is not only about doing something, but can also be removing or reducing some behaviours.</p>\n<p>This is what I wanted to focus on: remove it or reduce it.</p>\n<p>I use the internet a lot to do my work, to write, to read. So it is hard to reduce internet consumption. But I can reduce noise from the internet. I don&#39;t need to have a thousand Chrome tabs. I built a Personal Knowledge Base (PKB) to help me with that. This PKB is a work in progress project, but I know I can reduce noise from my work by just let the articles, videos, podcasts stored for the right moment. And now I know where I go to when I procrastinate. The PKB is there for this purpose.</p>\n<p>Facebook, Instagram, LinkedIn. They are all noise. I reduced drastically the time consuming using these apps. And when I use it, it is to publish my work, my writings, or book reviews. I don&#39;t miss the _consuming _ time at all.</p>\n<p>Two things in mind:</p>\n<ul>\n<li><strong>Mindset</strong>: Now my mind is set to use these media to create and share, not consume. I won&#39;t lie. I consume them. But with this mindset, I reduced the consuming time.</li>\n<li><strong>Remove or Disable</strong>: One strategy that worked for me is to remove or disable the apps from my phone. I always used these apps when I wanted to procrastinate. As I don&#39;t have these apps in my phone anymore, I can use my procrastination time to do other things. We will dive into this topic later.</li>\n</ul>\n<p>Twitter is something I use constantly in my daily basis. At the same time it can be an excellent tool to express ideas, it can be a distracting social media. I was a bit overwhelmed with all the content from all the following I had plus the ads are pretty annoying.</p>\n<p>What if I could separate people into domains. It would help me consume content in a more focused way. I want to read about <em>writing</em>?, go to the <em>writing</em> domain. I want to see the latest <em>software engineering</em> topics?, go to the <em>software engineering</em> domain. And so on.</p>\n<p>The specific knowledge for the right moment. I built this whole idea with simple private lists, where I separate people into domains. I started the idea with all my following group. If I followed the person sometime in my life, it is because I found the account interesting. So for every following, I</p>\n<ul>\n<li>Added the person to a specific list, or sometimes, multiple lists.</li>\n<li>Removed from the following.</li>\n</ul>\n<p>The <em>remove</em> part was important, because I wanted to reduce the noise in my Twitter Home. And move all the content to private lists.</p>\n<p>This way, I could declutter my Twitter Home. I only see my tweets there now. Lists are the place for domain specific content. And they have a hidden feature - it&#39;s actually not, but I see is a feature - they don&#39;t run ads in private lists. I gain focus and more focus. Only the content I <em>subscribe</em> for.</p>\n<p>As an introvert, I don&#39;t really like to be with people all the time. I always need my time alone and do all my things in my own way.</p>\n<blockquote>\n<p><em>Looking for progress is essentially looking for pleasure. It is the pleasure of self-image, which says, “I’m in a better place now than I was before.”</em> — Kapil Gupta</p>\n</blockquote>\n<p>Like social media, people can also be toxic or just uninteresting. I don&#39;t want to be in a circle of people that just blame life about everything and don&#39;t act to change their own situation. I don&#39;t want to be in a toxic network that everybody is the victim. I want to be with lifelong learners that want progress and will build the future. People that are excited about innovation and science. Curious humans that want to learn everything and understand how the system works.</p>\n<p>But I don&#39;t need to find these people. First I need to be one of them. This needs to be part of me and we all get together along the way. What about the toxic people? Just snooze them.</p>\n<p>For my life, writing has been a great tool to make everything clearer. It&#39;s my daily habit. I do journaling, but not every day. The goal is mental clarity and I&#39;m using this tool to get to this point. I write for my software engineering blog. The goal is knowledge sharing. I love this. It is my life mission to share and make knowledge open and accessible to everybody.</p>\n<p>Now I&#39;m trying to do a different thing: long and timeless essays. I know they aren&#39;t going to be great at first, but it is a process. I&#39;m writing mostly for me. I have so many thoughts in my mind and it is always fuzzy. I use writing as a tool to translate my thinking process into well-organised ideas, and them I&#39;m able to communicate them in a compelling way - or I like to think that at least I have the chance to do that.</p>\n<p>The <em>spiritual</em> part is a work in progress. I tend to focus too much on my skills and technical things. Most of the time I miss my mental health. And this is a huge problem. I&#39;m studying more about this topic and also doing therapy. As it is a work in progress, I want to get more time to illustrate things I&#39;m working on and how I&#39;m improving in spiritual terms.</p>\n<h3 id="projects">Projects</h3>\n<blockquote>\n<p>_“One thing we do know: Life will give you whatever experience is most helpful for the evolution of your consciousness.” _ — Eckhart Tolle</p>\n</blockquote>\n<p>Projects enable me to be creative, try new things, and grow. For most things I wanted to accomplish, projects were an excellent tool to achieve them. If I want to try and understand new technology, I can use projects as a Proof of Concept (PoC). I can use projects to manage my digital bookshelf, what I am reading, my notes, highlights. If I see that I can improve my process, I build <a href="/publisher-a-tooling-to-automate-the-process-to-publish-my-blog-posts">tools to automate it</a>.</p>\n<p>I think you got the idea.</p>\n<p>I just want to stop a little moment to add some notes on <em>goals</em>. I always liked goals, but they are just <em>what</em> and not <em>how</em>. This is why I put most of my time on systems.</p>\n<p>But goals are very good to give me a perspective of my future. I think of goals not about what I want, but who I want to become. It is a subtle difference. Goals are also a good first step to understand why I want this or that. Do I want to work as a software engineer because of the money - and only that - or I want to be a software engineer because I really like to build things?</p>\n<p>Don&#39;t get me wrong, there is nothing wrong to earn a good amount of money, I also like this part. But I have a different vision of my <em>why</em>. When I have a deep understanding of my <em>why</em>, it gets crystal clear to me. It also builds inspiration and motivation along the way. And it is truly important to me, because I know I&#39;m playing the long game. It&#39;s a marathon, not a sprint.</p>\n<p>I want to be remembered as a lifelong learner. A person who strives to learn and share knowledge. But not only share, but also advocate for open and accessible knowledge. It shouldn&#39;t be a privilege of few. It should be free for everyone.</p>\n<p>Here, I can talk more about how I learn and how I share and detail the system behind it.</p>\n<blockquote>\n<p><em>“I&#39;m still learning”</em> — Michelangelo</p>\n</blockquote>\n<p>I wanted to improve my whole learning process, making this a better experience and more conscious.</p>\n<p>As I&#39;m learning about myself and how my body and mind work, I&#39;m designing my learning process based on those things.</p>\n<p>What&#39;s the best way to learn? The short answer is: I don&#39;t know. I think we don&#39;t have the right answer for every person on earth. But if I designed the learning experience exclusively for myself, I think I had a chance.</p>\n<p>To understand what works and what doesn&#39;t, I needed to try different methods as experiments: podcast, articles, videos, courses, university, doing projects, books, etc. We have a bunch of resources and ways to learn.</p>\n<h3 id="what-works-for-me">What works for me?</h3>\n<ul>\n<li><p><strong>Podcast</strong>: I use it as a distraction tool when commuting, running, and playing video games. I like to listen to discussions on technology and experiences in tech. I tried to use it as a learning tool but I always get distracted. So now, for example, if I want to learn React Hooks, I don&#39;t listen to a podcast to learn Hooks. I prefer reading the docs (which is pretty good!). But if I want to learn how different teams/companies scale React, a podcast can be a good fit.</p>\n</li>\n<li><p><strong>Articles</strong>: I love learning through reading articles. I tend to collect a bunch of different articles on one topic and read all to have a deep understanding of different perspectives. When I was learning JavaScript concurrent model with Promises, I got about 10 different articles to go deep in this subject. It&#39;s also good for spaced repetition in my learning process. For example, if I want to learn JavaScript Promises, I read the first 3 to 4 articles in the first place and do some experiments (a.k.a. practice, code!). In the following days/weeks, I read other articles to have other perspectives or to just remember the concept.</p>\n</li>\n<li><p><strong>Videos &amp; Courses</strong>: When I started learning to code, videos were a big part of my learning process. As a visual person, I like to understand the concepts by seeing the code. It was also good because I watched a lot of tutorials. But nowadays, I don&#39;t watch a lot of videos, I tend to watch tech video as an entertaining+educational content like fun fun function and Joma Tech. Specific for courses, I tend to like more educational platforms like Udacity that mixes theory (concepts) and practice (coding).</p>\n</li>\n<li><p><strong>University</strong>: So let&#39;s skip this part... kidding! Hmm.. I&#39;m a bit skeptical about universities. I tried it, but I realized that the &quot;way of learning&quot; was not the best for me. I didn&#39;t fit in. A class of 30 people passively listening to a professor for 40 minutes. I like to be active, I like to question, I like to do experiments and practice. It didn&#39;t work for me. Maybe it works for you. This is why be self aware is so important.</p>\n</li>\n<li><p><strong>Projects</strong>: I love doing project-based learning. I&#39;m doing a lot of this recently. When I was learning functional programming, I tried many different projects (PomoLambda, Luhn, Year Progress Bar). When I was learning React Hooks, I did some experiments to understand the concepts by building a mini pokemon &quot;game&quot;. When I was learning JavaScript concurrent model with Promises, I also tried different things. When I wanted to fix my struggles with CSS, I created the UI Challenges project. I think you got the idea.</p>\n</li>\n<li><p><strong>Books</strong>: Books are a big part of my learning process. But I&#39;m a slow reader. I like to take notes, organize my thoughts, and understand the details. And I know that I&#39;m too curious about a lot of different things, so the challenge to me is to keep it up, to be consistent, and finish the books. Having this in mind, I&#39;m trying something different: reading 3 books simultaneously. A biography or something about self-development (Mastery). A technical one (SICP: Structure and Interpretation of Computer Programs). And a career one (The Effective Engineer). This is how it&#39;s working for me. ¯(ツ)/¯</p>\n</li>\n</ul>\n<p>So here we have a ton of resources and ways of learning. Basically my mindset is like a laboratory. Make experiments, try new things. But understanding what works for me. Asking myself how do I learn best? Which resources I really engage in and get the most of it? Keep in mind it doesn&#39;t have any rules. Actually, you make the rules. You understand yourself, you understand the resources, and make the decision to keep it up with the best way of (your) learning.</p>\n<blockquote>\n<p>_“Be curious. Read widely. Try new things. What people call intelligence just boils down to curiosity.” _— _ _Aaron Swartz</p>\n</blockquote>\n<p>Now I divide my time in my three main resources: articles, projects, and books.\nI have my own time to keep reading books, as I told you my experiment to read three books at the same time with different topics. I read daily now, like 30 minutes to 1 hour. My goal is to make it consistent.</p>\n<p>Articles I read once in a while, when I want to go deep in a topic, understand the theory and the concepts. I like to do a linked list of articles (or maybe a priority queue) and organize by topics to study later.</p>\n<p>The projects are the resource I spend most of my time. This is the way I practice. The way I get the concepts I learn and make it live. The way I do experiments. The way I think deeply about the concepts.</p>\n<p>With all these resources I can build a <em>learning path</em>. It&#39;s basically a linear path with each resource linked to each other. This way I can understand what is the next step (read one more article or do a project?). And even though the path is linear, it doesn&#39;t have rules, it&#39;s flexible to change. The whole idea is to give me visibility of the learning process.</p>\n<p>With everything I read, watch, and learn, I like to add notes and document my experiences. These notes are the first draft to write the next blog posts. I have a blog roadmap on Notion. In this board, I have the <em>Draft</em> column, where I can add all the drafts I&#39;m working on. After compiling all the notes in the draft, I can start writing the post based on these ideas.</p>\n<p>With the notes, I try to remove the friction to start writing. As I already have all the notes, ideas, and bullet points in the draft, I just need to reorder and organize. Then I review, refine, and publish it.</p>\n<p>I wanted to make this process simple to focus on sharing knowledge. This is the main goal. I want to document my learnings. The blog is my voice on the internet. Writing is one of my passions. And I like it more because it is an excellent tool to distribute knowledge for everybody.</p>\n<p>In the future, I want to try different media. Do livestream on Twitch, Youtube videos, podcasts, and so on. But now I want to focus on my writing.</p>\n<p>These days I came across an interesting video about <a href="https://www.youtube.com/watch?v=wCPbPMRNnvk"><em>Should You Specialize or Be a Generalist?</em></a>_ _ by Tim Ferriss. He talks about the idea of a Specialized Generalist. Combine a handful of skills that are rarely combined.</p>\n<p>I also read an interesting idea from the book Originals where he talks about the concept of building a unique combination of broad and deep experiences and how this is critical to creativity. He tells about this study:</p>\n<blockquote>\n<p><em>&quot;In a recent study comparing every Novel Prize-winning scientist from 1901 to 2005 with typical scientists of the same era, both groups attained deep expertise in their respective fields of study. But the Novel Price winners were dramatically more likely to be involved in the arts than less accomplished scientists.&quot;</em> — Adam Grant</p>\n</blockquote>\n<p>Reading and watching these interesting ideas, I&#39;m also trying to broaden my skills. I always have a bunch of different hobbies. But now I want to double down on them and get more time to dedicate to these hobbies.</p>\n<ul>\n<li><strong>Sports</strong>: I like to run and table tennis. I really want to start tennis in the near future. I also want to get back to play <a href="https://www.youtube.com/watch?v=ojhbnndvkBI">Taiko</a> as the old days of my life. (Taiko could be in all three different categories, it is an art, a sport, and music).</li>\n<li><strong>Arts</strong>: I always love drawing. It was my first hobby as far as I remember. I don&#39;t do this every single day, but it is something I really like. In the future, I will definitely learn Sumie painting and Shodo.</li>\n<li><strong>Music</strong>: 10 years ago I started learning to play guitar. But I stopped for a long time. This year I bought a guitar, an electric guitar, and an amplifier. I do my guitar practices 5 times a week. To give you an idea, I have a very wide taste for music. At the same time I want a piano do learn classical music, I will buy a launchpad to do some LoFi music with my guitar.</li>\n<li><strong>Languages</strong>: Languages are a beautiful thing. I came across a TED talk, where Lera Boroditsky tells how language shapes the way we think. It opens a whole new universe of ways of thinking. It&#39;s also great because it is so aligned with the culture, the people, and the nation. One of my goals was to get better at English, so I always forced myself to write all my essays in this language. I started learning Japanese again. After my Japan trip, I got passionate about the culture, the people, and the language again. If I get some time, I want to learn other Asian languages like Korean and Thai.</li>\n</ul>\n<p>These are what I&#39;m currently doing. But I have a bunch of different things I want to do. Videography and Photography are a thing that I want to try and master in the near future.</p>\n<p>First, I do because I like it. They are my hobbies. But second, because I feel more creative, it&#39;s like using my brain in different ways.</p>\n<p>It&#39;s a social construct when society puts you in a <em>&quot;box&quot;</em>. If you are an engineer, you are good at STEM but don&#39;t know anything about arts and humanities. For me, it&#39;s bizarre that people believe in this. I see everything connected. People like to add non-sense boundaries. But I don&#39;t care about this status quo. I will do my own thing, the way I want.</p>\n<h2 id="final-thoughts">Final Thoughts</h2>\n<p>I&#39;m learning a lot with all this process. I want to add my final thoughts by pointing out some learnings I had along the way.</p>\n<ul>\n<li>Self awareness is so important. Take a moment to reflect on your life and you as a person. Meeting new interesting people is awesome. But know yourself in depth will change your life. There are so many ways to get it works, but you probably have your own way. The way that works for you.</li>\n<li>Simplify as much as possible. Don&#39;t try to do all things at the same time. Start simple. It will make so much easier to keep going and improve along the way. Simplicity is the goal.</li>\n<li>Use goals as a direction. But build systems and habits to accomplish them. Goals are about <em>what</em>. Systems are about <em>how</em>.</li>\n<li>Think deeply about your own life and who you want to become. You won&#39;t have all the answers in the first place. It is a long journey, learn through the process.</li>\n<li>Habits are also about removing or reducing. Think which things in your life are toxic. People, environment, city, work, projects, social media. Snooze things that are not healthy for you.</li>\n<li>Mental clarity is so important to me. It gives me, well, clarity. Writing, journaling, sleeping well. These are the things that make my mind clear and rest to perform my best work.</li>\n<li>If you want to play the long game, you need to start focusing on your health. Spiritual, mental, and physically healthy. Learn about it. Knowledge is the first step to great decisions.</li>\n<li>Doing other hobbies - that are not related to my work - makes me so creative and with a broad experience.</li>\n<li>Projects are a good tool to learn. The blog is a great way to share knowledge.</li>\n</ul>\n<p>I hope you had a great time reading this piece.</p>\n',
  },
  {
    title: 'DX & Software Maintainability in Frontend Engineering',
    content:
      '<p>In the last quarter, I was assigned a big project to work on. Our main goal was to understand the biggest problems and technical challenges we have in our current frontend application and build a thorough vision of how we can move forward.</p>\n<p>I&#39;ve been doing a lot of work on frontend engineering and backend for frontend (BFF) applications and I had an accumulated experience of what problems I could work on. But before start executing (like crazy!), I wanted to make the goal clear and set principles for that project.</p>\n<h2 id="goals">Goals</h2>\n<h3 id="improve-and-enable-better-user-and-developer-experience">Improve and enable better user and developer experience</h3>\n<p>This role gave me a lot of autonomy to execute the project in my own way. I liked the idea of balancing execution (improve) and exploration (enable).</p>\n<p>DX and UX are one of the core principles I followed to act on the most impactful challenges. Improving DX makes our engineers move faster, increase their productivity to work on business projects, and ship products without (much) friction. Improving DX also can enable better UX as engineers are moving fast to ship product features, find bugs and easily fix them and focus more on the business part of coding.</p>\n<h3 id="build-a-vision-and-how-we-can-move-forward">Build a vision and how we can move forward</h3>\n<p>For this specific project I worked &quot;alone&quot;, I didn&#39;t have a squad, but a group of people I could use their support. Thinking about that, it would be impossible to organize my time to explore the problems and technical opportunities and execute everything.</p>\n<p>Big challenges require time and effort. As people in the tech industry usually say: &quot;Software development is a team sport&quot;. My goal was not to get some time to solve all problems but to show possible solutions, understand the effort needed to execute these solutions, and build a vision to show how we can move forward.</p>\n<p>The vision can be built in a documentation format. But part of my goal was also to create space to discuss, build the culture, and enforce the ideas in our actions while building software.</p>\n<h2 id="principles">Principles</h2>\n<blockquote>\n<p>&quot;Engineering principles realize our values in concrete concepts and guide everyone in a fair and structured way.&quot; - Ilya Kozlov</p>\n</blockquote>\n<ul>\n<li>Root for simplicity</li>\n<li>Work on what matters</li>\n<li>Share knowledge &amp; Transparency</li>\n</ul>\n<blockquote>\n<p>&quot;Simplicity is prerequisite for reliability.&quot; - Edsger W. Dijkstra</p>\n</blockquote>\n<p>All these principles are interconnected to the work I did in this project. To reduce the system&#39;s complexity, I needed to always think of the simplest way to (re)build the software. When striving for simplicity, we ease our understanding of the software, making it easier to maintain, because it&#39;s simpler to change, debug, and refactor.</p>\n<p>So, simpler systems have a real impact on the developer experience and productivity. And this is really connected to the &quot;work on what matters&quot;. I could start refactoring all code I wanted, but it could have little or no impact on the developer&#39;s productivity. Focusing on the developer experience that enables better user experience was my goal and a great variable when thinking in prioritization of what I should work on.</p>\n<p>As a &quot;one-person team&quot;, I understood that if I really wanted to have a real impact in the organization, I needed a better way to scale the knowledge and the vision. From day 0, I had a Notion page representing the project with everything I was doing documented: backlog, meeting notes, goal &amp; principles, weekly report. Transparency and accessibility were part of the vision I wanted to build with this project together with incremental knowledge sharing throughout the entire quarter.</p>\n<h2 id="starting-up">Starting up</h2>\n<p>Before start working on this project, I worked on other 4 different products at QuintoAndar. They were all different in terms of business contexts and clients, but very similar when it comes to tech stack and technical challenges.</p>\n<p>Over time, I noticed the similarities and started to document the same technical debts, <a href="/react-hooks-context-api-and-pokemons">reimagining future architectures</a>, <a href="/building-an-abstraction-for-react-internationalization-messages">building abstractions</a> that could be reused across the organization, proposing new ways to handle <a href="/thinking-in-data-contracts">data contracts</a> and <a href="/consistent-state-management-in-react-and-redux">consistent state management</a>, build <a href="https://github.com/imteekay/laziness">tools to improve DX</a>, etc.</p>\n<p>They were all frontend engineering challenges I encountered on my way by building different products. It was a good starting point to have these initial ideas in my backlog to start exploring. But it was very limited.</p>\n<p>I also start sketching the engineer&#39;s workflow:</p>\n<img src="/dx-and-software-maintainability-in-frontend-engineering/dx.png">\n\n<p>From getting the Jira ticket to deploy and taking a look at the monitoring system, we had a lot of opportunities to improve and make the dev experience awesome. It&#39;s great to have the big picture&#39;s vision, but I also wanted to focus on another powerful tool: listening!</p>\n<blockquote>\n<p>&quot;Listening through questions is a form of active listening with the goal of understanding the rest of the room&#39;s perspectives&quot; - <a href="https://lethain.com/learn-to-never-be-wrong/#:~:text=Listening%20through%20questions%20is%20a,to%20ask%20their%20own%20questions.&amp;text=They%20sharpen%20the%20conversation.">@lethain</a></p>\n</blockquote>\n<p>To improve the developer experience, I needed to understand the real problems the engineers were facing, so I scheduled a brainstorming meeting. In this meeting, I explained my project and shared a <a href="https://metroretro.io/">Metro Retro</a> board to write down all issues our application had at that time, what was the bad DX we had, and doubts related to this application (e.g. how do we handle data fetching?; how do we handle error handling?; how do we know if our application is health?).</p>\n<p>With all these ideas - actually, &quot;issues&quot; - I could organize, improve, and prioritize my backlog.</p>\n<p>Besides those issues, one thing that came to my mind was that I (and the team) needed to be able to refactor a lot of code to improve the software quality and pay tech debts.</p>\n<p>To enable refactoring, I added 2 &quot;tasks&quot; to my backlog:</p>\n<ul>\n<li>Frontend Testing: how should we test frontend &amp; add tests to make our team more confident when deploying new features.</li>\n<li>App Monitoring: as an organization, we have many different tooling that could help us monitor our application. I wanted an easy way to answer three questions:<ul>\n<li>Is the application health?</li>\n<li>How to use tools to help us debug bugs?</li>\n<li>I deployed a new feature, where should I look at?</li>\n</ul>\n</li>\n</ul>\n<h3 id="tests">Tests</h3>\n<blockquote>\n<p>&quot;Quality must be enforced, otherwise it won&#39;t happen. We programmers must be required to write tests, otherwise we won&#39;t do it.&quot; - Yegor Bugayenko</p>\n</blockquote>\n<p>Together with the Quality Assurance team, we add a lot of integration tests using Cypress to the most important workflows in the PWA. Running these integration tests in our CI for each Pull Request helped us a lot in having the confidence to ship features, refactorings, and dependencies upgrades.</p>\n<p>I was also working on some studies related to component tests with the testing-library. Our codebase was heavily using Enzyme for most of the tests we have for React components. As we wanted to test more user behavior instead of the component structure, we started to replace Enzyme and add testing-library kinds of tests for new features and components.</p>\n<p>As we didn&#39;t have much experience nor knowledge of the best way of how to use it, I started learning it, writing tests as examples, document all my learning, and improving our test setup.</p>\n<p>I started writing simple <a href="/basic-recipes-for-react-testing-library">recipes to use the testing-library</a> and about <a href="/tdd-functions-and-react-components">testing-driven development in React</a>. Then I wrote tests for different use cases: query elements, expecting content, user behavior (click, focus, etc), custom hooks, better setup for components using redux.</p>\n<p>The idea behind this was to make the tests very easy to implement and improve all the pain points. This study&#39;s final result was a set of tests as examples and a wiki in our Github project to guide <code>How to test the frontend</code> that covers integration tests, custom hooks, component tests, using the redux store, etc.</p>\n<h3 id="monitoring--observability">Monitoring &amp; Observability</h3>\n<blockquote>\n<p>&quot;Originally the feedback loop was you would break stuff, people would yell at you, and then they would praise you when you fixed it, but then the Internet became a thing and our systems got more complicated.”</p>\n</blockquote>\n<p>Our old way to deploy was creating Github release tags. With all these tests I mentioned earlier, we had the confidence to change the release tag to <code>deploy on PR merge</code>. Now we are running full CI/CD.</p>\n<p>For the monitoring systems, we had a lot of different possibilities, but we are using mostly Sentry to make the most out of the error tracings to find bugs, debug, and fix them. We are also using Instana to keep up with the API endpoints the PWA uses. Together with the product manager, we consistently take a look at the Amplitude trackings to make sure our users can use our product</p>\n<p>Disclaimer: Amplitude is definitely not a tracing tool, but it&#39;s nice to keep up with the user&#39;s behavior and see some weekly patterns to find issues.</p>\n<p>One of our users&#39; worst experiences in our application is when they are using the product and a drawer (our error boundary) shows that they had an error.</p>\n<p>To make it distinct in the Sentry logs, we added the &quot;fatal&quot; level for these errors that occurs and trigger the Error Boundary (drawer). When shipping a new feature, we can look at this kind of error by filtering by level <code>fatal</code>.</p>\n<p>Now we have toolings to help us verify the health of our systems. But this project aimed to improve the developer experience and I wanted to reduce the cognitive load even more, so I created a Github wiki with all the important links for the Sentry, Instana, and Amplitude dashboards.</p>\n<p>Before, the engineers would need to open each dashboard and make their own queries, but now it&#39;s easy to access the most important metrics we want to see: open the Github wiki and they are all there.</p>\n<h2 id="foundation--tooling">Foundation &amp; Tooling</h2>\n<blockquote>\n<p>&quot;We want everything we offer to be easy to adopt. The simpler a tool or workflow is to adopt and use.. so that our users have a great out-of-box experience.&quot; - Lei Zhang</p>\n</blockquote>\n<h3 id="formatting">Formatting</h3>\n<p>The codebase lacked formatting consistency. We were using only eslint to lint the code and break the build process if it finds any lint error. But each engineer has their own code style, so the codebase starts to become very inconsistent.</p>\n<p>Now we are using a <a href="https://prettier.io/">code formatter called Prettier</a>, it&#39;s an opinionated formatter, and all our codebase and PRs are consistent. We can focus on the business part of development and code reviews instead of being distracted by the format issues.</p>\n<p>We also had a problem that we pushed code to the github remote and the eslint break the build. To avoid breaking only in the build process, we break it as fast as possible to have no need to wait for the CI build.</p>\n<p>Now we are using <a href="https://github.com/typicode/husky">husky</a> to run eslint in each commit&#39;s changed files and format with prettier in the pre-commit. It helped us be more productive and fix things faster and before pushing to github.</p>\n<p>I had one learning experience while adopting Prettier for legacy software to run prettier. My first idea was to scale the prettier use for each PR, but it was not a good experience because sometimes the engineer only needs to fix a line of code, but prettier would format the entire file and make it really difficult to code review.</p>\n<h3 id="pr-template">PR Template</h3>\n<p>The Pull Request template was a bit outdated so I did a revamp to have only the necessary things to create a new PR. It&#39;s not required, but we have a description section, type of change, a checklist to help engineers be aware of all technical details we need to take a look at before shipping a new feature, and screenshots if needed.</p>\n<h3 id="performance-tooling">Performance tooling</h3>\n<p>My latest project was very related to web performance (I also wrote about this experience: <a href="/optimizing-the-performance-of-a-react-progressive-web-app">Optimizing the Performance of a React Progressive Web App</a>). But I was only using lab metrics. I wanted to start collecting metrics related to real users as well. This would enable us to see if we have any performance issues for our users and tackle that problem.</p>\n<p>We have an internal tool to handle the RUM (Real User Metrics), so I set up the tooling our PWA to start collecting these metrics. And also started to measure the navigation between pages. One of our main users flows is house registration, so adding navigation metrics would have a huge impact if we find any issue and fix it.</p>\n<h3 id="dependencies">Dependencies</h3>\n<blockquote>\n<p>&quot;We strive to maintain minimalism and clarity to drive development to completion.&quot; - Suckless Philosophy</p>\n</blockquote>\n<p>Minimizing <a href="https://www.youtube.com/watch?v=5kk_Ng7weuE">software bloat</a> and rooting for simplicity and minimalism in software was my way to improve the dev experience. In the JavaScript ecosystem, it is very common to have a dozen different libraries that do the same things and other dozens that are borning daily. It&#39;s also usual to have many packages in a JavaScript project, even if it isn&#39;t really used or replaced with a smaller library or implemented in-house.</p>\n<p>I started to explore all the dependencies, which ones I should take a closer look at, which ones I could upgrade and would enable new possibilities for us, and which ones I could just remove.</p>\n<p>I could remove a ton of libraries that were not actually being used and it also pointed me to some old and dead code, they were basically features that were not being used by users or dead components that were there in the codebase. Overall, I could remove <strong>10,200 lines</strong> of code.</p>\n<p>Some other big packages like webpack, babel, and immutable were in my backlog to plan how I could upgrade everything. At that time, we had a team working close to the immutable removal (we&#39;re striving to not use any library or <a href="https://github.com/immerjs/immer">immer</a> if an engineer prefers), so I let this library to their team to work on. And we also had a team experimenting with NextJS in some projects, so bumping webpack and babel could not be worthy, so I make this task less of a priority at that time.</p>\n<p>Other libraries that upgraded would improve our dev experience and enable us to use interesting APIs like TypeScript and react-redux.</p>\n<p>Bumping react-redux enabled us to use hooks together with redux, removing all the <code>mapStateToProps</code> and <code>mapDispatchToProps</code> boilerplates. Even though we are moving away from Redux (testing out react-query for server cache and hooks for client state), the codebase is heavily using it to handle state. Using hooks together with Redux became simpler to handle state and reduced the need for a lot of boilerplate code.</p>\n<p>We don&#39;t use TypeScript heavily in our codebase yet, but upgrading it to 3.9 was easy and enabled us to use any new features from it mainly in the interface between our frontend and our backend for frontend (BFF).</p>\n<h2 id="work-on-what-matters">Work on what matters</h2>\n<blockquote>\n<p>&quot;To build scalable and maintainable frontend systems, we need a strategy for managing and organizing the complexity that exists in the user interface.&quot; - Safia Abdalla</p>\n</blockquote>\n<p>Listening to the team that was heavily working on this codebase, I could understand some parts that had a lot of complexity that I could work on to make simpler and improve the developer productivity and experience.</p>\n<h3 id="house-registration-and-edition-complexity">House Registration and Edition complexity</h3>\n<p>In this codebase, we have the house registration flow for landlords, but the code modules were reused for the edition flow as well. In the beginning, it started with good intentions to reuse the same abstraction, but over time it became more and more complex and coupled.</p>\n<p>The number of <code>if</code> statements were the first thing that pointed me to this problem. The second was related to the consistency of bugs that was happening in this flow. With the increase of complexity, the tests (manually and automated) didn&#39;t cover everything, it was very easy to add features that could break any part of this flow in the product.</p>\n<blockquote>\n<p>&quot;With great complexity comes great bugs and even greater maintenance burdens.&quot; - Safia Abdalla</p>\n</blockquote>\n<p>Separating the modules and reusing only the components and some auxiliary helpers would reduce the complexity of each module. I created a migration strategy document organized in &quot;Problems&quot;, &quot;Architecture&quot;, and the &quot;Plan&quot; to execute it.</p>\n<p>Bringing clarity to the team about the vision and how we could solve this problem was the first step to execute the migration. Making everyone understand the problems and the steps to refactor help scale the migration. Every person that would touch that code, could look at it with new eyes and refactor it if possible.</p>\n<p>We are still in the process to finish the refactoring, but now we have an optimistic vision that we&#39;ll incrementally solve this problem and improve the developer experience.</p>\n<h3 id="ddd-architecture">DDD Architecture</h3>\n<p>In frontend applications, it&#39;s not that common to follow Domain-Driven Design, but in our context, we started to rethink our applications and how we could make them more organized and easy to reason about.</p>\n<p>The current state of our PWAs is using <code>components</code> and <code>containers</code> folders to organize shared components and pages. Some helper functions were in big <code>utils</code> files or folders, which became difficult to find and reuse.</p>\n<p>The first step was to understand what were domains</p>\n<img src="/dx-and-software-maintainability-in-frontend-engineering/ddd.png">\n\n<p>This was the first draft of the domain I designed looking at the product and the codebase. For each domain, I added a simple description to make it clear to everyone what was each one.</p>\n<p>The same way I did for the registration and edition modules split, I did for this DDD Architecture: create a document to illustrate the problem I was solving, the vision, and the strategy to make it happen.</p>\n<p>To make it very clear, I mapped each file/folder in the codebase to the new architecture in the document. It was not an exhaustive mapping, but it brought a lot of clarity to start refactoring the codebase.</p>\n<p>Among all explorations I did, this is the one that we could really do incrementally over time without the need to stop everything and focus on that for 2 weeks. This is why I started to refactored it to bring some examples on how to it and scale the knowledge to every engineer in the team.</p>\n<h3 id="interface-between-backend-and-frontend">Interface between backend and frontend</h3>\n<p>One of the goals for the future is to have a layer between the PWA and the OwnerappAPI to <a href="/thinking-in-data-contracts">make the data consistent using TypeScript</a>.</p>\n<p>We are experimenting with TypeScript in our Backend for Frontend (BFF) to have better and explicit types for each payload. And also in the frontend. <a href="/a-mental-model-to-think-in-typescript">I&#39;ve been studying TypeScript</a> and got to understand the real benefits of applying it to the <a href="/consistent-state-management-in-react-and-redux">state part of the frontend application</a>, but also in the <a href="/ux-studies-with-react-typescript-and-testing-library">UI part</a> by replacing the <code>PropTypes</code> with &quot;compile-time&quot; types.</p>\n<p>It&#39;s an initial thought yet, but an idea is to have a common repository of types to reuse it between the PWA and the BFF. With this package of types, we can make the interface really consistent. But at the same time, we can add a level of bureaucracy that makes us slower in shipping features. It&#39;s a tradeoff that we need to think about before implementing it. But this is just an idea for the future.</p>\n<h3 id="owner-landing-page-dx-issue">Owner Landing Page DX Issue</h3>\n<p>To give context, we have a different kind of development when talking about our landing pages. We use React to develop them, but we have tooling that removes the react code and library in build time.</p>\n<p>Every time we want to test if the landing page is correct - in terms of UI and functionality - we need to run the build process or push the new feature to the test environment, which takes about 18 minutes. Even though we have a &quot;static&quot; landing page without React, the developer experience was suboptimal.</p>\n<p>This was actually an issue brought by all engineers that worked in this codebase last quarter. We knew the pain that was to build new features for landing pages.</p>\n<p>It started as an exploration to think about which solutions I could come up with. We could work with a static site generator like <a href="https://www.11ty.dev/">11ty</a>, but we only have a design system for React application. This would increase the complexity to rebuild the entire landing page and make space to design inconsistencies.</p>\n<p>Another approach was to use NextJS in the project as the default framework and serve the landing pages with SSR. The last approach was to split the landing page from the main application and use NextJS from scratch. This last approach was very interesting for us because the landing page is a living thing that many teams can work on and it shouldn&#39;t be coupled with the rest of the application. This strategy would also decrease the build time for each PR and production deployment as we didn&#39;t need to run the tests, lint, and build tool for the landing page in the application&#39;s CI build.</p>\n<p>In this exploration, I also created a document with all possible solutions, the effort and time we needed to rebuild this landing page, the tradeoffs, and the steps for each solution.</p>\n<h3 id="error-handling--data-fetching">Error Handling &amp; Data Fetching</h3>\n<p>Most of the errors we handle for each request are by using a high order component called <code>withDialogError</code> to provide and open an error dialog when the request returns an error.</p>\n<p>Using this approach made it very coupled to the container and Redux because of the way we need to pass data down to the high order component.</p>\n<p>When we don&#39;t handle errors for a given request, we don&#39;t have the data, and it can get us the famous:</p>\n<pre><code class="hljs language-bash">Uncaught TypeError: Cannot <span class="hljs-built_in">read</span> property <span class="hljs-string">&#x27;a&#x27;</span> of undefined\n</code></pre>\n<p>With our <code>ErrorBoundary</code>, it gets this exception and opens a drawer kind of page showing a friendly (but generic) message about the current error. Looking at the fatal errors in Sentry, I understood the correlation (and sometimes causation) with the missing error handling.</p>\n<p>I started to redesign the way we handle the errors to remove all the Redux boilerplate and how the error dialog was coupled to the Redux container. Instead of using a high order component, it would be easier to reason about if it was just a declarative component that we add to the page and it receives the correct props to open and show the necessary content and action buttons.</p>\n<p>To make the error dialog works properly, I needed to be able to always provide if it is open or not (basically an <code>isError</code> from a request-response), the content (specific for each request/page), and the possibility to refetch/re-request with an action button.</p>\n<p>This discovery made me rethink how we handle data fetching - today using Redux - and I started a new exploration looking for new ways to do data fetch stuff, state management, and improve the developer experience of handling errors.</p>\n<img src="/dx-and-software-maintainability-in-frontend-engineering/error-handling-and-data-fetching.png">\n\n<p>I started by designing the best experience when it comes to data fetching and then I thought of an abstraction to be able to use it in all codebase. But instead of implementing the best abstraction, I started to search for a solution. Well, data fetching is a common challenge in all kinds of frontend applications and we actually have nice alternatives in the community (<a href="https://react-query.tanstack.com/">react-query</a>, <a href="https://swr.vercel.app/">swr</a>).</p>\n<p>I created some Proofs-of-Concept (PoC) to handle use cases using react-query. The result is pretty interesting. The way react-query handles cache and revalidation and separates client state and server cache is pretty interesting and it also enables us to rethink state management in our frontends. It could be the way we handle data fetching in our PWAs and I started to share this exploration across the organization.</p>\n<h2 id="scale--culture">Scale &amp; Culture</h2>\n<blockquote>\n<p>&quot;If You Want to Go Fast, Go Alone. If You Want to Go Far, Go Together.&quot;</p>\n</blockquote>\n<p>When my manager talked to me about this project, I realized it was a technical leadership role. I was given the opportunity and a lot of autonomy to explore different technical and product issues, understand the pain points that made engineering processes slower and build a vision to make the team move forward.</p>\n<p>As I wrote in the beginning, sharing knowledge and transparency were principles I wanted to follow in the entire project. I have a Notion page with everything about the project: roadmap, backlog, goals &amp; principles, documented discoveries, meeting notes, etc. Everything there, open, and easy to access and find information.</p>\n<p>Have an open page to give visibility to the entire organization was the first step, but I also wanted to be very intentional about the project. I had the opportunity to talk about what I was working on 3 times a week in the team&#39;s daily meeting, I had weekly engineering syncs with the engineering leadership.</p>\n<p>For each exploration I did, it was all documented and shared with the team. With the draft idea, I could call a meeting with engineers to explain the exploration, the problem I was working on, and open for discussions and questions.</p>\n<blockquote>\n<p>&quot;The act of asking good questions with good intent opens up a conversation, creating space and safety for others to ask their own questions.&quot; - Will Larson</p>\n</blockquote>\n<p>With these meetings, I could make three things happen:</p>\n<ul>\n<li>Give visibility of the problem, possible solutions, and a vision.</li>\n<li>Give space for them to ask or share opinions and be part of the vision.</li>\n<li>And refine the solutions and vision.</li>\n</ul>\n<p>As Kevan Lee said: &quot;Transparency starts as a mindset change&quot;. I wanted to be intentional in terms of transparency and give them space and accessible documents were the ways I found to make them part of the whole process.</p>\n<h2 id="final-words--resources">Final words &amp; Resources</h2>\n<p>I learned a lot throughout this project. It was for sure one of the most challenging projects I did in my career and I had a lot of fun studying, learning, applying my knowledge, thinking in strategy, communicating as a leader, and enjoying the opportunity to work on developer experience and software maintainability.</p>\n<p>Throughout the project, I used some resources that I want to share with you all. It&#39;s not a prerequisite to manage a project like this, but these resources helped me a lot.</p>\n<h3 id="software-maintainability">Software Maintainability</h3>\n<ul>\n<li><a href="https://www.infoq.com/presentations/Simple-Made-Easy/">Simple made easy</a></li>\n<li><a href="https://www.youtube.com/watch?v=TqfbAXCCVwE">Building Resilient Frontend Architecture</a></li>\n<li><a href="https://www.youtube.com/watch?v=seU46c6Jz7E">React Query: It’s Time to Break up with your &quot;Global State”</a></li>\n<li><a href="https://increment.com/frontend/on-composable-modular-frontends/">On composable, modular frontends</a></li>\n<li><a href="https://www.crthomaz.com.br/posts/independence.html">On choosing independence… for a software developer</a></li>\n<li><a href="https://www.youtube.com/watch?v=EeV2hVtKetk&amp;ab_channel=BrazilJS">Surviving death by complexity</a></li>\n<li><a href="https://leaddev.com/technical-direction-strategy/embracing-simplicity-your-engineering-team">Embracing simplicity in your engineering team</a></li>\n<li><a href="https://leaddev.com/technical-direction-strategy/scaling-held-knowledge-unblock-teams-and-untangle-software-complexity">Scaling held knowledge to unblock teams and untangle software complexity</a></li>\n<li><a href="https://leaddev.com/legacy-technical-debt-migrations/implementing-plan-clean-technical-debt">Implementing a plan to clean up technical debt</a></li>\n<li><a href="https://leaddev.com/series/maintaining-speed-while-minimizing-risk">Maintaining speed while minimizing risk</a></li>\n</ul>\n<h3 id="developer-experience">Developer Experience</h3>\n<ul>\n<li><a href="https://css-tricks.com/what-is-developer-experience-dx/">What is Developer Experience (DX)?</a></li>\n<li><a href="https://humanitec.com/blog/developer-experience">An Introduction to Developer Experience (DevEx, DX)</a></li>\n<li><a href="https://www.techatbloomberg.com/blog/conversation-developer-experience-lei-zhang/">A Conversation about Developer Experience with Lei Zhang</a></li>\n<li><a href="https://loft.sh/blog/why-every-software-team-should-have-a-developer-experience-owner-dxo/">Why Every Software Team Should Have a Developer Experience Owner (DXO)</a></li>\n<li><a href="https://nemethgergely.com/blog/engineering-productivity">Engineering Productivity: Measure What Matters</a></li>\n<li><a href="https://www.youtube.com/watch?v=Gw6QWlreY0w">Continuously Integrating Distributed Code at Netflix</a></li>\n<li><a href="https://medium.com/nick-tune-tech-strategy-blog/the-importance-of-a-great-developer-experience-40567abc0e9a">The Importance of a Great Developer Experience</a></li>\n<li><a href="https://leaddev.com/technical-direction-strategy/measuring-and-improving-efficiency-software-delivery">Measuring and improving the efficiency of software delivery</a></li>\n</ul>\n<h3 id="engineering-leadership">Engineering Leadership</h3>\n<ul>\n<li><a href="https://medium.com/taxfix/engineering-principles-putting-our-values-into-practice-4bbc140d4fa2">Engineering principles: putting our values into practice</a></li>\n<li><a href="https://suckless.org/philosophy/">Suckless Philosophy</a></li>\n<li><a href="https://keavy.com/work/thriving-on-the-technical-leadership-path/">Thriving on the Technical Leadership Path</a></li>\n<li><a href="https://staffeng.com/">StaffEng project</a></li>\n<li><a href="https://gumroad.com/l/staff-engineer">Staff Engineer book</a></li>\n<li><a href="https://lethain.com/learn-to-never-be-wrong/">Learn to never be wrong</a></li>\n<li><a href="https://keavy.com/work/where-to-start/">Where to Start</a></li>\n<li><a href="https://keavy.com/work/building-bridges/">Building Bridges as a Technical Leader</a></li>\n<li><a href="https://keavy.com/work/technical-preparation/">Technical Research and Preparation</a></li>\n<li><a href="https://leaddev.com/career-paths-progression-promotion/reality-being-principal-engineer">The reality of being a Principal Engineer</a></li>\n<li><a href="https://larahogan.me/blog/what-sponsorship-looks-like/">What does sponsorship look like?</a></li>\n<li><a href="https://medium.com/box-tech-blog/what-a-senior-staff-software-engineer-actually-does-f3fc140d5f33">What a Senior Staff Software Engineer Actually Does - Part 1</a></li>\n<li><a href="https://medium.com/box-tech-blog/what-a-senior-staff-software-engineer-actually-does-d55308fcdd41">What a Senior Staff Software Engineer Actually Does - Part 2</a></li>\n<li><a href="https://blog.jessfraz.com/post/defining-a-distinguished-engineer/">Defining a Distinguished Engineer</a></li>\n</ul>\n',
  },
  {
    title: 'Fun with Dates',
    content:
      '<p>As an ex-Rubyist, I always liked to work with Ruby dates (mental note: not the timezone part). I liked the human way on how Ruby and Rails provide methods to handle the Date object.</p>\n<p>In Ruby, we can get the current date by doing:</p>\n<pre><code class="hljs language-ruby"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;date&#x27;</span>\n\nDate.today <span class="hljs-comment"># #&lt;Date: 2020-04-05 ((2458945j,0s,0n),+0s,2299161j)&gt;</span>\n</code></pre>\n<p>This is pretty cool! I can send a simple message to the Date object &quot;hey, provide me the <code>today date</code>&quot; by calling the <code>today</code> method.</p>\n<p>Or simply get the <code>year</code>, <code>month</code>, <code>day</code>.</p>\n<pre><code class="hljs language-ruby">date = Date.today\ndate.year <span class="hljs-comment"># 2020</span>\ndate.month <span class="hljs-comment"># 4</span>\ndate.day <span class="hljs-comment"># 5</span>\n</code></pre>\n<p>Using Rails, it is also possible to call the <code>yesterday</code> method.</p>\n<pre><code class="hljs language-ruby">Date.yesterday\n</code></pre>\n<p>Rails also provides other interesting APIs: <code>beginning_of_month</code>, <code>minutes.ago</code>, <code>days.ago</code>.</p>\n<p>So after a long time with Ruby and Rails, I started using JavaScript more and more. But the JavaScript Date object was really strange for me. I wanted to use all the Ruby/Rails date APIs but in JavaScript and Typescript.</p>\n<p>I didn&#39;t want to monkey patch or build new methods in the JavaScript Date object. I could just provide some simple functions and handle the Date internally.</p>\n<h2 id="dating-dates">Dating dates</h2>\n<p>First things first: I wanted to better understand the Date object. How do we create it?</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();\n</code></pre>\n<p>By simply instantiate the Date object. We get the representation of <code>now</code> (the current date).</p>\n<p>The other APIs I need to try was: <code>getDate</code>, <code>getMonth</code>, and <code>getFullYear</code>. These are all methods to handle the date.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">day</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getDate</span>(); <span class="hljs-comment">// 5</span>\n<span class="hljs-keyword">const</span> <span class="hljs-attr">month</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getMonth</span>(); <span class="hljs-comment">// 3</span>\n<span class="hljs-keyword">const</span> <span class="hljs-attr">year</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getFullYear</span>(); <span class="hljs-comment">// 2020</span>\n</code></pre>\n<p>We could experiment with a whole bunch of other methods here, but I think we are good to move to the next part.</p>\n<h2 id="fun-with-dates">Fun with dates</h2>\n<p>In this part, we will build functions! I wanted to try creating this API:</p>\n<ul>\n<li>day</li>\n<li>month</li>\n<li>year</li>\n<li>today</li>\n<li>yesterday</li>\n<li>beginningOfDay</li>\n<li>beginningOfMonth</li>\n<li>beginningOfYear</li>\n<li>get(1).dayAgo</li>\n<li>get(2).daysAgo</li>\n<li>get(1).monthAgo</li>\n<li>get(2).monthsAgo</li>\n<li>get(1).yearAgo</li>\n<li>get(2).yearsAgo</li>\n</ul>\n<h2 id="day-month-and-year">day, month, and year</h2>\n<p>In this case, we provide a date and it will return the day of this date we provided.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> day = (<span class="hljs-attr">date</span>: <span class="hljs-title class_">Date</span>): <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> date.<span class="hljs-title function_">getDate</span>();\n<span class="hljs-keyword">const</span> month = (<span class="hljs-attr">date</span>: <span class="hljs-title class_">Date</span>): <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> date.<span class="hljs-title function_">getMonth</span>();\n<span class="hljs-keyword">const</span> year = (<span class="hljs-attr">date</span>: <span class="hljs-title class_">Date</span>): <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> date.<span class="hljs-title function_">getFullYear</span>();\n</code></pre>\n<p>And we can use it like:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();\n\n<span class="hljs-title function_">day</span>(now); <span class="hljs-comment">// 5</span>\n<span class="hljs-title function_">month</span>(now); <span class="hljs-comment">// 3</span>\n<span class="hljs-title function_">year</span>(now); <span class="hljs-comment">// 2020</span>\n</code></pre>\n<h2 id="today-and-yesterday">today and yesterday</h2>\n<p>With <code>today</code> function, we could just return the <code>new Date()</code> and we are good. But this returns the representation of <code>now</code> with &quot;time&quot; included.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <span class="hljs-comment">// 2020-04-05T18:58:45</span>\n</code></pre>\n<p>But it would be great to return the beginning of the day. We could simply pass the day, month, and year to the <code>Date</code> and it will generate this for us.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> today = (): <span class="hljs-function"><span class="hljs-params">Date</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">now</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">day</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getDate</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">month</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getMonth</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">year</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getFullYear</span>();\n\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month, day);\n};\n</code></pre>\n<p>Great. The <code>yesterday</code> function would work very similarly. Just subtract the day and we are good to go.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> yesterday = (): <span class="hljs-function"><span class="hljs-params">Date</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">now</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">day</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getDate</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">month</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getMonth</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">year</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getFullYear</span>();\n\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month, day - <span class="hljs-number">1</span>);\n};\n</code></pre>\n<p>But what happens when we subtract the day if the day is the first day of the month?</p>\n<pre><code class="hljs language-typescript"><span class="hljs-comment">// date to handle</span>\n<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2020</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 2020-04-01</span>\n\n<span class="hljs-comment">// when subtracting the day: from 1 to 0</span>\n<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2020</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 2020-03-31</span>\n</code></pre>\n<p>And what happens if it is the first day of the year?</p>\n<pre><code class="hljs language-typescript"><span class="hljs-comment">// date to handle</span>\n<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2020</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 2020-01-01</span>\n\n<span class="hljs-comment">// when subtracting the day: from 1 to 0</span>\n<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2020</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 2019-12-31</span>\n</code></pre>\n<p>Yes, JavaScript can be pretty smart too!</p>\n<p>With these two new functions, we can also refactor the logic to get the separated date into a separate function.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> getSeparatedDate = (): { <span class="hljs-attr">day</span>: <span class="hljs-built_in">number</span>; <span class="hljs-attr">month</span>: <span class="hljs-built_in">number</span>; <span class="hljs-attr">year</span>: <span class="hljs-built_in">number</span> } =&gt; {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">now</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">day</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getDate</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">month</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getMonth</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">year</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getFullYear</span>();\n\n  <span class="hljs-keyword">return</span> { day, month, year };\n};\n</code></pre>\n<p>Let&#39;s improve this! This returned type could be a Typescript <code>type</code>.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">SeparatedDate</span> = {\n  <span class="hljs-attr">day</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">month</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">year</span>: <span class="hljs-built_in">number</span>;\n};\n</code></pre>\n<p>Less verbose now:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> getSeparatedDate = (): <span class="hljs-function"><span class="hljs-params">SeparatedDate</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">now</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">day</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getDate</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">month</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getMonth</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">year</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getFullYear</span>();\n\n  <span class="hljs-keyword">return</span> { day, month, year };\n};\n</code></pre>\n<p>In this case, we are always returning the <code>day</code>, <code>month</code>, and <code>year</code> attributes of the current date. But what if we want to pass a different date? A new argument to the rescue:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> getSeparatedDate = (<span class="hljs-attr">now</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()): <span class="hljs-function"><span class="hljs-params">SeparatedDate</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">day</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getDate</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">month</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getMonth</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">year</span>: <span class="hljs-built_in">number</span> = now.<span class="hljs-title function_">getFullYear</span>();\n\n  <span class="hljs-keyword">return</span> { day, month, year };\n};\n</code></pre>\n<p>Now we have a function that can receive a new date, but if it doesn&#39;t, it just uses the default value: the representation of <code>now</code>.</p>\n<p>How does our functions <code>today</code> and <code>yesterday</code> look like now?</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> today = (): <span class="hljs-function"><span class="hljs-params">Date</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> { day, month, year }: <span class="hljs-title class_">SeparatedDate</span> = <span class="hljs-title function_">getSeparatedDate</span>();\n\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month, day);\n};\n\n<span class="hljs-keyword">const</span> yesterday = (): <span class="hljs-function"><span class="hljs-params">Date</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> { day, month, year }: <span class="hljs-title class_">SeparatedDate</span> = <span class="hljs-title function_">getSeparatedDate</span>();\n\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month, day - <span class="hljs-number">1</span>);\n};\n</code></pre>\n<p>Both functions use the <code>getSeparatedDate</code> function to get the Date attributes and return the appropriate date.</p>\n<h2 id="the-beginning-of-everything">The beginning of everything</h2>\n<p>To build the <code>beginningOfDay</code>, it would look exactly of the <code>today</code> function, as we want to the current date but at the beginning of the day.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> beginningOfDay = (<span class="hljs-attr">date</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()): <span class="hljs-function"><span class="hljs-params">Date</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> { day, month, year }: <span class="hljs-title class_">SeparatedDate</span> = <span class="hljs-title function_">getSeparatedDate</span>();\n\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month, day);\n};\n</code></pre>\n<p>Nothing special here.</p>\n<p>But just minor comment if you didn&#39;t notice: At first, I&#39;m built this function to get the beginning of the day of the current day. But I wanted to make it flexible enough to get the beginning of the day of other days too.</p>\n<p>So &quot;argument&quot;, right? Now the function receives a date, but it is flexible to not receive it too. I just handle it with a default value of the current date.</p>\n<p>For the <code>beginningOfMonth</code>, it will look pretty much the same, but instead of using the <code>day</code>, we just set it to <code>1</code>.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> beginningOfMonth = (<span class="hljs-attr">date</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()): <span class="hljs-function"><span class="hljs-params">Date</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> { month, year }: <span class="hljs-title class_">SeparatedDate</span> = <span class="hljs-title function_">getSeparatedDate</span>();\n\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month, <span class="hljs-number">1</span>);\n};\n</code></pre>\n<p>You got it, the <code>beginningOfYear</code> is similar. But also changing the <code>month</code> attribute.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> beginningOfYear = (<span class="hljs-attr">date</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()): <span class="hljs-function"><span class="hljs-params">Date</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> { year }: <span class="hljs-title class_">SeparatedDate</span> = <span class="hljs-title function_">getSeparatedDate</span>();\n\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);\n};\n</code></pre>\n<h2 id="traveling-back-in-time">Traveling back in time</h2>\n<p>Now the <code>get(1).dayAgo</code> API. We could build a <code>get</code> function that receives a <code>number</code> and return an object like:</p>\n<pre><code class="hljs language-typescript">{\n  dayAgo, monthAgo, yearAgo;\n}\n</code></pre>\n<p>For each attribute of this object, it would be the returned value we expect.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> get = (<span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>): { <span class="hljs-attr">dayAgo</span>: <span class="hljs-title class_">Date</span>; <span class="hljs-attr">monthAgo</span>: <span class="hljs-title class_">Date</span>; <span class="hljs-attr">yearAgo</span>: <span class="hljs-title class_">Date</span> } =&gt; {\n  <span class="hljs-keyword">const</span> { day, month, year }: <span class="hljs-title class_">SeparatedDate</span> = <span class="hljs-title function_">getSeparatedDate</span>();\n\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">dayAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month, day - n);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">monthAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month - n, day);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">yearAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year - n, month, day);\n\n  <span class="hljs-keyword">return</span> { dayAgo, monthAgo, yearAgo };\n};\n</code></pre>\n<p>What about a <code>DateAgo</code> type?</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">DateAgo</span> = {\n  <span class="hljs-attr">dayAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">monthAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">yearAgo</span>: <span class="hljs-title class_">Date</span>;\n};\n</code></pre>\n<p>And now using the new type:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> get = (<span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>): <span class="hljs-function"><span class="hljs-params">DateAgo</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> { day, month, year }: <span class="hljs-title class_">SeparatedDate</span> = <span class="hljs-title function_">getSeparatedDate</span>();\n\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">dayAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month, day - n);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">monthAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month - n, day);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">yearAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year - n, month, day);\n\n  <span class="hljs-keyword">return</span> { dayAgo, monthAgo, yearAgo };\n};\n</code></pre>\n<p>We build each attribute: <code>dayAgo</code>, <code>monthAgo</code>, and <code>yearAgo</code> by basically handling the Date object as we know.</p>\n<p>But now we also need to implement the object in the plural: <code>daysAgo</code>, <code>monthsAgo</code>, and <code>yearsAgo</code>. But only for a number greater than 1.</p>\n<p>For these new attributes, we don&#39;t need to create a whole new date again. We can use the same value from the singular attributes.</p>\n<p>We also need to handle the <code>number</code> received.</p>\n<ul>\n<li>if it is greater than 1: return the object with plural attributes</li>\n<li>otherwise: return the object with singular attributes</li>\n</ul>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> get = (<span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>): <span class="hljs-title class_">DateAgo</span> | <span class="hljs-function"><span class="hljs-params">DatesAgo</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> { day, month, year }: <span class="hljs-title class_">SeparatedDate</span> = <span class="hljs-title function_">getSeparatedDate</span>();\n\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">dayAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month, day - n);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">monthAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month - n, day);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">yearAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year - n, month, day);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">daysAgo</span>: <span class="hljs-title class_">Date</span> = dayAgo;\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">monthsAgo</span>: <span class="hljs-title class_">Date</span> = monthAgo;\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">yearsAgo</span>: <span class="hljs-title class_">Date</span> = yearAgo;\n\n  <span class="hljs-keyword">return</span> n &gt; <span class="hljs-number">1</span>\n    ? { daysAgo, monthsAgo, yearsAgo }\n    : { dayAgo, monthAgo, yearAgo };\n};\n</code></pre>\n<ul>\n<li>In this case, I also created the <code>DatesAgo</code> type and used the Typescript <code>Union Type</code> feature.</li>\n<li>We reuse the singular values.</li>\n<li>And do a simple ternary to handle the number received.</li>\n</ul>\n<p>But what if we pass a <code>0</code> or negative value? We can throw an error:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> get = (<span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>): <span class="hljs-title class_">DateAgo</span> | <span class="hljs-function"><span class="hljs-params">DatesAgo</span> =&gt;</span> {\n  <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span>) {\n    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Number should be greater or equal than 1&#x27;</span>);\n  }\n\n  <span class="hljs-keyword">const</span> { day, month, year }: <span class="hljs-title class_">SeparatedDate</span> = <span class="hljs-title function_">getSeparatedDate</span>();\n\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">dayAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month, day - n);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">monthAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month - n, day);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">yearAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year - n, month, day);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">daysAgo</span>: <span class="hljs-title class_">Date</span> = dayAgo;\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">monthsAgo</span>: <span class="hljs-title class_">Date</span> = monthAgo;\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">yearsAgo</span>: <span class="hljs-title class_">Date</span> = yearAgo;\n\n  <span class="hljs-keyword">return</span> n &gt; <span class="hljs-number">1</span>\n    ? { daysAgo, monthsAgo, yearsAgo }\n    : { dayAgo, monthAgo, yearAgo };\n};\n</code></pre>\n<p>The Date can be fun too. Learn the basic concepts and just play around with it, you&#39;ll like! I hope this post was valuable to you!</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://BeginnerJavaScript.com/friend/LEANDRO">Beginner JavaScript Course</a></li>\n<li><a href="https://ReactForBeginners.com/friend/LEANDRO">React for Beginners Course</a></li>\n<li><a href="https://AdvancedReact.com/friend/LEANDRO">Advanced React Course</a></li>\n<li><a href="https://ES6.io/friend/LEANDRO">ES6 Course</a></li>\n<li><a href="https://mbsy.co/lFtbC">JavaScript Course by OneMonth</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date">Date - JavaScript | MDN</a></li>\n<li><a href="https://api.rubyonrails.org/classes/Date.html">Ruby on Rails Date API</a></li>\n<li><a href="https://ruby-doc.org/stdlib-2.7.1/libdoc/date/rdoc/Date.html">Ruby Date API</a></li>\n<li><a href="https://github.com/imteekay/dating">Dating library</a></li>\n<li><a href="/series/typescript-learnings/object-destructuring">Typescript Learnings 001: Object Destructuring</a></li>\n<li><a href="https://www.digitalocean.com/community/tutorials/understanding-date-and-time-in-javascript">Understanding Date and Time in JavaScript</a></li>\n</ul>\n<h3 id="javascript">Javascript</h3>\n<ul>\n<li><a href="https://www.educative.io/courses/javascript-in-detail-from-beginner-to-advanced?aff=x8bV">JavaScript in Detail: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/simplifying-javascript-handy-guide?aff=x8bV">Simplifying JavaScript: A Handy Guide for Software Engineers</a></li>\n<li><a href="https://www.educative.io/courses/complete-guide-to-modern-javascript?aff=x8bV">The Complete Guide to Modern JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/learn-object-oriented-programming-in-javascript?aff=x8bV">Learn Object-Oriented Programming in JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/javascript-in-practice-es6-and-beyond?aff=x8bV">JavaScript In Practice: ES6 And Beyond</a></li>\n<li><a href="https://www.educative.io/courses/data-structures-coding-interviews-javascript?aff=x8bV">Data Structures for Coding Interviews in JavaScript</a></li>\n<li><a href="https://mbsy.co/lFtbC">JavaScript Course by OneMonth</a></li>\n<li><a href="https://es6.io/friend/LEANDRO">ES6 Course</a></li>\n<li><a href="https://beginnerjavascript.com/friend/LEANDRO">Beginner JavaScript Course</a></li>\n<li><a href="https://www.educative.io/courses/javascript-fundamentals-before-learning-react?aff=x8bV">JavaScript Fundamentals Before Learning React</a></li>\n<li><a href="https://www.educative.io/courses/rediscovering-javascript?aff=x8bV">Rediscovering JavaScript: ES6, ES7 &amp; ES8</a></li>\n</ul>\n',
  },
  {
    title: 'Functional Programming Principles in JavaScript',
    content:
      '<p>After a long time learning and working with object-oriented programming, I took a step back to think about system complexity.</p>\n<blockquote>\n<p>“Complexity is anything that makes software hard to understand or to modify.&quot; — John Outerhout</p>\n</blockquote>\n<p>Doing some research, I found functional programming concepts like immutability and pure function. Those concepts are big advantages to build side-effect-free functions, so it is easier to maintain systems — with some other <a href="https://hackernoon.com/why-functional-programming-matters-c647f56a7691">benefits</a>.</p>\n<p>In this post, I will tell you more about functional programming, and some important concepts, with a lot of code examples. In Javascript!</p>\n<h3 id="what-is-functional-programming">What is functional programming?</h3>\n<blockquote>\n<p>Functional programming is a programming paradigm — a style of building the structure and elements of computer programs — that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data — Wikipedia</p>\n</blockquote>\n<h3 id="pure-functions">Pure functions</h3>\n<p><img src="https://cdn-images-1.medium.com/max/1600/0*FMur6URY7yAVjeuP" alt=""></p>\n<p>The first fundamental concept we learn when we want to understand functional programming is <strong>pure functions</strong>. But what does that really mean? What makes a function pure?</p>\n<p>So how do we know if a function is <code>pure</code> or not? Here is a very strict definition of purity:</p>\n<ul>\n<li><p>It returns the same result if given the same arguments (it is also referred as <code>deterministic</code>)</p>\n</li>\n<li><p>It does not cause any observable side effects</p>\n</li>\n</ul>\n<h4 id="it-returns-the-same-result-if-given-the-same-arguments">It returns the same result if given the same arguments</h4>\n<p>Imagine we want to implement a function that calculates the area of a circle. An impure function would receive <code>radius</code> as the parameter, and then calculate <code>radius * radius * PI</code>:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PI</span> = <span class="hljs-number">3.14</span>;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">calculateArea</span>(<span class="hljs-params">radius</span>) {\n  <span class="hljs-keyword">return</span> radius * radius * <span class="hljs-variable constant_">PI</span>;\n}\n\n<span class="hljs-title function_">calculateArea</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// returns 314.0</span>\n</code></pre>\n<p>Why is this an impure function? Simply because it uses a global object that was not passed as a parameter to the function.</p>\n<p>Now imagine some mathematicians argue that the <code>PI</code> value is actually <code>42</code>and change the value of the global object.</p>\n<p>Our impure function will now result in <code>10 * 10 * 42</code> = <code>4200</code>. For the same parameter (<code>radius = 10</code>), we have a different result. Let&#39;s fix it!</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PI</span> = <span class="hljs-number">3.14</span>;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">calculateArea</span>(<span class="hljs-params">radius, pi</span>) {\n  <span class="hljs-keyword">return</span> radius * radius * pi;\n}\n\n<span class="hljs-title function_">calculateArea</span>(<span class="hljs-number">10</span>, <span class="hljs-variable constant_">PI</span>); <span class="hljs-comment">// returns 314.0</span>\n</code></pre>\n<p>TA-DA 🎉! Now we’ll always pass the<code>PI</code> value as a parameter to the function. So now we are just accessing parameters passed to the function. No <code>external object</code>.</p>\n<ul>\n<li><p>For the parameters <code>radius = 10</code> &amp; <code>PI = 3.14</code>, we will always have the same the result: <code>314.0</code></p>\n</li>\n<li><p>For the parameters <code>radius = 10</code> &amp; <code>PI = 42</code>, we will always have the same the result: <code>4200</code></p>\n</li>\n</ul>\n<h4 id="reading-files">Reading Files</h4>\n<p>If our function reads external files, it’s not a pure function — the file’s contents can change.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">charactersCounter</span>(<span class="hljs-params">text</span>) {\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`Character count: <span class="hljs-subst">${text.length}</span>`</span>;\n}\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">analyzeFile</span>(<span class="hljs-params">filename</span>) {\n  <span class="hljs-keyword">let</span> fileContent = <span class="hljs-title function_">open</span>(filename);\n  <span class="hljs-keyword">return</span> <span class="hljs-title function_">charactersCounter</span>(fileContent);\n}\n</code></pre>\n<h4 id="random-number-generation">Random number generation</h4>\n<p>Any function that relies on a random number generator cannot be pure.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">yearEndEvaluation</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.5</span>) {\n    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;You get a raise!&#x27;</span>;\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Better luck next year!&#x27;</span>;\n  }\n}\n</code></pre>\n<h4 id="it-does-not-cause-any-observable-side-effects">It does not cause any observable side effects</h4>\n<p>Examples of observable side effects include modifying a global object or a parameter passed by reference.</p>\n<p>Now we want to implement a function to receive an integer value and return the value increased by 1.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">let</span> counter = <span class="hljs-number">1</span>;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">increaseCounter</span>(<span class="hljs-params">value</span>) {\n  counter = value + <span class="hljs-number">1</span>;\n}\n\n<span class="hljs-title function_">increaseCounter</span>(counter);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(counter); <span class="hljs-comment">// 2</span>\n</code></pre>\n<p>We have the <code>counter</code> value. Our impure function receives that value and re-assigns the counter with the value increased by 1.</p>\n<p><strong>Observation</strong>: mutability is discouraged in functional programming.</p>\n<p>We are modifying the global object. But how would we make it <code>pure</code>? Just return the value increased by 1. Simple as that.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">let</span> counter = <span class="hljs-number">1</span>;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">increaseCounter</span>(<span class="hljs-params">value</span>) {\n  <span class="hljs-keyword">return</span> value + <span class="hljs-number">1</span>;\n}\n\n<span class="hljs-title function_">increaseCounter</span>(counter); <span class="hljs-comment">// 2</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(counter); <span class="hljs-comment">// 1</span>\n</code></pre>\n<p>See that our pure function <code>increaseCounter</code> returns 2, but the <code>counter</code> value is still the same. The function returns the incremented value without altering the value of the variable.</p>\n<p>If we follow these two simple rules, it gets easier to understand our programs. Now every function is isolated and unable to impact other parts of our system.</p>\n<p>Pure functions are stable, consistent, and predictable. Given the same parameters, pure functions will always return the same result. We don’t need to think of situations when the same parameter has different results — because it will never happen.</p>\n<h4 id="pure-functions-benefits">Pure functions benefits</h4>\n<p>The code’s definitely easier to test. We don’t need to mock anything. So we can unit test pure functions with different contexts:</p>\n<ul>\n<li><p>Given a parameter <code>A</code> → expect the function to return value <code>B</code></p>\n</li>\n<li><p>Given a parameter <code>C</code> → expect the function to return value <code>D</code></p>\n</li>\n</ul>\n<p>A simple example would be a function to receive a collection of numbers and expect it to increment each element of this collection.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">let</span> list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">incrementNumbers</span>(<span class="hljs-params">list</span>) {\n  <span class="hljs-keyword">return</span> list.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">number</span>) =&gt;</span> number + <span class="hljs-number">1</span>);\n}\n</code></pre>\n<p>We receive the <code>numbers</code> array, use <code>map</code> incrementing each number, and return a new list of incremented numbers.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title function_">incrementNumbers</span>(list); <span class="hljs-comment">// [2, 3, 4, 5, 6]</span>\n</code></pre>\n<p>For the <code>input</code> <code>[1, 2, 3, 4, 5]</code>, the expected <code>output</code> would be <code>[2, 3, 4, 5, 6]</code>.</p>\n<h3 id="immutability">Immutability</h3>\n<blockquote>\n<p>Unchanging over time or unable to be changed.</p>\n</blockquote>\n<p><img src="https://cdn-images-1.medium.com/max/1600/0*MGlzHgISuw0dXwsf" alt=""></p>\n<p><strong>after it’s created. <strong>If you want to change an immutable object, you can’t. Instead,</strong> you create a new object with the new value.</strong></p>\n<p>In Javascript we commonly use the <code>for</code> loop. This next <code>for</code> statement has some mutable variables.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];\n<span class="hljs-keyword">var</span> sumOfValues = <span class="hljs-number">0</span>;\n\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; values.<span class="hljs-property">length</span>; i++) {\n  sumOfValues += values[i];\n}\n\nsumOfValues; <span class="hljs-comment">// 15</span>\n</code></pre>\n<p>For each iteration, we are changing the <code>i</code> and the <code>sumOfValue</code> <strong>state</strong>. But how do we handle mutability in iteration? Recursion!</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">let</span> list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];\n<span class="hljs-keyword">let</span> accumulator = <span class="hljs-number">0</span>;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">list, accumulator</span>) {\n  <span class="hljs-keyword">if</span> (list.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) {\n    <span class="hljs-keyword">return</span> accumulator;\n  }\n\n  <span class="hljs-keyword">return</span> <span class="hljs-title function_">sum</span>(list.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>), accumulator + list[<span class="hljs-number">0</span>]);\n}\n\n<span class="hljs-title function_">sum</span>(list, accumulator); <span class="hljs-comment">// 15</span>\nlist; <span class="hljs-comment">// [1, 2, 3, 4, 5]</span>\naccumulator; <span class="hljs-comment">// 0</span>\n</code></pre>\n<p>So here we have the <code>sum</code> function that receives a vector of numerical values. The function calls itself until we get the list empty (<a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)#Recursive_functions_and_algorithms">our recursion </a><code>base case</code>). For each &quot;iteration&quot; we will add the value to the <code>total</code> accumulator.</p>\n<p>immutable. The <code>list</code> and the <code>accumulator</code> variables are not changed. It keeps the same value.</p>\n<p><strong>Observation</strong>: Yes! We can use <code>reduce</code> to implement this function. We will cover this in the <code>Higher Order Functions</code> topic.</p>\n<p>It is also very common to build up the final <strong>state</strong> of an object. Imagine we have a string, and we want to transform this string into a <code>url slug</code>.</p>\n<p>In OOP in Ruby, we would create a class, let’s say, <code>UrlSlugify</code>. And this class will have a <code>slugify!</code> method to transform the string input into a <code>url slug</code>.</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UrlSlugify</span></span>\n  <span class="hljs-keyword">attr_reader</span> <span class="hljs-symbol">:text</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(text)</span></span>\n    <span class="hljs-variable">@text</span> = text\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">slugify!</span></span>\n    text.downcase!\n    text.strip!\n    text.gsub!(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>)\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n\nUrlSlugify.new(<span class="hljs-string">&#x27; I will be a url slug   &#x27;</span>).slugify! <span class="hljs-comment"># &quot;i-will-be-a-url-slug&quot;</span>\n</code></pre>\n<p>Beautiful! It’s implemented! Here we have imperative programming saying exactly what we want to do in each <code>slugify</code> process — first lower case, then remove useless white spaces and, finally, replace remaining white spaces with hyphens.</p>\n<p>But we are mutating the input state in this process.</p>\n<p>We can handle this mutation by doing function composition, or function chaining. In other words, the result of a function will be used as an input for the next function, without modifying the original input string.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">let</span> string = <span class="hljs-string">&#x27; I will be a url slug   &#x27;</span>;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">slugify</span>(<span class="hljs-params">string</span>) {\n  <span class="hljs-keyword">return</span> string.<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>);\n}\n\n<span class="hljs-title function_">slugify</span>(string); <span class="hljs-comment">// i-will-be-a-url-slug</span>\n</code></pre>\n<p>Here we have:</p>\n<ul>\n<li><p><code>toLowerCase</code>: converts the string to all lower case</p>\n</li>\n<li><p><code>trim</code>: removes whitespace from both ends of a string</p>\n</li>\n<li><p><code>split</code> and <code>join</code>: replaces all instances of match with replacement in a given string</p>\n</li>\n</ul>\n<p>We combine all these 4 functions and we can <code>&quot;slugify&quot;</code> our string.</p>\n<h3 id="referential-transparency">Referential transparency</h3>\n<p><img src="https://cdn-images-1.medium.com/max/1600/0*K0VAbQjAwmKZb1at" alt=""></p>\n<p>Let’s implement a <code>square function</code>:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">n</span>) {\n  <span class="hljs-keyword">return</span> n * n;\n}\n</code></pre>\n<p>This pure function will always have the same output, given the same input.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title function_">square</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 4</span>\n<span class="hljs-title function_">square</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 4</span>\n<span class="hljs-title function_">square</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 4</span>\n<span class="hljs-comment">// ...</span>\n</code></pre>\n<p>Passing <code>2</code> as a parameter of the <code>square function</code> will always returns 4. So now we can replace the <code>square(2)</code> with 4. That&#39;s it! Our function is <code>referentially transparent</code>.</p>\n<p>Basically, if a function consistently yields the same result for the same input, it is referentially transparent.</p>\n<p><strong>pure functions + immutable data = referential transparency</strong></p>\n<p>With this concept, a cool thing we can do is to memoize the function. Imagine we have this function:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b</span>) {\n  <span class="hljs-keyword">return</span> a + b;\n}\n</code></pre>\n<p>And we call it with these parameters:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title function_">sum</span>(<span class="hljs-number">3</span>, <span class="hljs-title function_">sum</span>(<span class="hljs-number">5</span>, <span class="hljs-number">8</span>));\n</code></pre>\n<p>The <code>sum(5, 8)</code> equals <code>13</code>. This function will always result in <code>13</code>. So we can do this:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title function_">sum</span>(<span class="hljs-number">3</span>, <span class="hljs-number">13</span>);\n</code></pre>\n<p>And this expression will always result in <code>16</code>. We can replace the entire expression with a numerical constant and <a href="https://en.wikipedia.org/wiki/Memoization">memoize</a> it.</p>\n<h3 id="functions-as-first-class-entities">Functions as first-class entities</h3>\n<p><img src="https://cdn-images-1.medium.com/max/1600/0*K6m1Ftw54Wm6tfFB" alt=""></p>\n<p>The idea of functions as first-class entities is that functions are <strong>also</strong> treated as values <strong>and</strong> used as data.</p>\n<p>Functions as first-class entities can:</p>\n<ul>\n<li><p>refer to it from constants and variables</p>\n</li>\n<li><p>pass it as a parameter to other functions</p>\n</li>\n<li><p>return it as result from other functions</p>\n</li>\n</ul>\n<p>The idea is to treat functions as values and pass functions like data. This way we can combine different functions to create new functions with new behavior.</p>\n<p>Imagine we have a function that sums two values and then doubles the value. Something like this:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doubleSum</span>(<span class="hljs-params">a, b</span>) {\n  <span class="hljs-keyword">return</span> (a + b) * <span class="hljs-number">2</span>;\n}\n</code></pre>\n<p>Now a function that subtracts values and the returns the double:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doubleSubtraction</span>(<span class="hljs-params">a, b</span>) {\n  <span class="hljs-keyword">return</span> (a - b) * <span class="hljs-number">2</span>;\n}\n</code></pre>\n<p>These functions have similar logic, but the difference is the operators functions. If we can treat functions as values and pass these as arguments, we can build a function that receives the operator function and use it inside our function. Let’s build it!</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b</span>) {\n  <span class="hljs-keyword">return</span> a + b;\n}\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">subtraction</span>(<span class="hljs-params">a, b</span>) {\n  <span class="hljs-keyword">return</span> a - b;\n}\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">doubleOperator</span>(<span class="hljs-params">f, a, b</span>) {\n  <span class="hljs-keyword">return</span> <span class="hljs-title function_">f</span>(a, b) * <span class="hljs-number">2</span>;\n}\n\n<span class="hljs-title function_">doubleOperator</span>(sum, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 8</span>\n<span class="hljs-title function_">doubleOperator</span>(subtraction, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 4</span>\n</code></pre>\n<p>Done! Now we have an <code>f</code> argument, and use it to process <code>a</code> and <code>b</code>. We passed the <code>sum</code> and <code>subtraction</code> functions to compose with the <code>doubleOperator</code> function and create a new behavior.</p>\n<h3 id="higher-order-functions">Higher-order functions</h3>\n<p>When we talk about higher-order functions, we mean a function that either:</p>\n<ul>\n<li><p>takes one or more functions as arguments, or</p>\n</li>\n<li><p>returns a function as its result</p>\n</li>\n</ul>\n<p>The <code>doubleOperator</code> function we implemented above is a higher-order function because it takes an operator function as an argument and uses it.</p>\n<p>You’ve probably already heard about <code>filter</code>, <code>map</code>, and <code>reduce</code>. Let&#39;s take a look at these.</p>\n<h3 id="filter">Filter</h3>\n<p>Given a collection, we want to filter by an attribute. The filter function expects a <code>true</code> or <code>false</code> value to determine if the element <strong>should or should not</strong> be included in the result collection. Basically, if the callback expression is <code>true</code>, the filter function will include the element in the result collection. Otherwise, it will not.</p>\n<p>A simple example is when we have a collection of integers and we want only the even numbers.</p>\n<p><strong>Imperative approach</strong></p>\n<p>An imperative way to do it with Javascript is to:</p>\n<ul>\n<li><p>create an empty array <code>evenNumbers</code></p>\n</li>\n<li><p>iterate over the <code>numbers</code> array</p>\n</li>\n<li><p>push the even numbers to the <code>evenNumbers</code> array</p>\n</li>\n</ul>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>];\n<span class="hljs-keyword">var</span> evenNumbers = [];\n\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; numbers.<span class="hljs-property">length</span>; i++) {\n  <span class="hljs-keyword">if</span> (numbers[i] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) {\n    evenNumbers.<span class="hljs-title function_">push</span>(numbers[i]);\n  }\n}\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(evenNumbers); <span class="hljs-comment">// (6) [0, 2, 4, 6, 8, 10]</span>\n</code></pre>\n<p>We can also use the <code>filter</code> higher order function to receive the <code>even</code> function, and return a list of even numbers:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">even</span>(<span class="hljs-params">number</span>) {\n  <span class="hljs-keyword">return</span> number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;\n}\n\n<span class="hljs-keyword">let</span> listOfNumbers = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>];\nlistOfNumbers.<span class="hljs-title function_">filter</span>(even); <span class="hljs-comment">// [0, 2, 4, 6, 8, 10]</span>\n</code></pre>\n<p>One interesting problem I solved on <a href="https://www.hackerrank.com/domains/fp">Hacker Rank FP</a> Path was the <a href="https://www.hackerrank.com/challenges/fp-filter-array/problem">Filter Array problem</a>. The problem idea is to filter a given array of integers and output only those values that are less than a specified value <code>X</code>.</p>\n<p>An imperative Javascript solution to this problem is something like:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> filterArray = <span class="hljs-keyword">function</span> (<span class="hljs-params">x, coll</span>) {\n  <span class="hljs-keyword">var</span> resultArray = [];\n\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; coll.<span class="hljs-property">length</span>; i++) {\n    <span class="hljs-keyword">if</span> (coll[i] &lt; x) {\n      resultArray.<span class="hljs-title function_">push</span>(coll[i]);\n    }\n  }\n\n  <span class="hljs-keyword">return</span> resultArray;\n};\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">filterArray</span>(<span class="hljs-number">3</span>, [<span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>])); <span class="hljs-comment">// (3) [2, 1, 0]</span>\n</code></pre>\n<p>We say exactly what our function needs to do — iterate over the collection, compare the collection current item with <code>x</code>, and push this element to the <code>resultArray</code> if it pass the condition.</p>\n<p><strong>Declarative approach</strong></p>\n<p>But we want a more declarative way to solve this problem, and using the <code>filter</code> higher order function as well.</p>\n<p>A declarative Javascript solution would be something like this:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">smaller</span>(<span class="hljs-params">number</span>) {\n  <span class="hljs-keyword">return</span> number &lt; <span class="hljs-variable language_">this</span>;\n}\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">filterArray</span>(<span class="hljs-params">x, listOfNumbers</span>) {\n  <span class="hljs-keyword">return</span> listOfNumbers.<span class="hljs-title function_">filter</span>(smaller, x);\n}\n\n<span class="hljs-keyword">let</span> numbers = [<span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>];\n\n<span class="hljs-title function_">filterArray</span>(<span class="hljs-number">3</span>, numbers); <span class="hljs-comment">// [2, 1, 0]</span>\n</code></pre>\n<p>Using <code>this</code> in the <code>smaller</code> function seems a bit strange in the first place, but is easy to understand.</p>\n<p><code>this</code> will be the second parameter in the <code>filter</code> function. In this case, <code>3</code> (the <code>x</code>) is represented by <code>this</code>. That&#39;s it.</p>\n<p>We can also do this with maps. Imagine we have a map of people with their <code>name</code> and <code>age</code>.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">let</span> people = [\n  { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">26</span> },\n  { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kaio&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">10</span> },\n  { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kazumi&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span> },\n];\n</code></pre>\n<p>And we want to filter only people over a specified value of age, in this example people who are more than 21 years old.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">olderThan21</span>(<span class="hljs-params">person</span>) {\n  <span class="hljs-keyword">return</span> person.<span class="hljs-property">age</span> &gt; <span class="hljs-number">21</span>;\n}\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">overAge</span>(<span class="hljs-params">people</span>) {\n  <span class="hljs-keyword">return</span> people.<span class="hljs-title function_">filter</span>(olderThan21);\n}\n\n<span class="hljs-title function_">overAge</span>(people); <span class="hljs-comment">// [{ name: &#x27;TK&#x27;, age: 26 }, { name: &#x27;Kazumi&#x27;, age: 30 }]</span>\n</code></pre>\n<p>Summary of code:</p>\n<ul>\n<li><p>we have a list of people (with <code>name</code> and <code>age</code>).</p>\n</li>\n<li><p>we have a function <code>olderThan21</code>. In this case, for each person in people array, we want to access the <code>age</code> and see if it is older than 21.</p>\n</li>\n<li><p>we filter all people based on this function.</p>\n</li>\n</ul>\n<h3 id="map">Map</h3>\n<p>The idea of map is to transform a collection.</p>\n<blockquote>\n<p>The map method transforms a collection by applying a function to all of its elements and building a new collection from the returned values.</p>\n</blockquote>\n<p>Let’s get the same <code>people</code> collection above. We don&#39;t want to filter by “over age” now. We just want a list of strings, something like <code>TK is 26 years old</code>. So the final string might be <code>:name is :age years old</code> where <code>:name</code> and <code>:age</code> are attributes from each element in the <code>people</code> collection.</p>\n<p>In a imperative Javascript way, it would be:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> people = [\n  { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">26</span> },\n  { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kaio&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">10</span> },\n  { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kazumi&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span> },\n];\n\n<span class="hljs-keyword">var</span> peopleSentences = [];\n\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; people.<span class="hljs-property">length</span>; i++) {\n  <span class="hljs-keyword">var</span> sentence = people[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27; is &#x27;</span> + people[i].<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old&#x27;</span>;\n  peopleSentences.<span class="hljs-title function_">push</span>(sentence);\n}\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(peopleSentences); <span class="hljs-comment">// [&#x27;TK is 26 years old&#x27;, &#x27;Kaio is 10 years old&#x27;, &#x27;Kazumi is 30 years old&#x27;]</span>\n</code></pre>\n<p>In a declarative Javascript way, it would be:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeSentence</span>(<span class="hljs-params">person</span>) {\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${person.name}</span> is <span class="hljs-subst">${person.age}</span> years old`</span>;\n}\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">peopleSentences</span>(<span class="hljs-params">people</span>) {\n  <span class="hljs-keyword">return</span> people.<span class="hljs-title function_">map</span>(makeSentence);\n}\n\n<span class="hljs-title function_">peopleSentences</span>(people); <span class="hljs-comment">// [&#x27;TK is 26 years old&#x27;, &#x27;Kaio is 10 years old&#x27;, &#x27;Kazumi is 30 years old&#x27;]</span>\n</code></pre>\n<p>The whole idea is to transform a given array into a new array.</p>\n<p>Another interesting Hacker Rank problem was the <a href="https://www.hackerrank.com/challenges/fp-update-list/problem">update list problem</a>. We just want to update the values of a given array with their absolute values.</p>\n<p>For example, the input <code>[1, 2, 3, -4, 5]</code>needs the output to be <code>[1, 2, 3, 4, 5]</code>. The absolute value of <code>-4</code> is <code>4</code>.</p>\n<p>A simple solution would be an in-place update for each collection value.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">4</span>, <span class="hljs-number">5</span>];\n\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; values.<span class="hljs-property">length</span>; i++) {\n  values[i] = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(values[i]);\n}\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(values); <span class="hljs-comment">// [1, 2, 3, 4, 5]</span>\n</code></pre>\n<p>We use the <code>Math.abs</code> function to transform the value into its absolute value, and do the in-place update.</p>\n<p>This is <strong>not</strong> a functional way to implement this solution.</p>\n<p>First, we learned about immutability. We know how immutability is important to make our functions more consistent and predictable. The idea is to build a new collection with all absolute values.</p>\n<p>Second, why not use <code>map</code> here to &quot;transform&quot; all data?</p>\n<p>My first idea was to test the <code>Math.abs</code> function to handle only one value.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(-<span class="hljs-number">1</span>); <span class="hljs-comment">// 1</span>\n<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 1</span>\n<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(-<span class="hljs-number">2</span>); <span class="hljs-comment">// 2</span>\n<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 2</span>\n</code></pre>\n<p>We want to transform each value into a positive value (the absolute value).</p>\n<p>Now that we know how to do <code>absolute</code> for one value, we can use this function to pass as an argument to the <code>map</code> function. Do you remember that a <code>higher order function</code> can receive a function as an argument and use it? Yes, map can do it!</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">let</span> values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">4</span>, <span class="hljs-number">5</span>];\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">updateListMap</span>(<span class="hljs-params">values</span>) {\n  <span class="hljs-keyword">return</span> values.<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">abs</span>);\n}\n\n<span class="hljs-title function_">updateListMap</span>(values); <span class="hljs-comment">// [1, 2, 3, 4, 5]</span>\n</code></pre>\n<p>Wow. So beautiful! 😍</p>\n<h3 id="reduce">Reduce</h3>\n<p>The idea of reduce is to receive a function and a collection, and return a value created by combining the items.</p>\n<p>A common example people talk about is to get the total amount of an order. Imagine you were at a shopping website. You’ve added <code>Product 1</code>, <code>Product 2</code>, <code>Product 3</code>, and <code>Product 4</code> to your shopping cart (order). Now we want to calculate the total amount of the shopping cart.</p>\n<p>In imperative way, we would iterate the order list and sum each product amount to the total amount.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> orders = [\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Product 1&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">10</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Product 2&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">30</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Product 3&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">20</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Product 4&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">60</span> },\n];\n\n<span class="hljs-keyword">var</span> totalAmount = <span class="hljs-number">0</span>;\n\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; orders.<span class="hljs-property">length</span>; i++) {\n  totalAmount += orders[i].<span class="hljs-property">amount</span>;\n}\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(totalAmount); <span class="hljs-comment">// 120</span>\n</code></pre>\n<p>Using <code>reduce</code>, we can build a function to handle the <code>amount sum</code> and pass it as an argument to the <code>reduce</code> function.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">let</span> shoppingCart = [\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Product 1&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">10</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Product 2&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">30</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Product 3&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">20</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Product 4&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">60</span> },\n];\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">sumAmount</span> = (<span class="hljs-params">currentTotalAmount, order</span>) =&gt;\n  currentTotalAmount + order.<span class="hljs-property">amount</span>;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">getTotalAmount</span>(<span class="hljs-params">shoppingCart</span>) {\n  <span class="hljs-keyword">return</span> shoppingCart.<span class="hljs-title function_">reduce</span>(sumAmount, <span class="hljs-number">0</span>);\n}\n\n<span class="hljs-title function_">getTotalAmount</span>(shoppingCart); <span class="hljs-comment">// 120</span>\n</code></pre>\n<p>Here we have <code>shoppingCart</code>, the function <code>sumAmount</code> that receives the current <code>currentTotalAmount</code> , and the <code>order</code> object to <code>sum</code> them.</p>\n<p>The <code>getTotalAmount</code> function is used to <code>reduce</code> the <code>shoppingCart</code> by using the <code>sumAmount</code> and starting from <code>0</code>.</p>\n<p>Another way to get the total amount is to compose <code>map</code> and <code>reduce</code>. What do I mean by that? We can use <code>map</code> to transform the <code>shoppingCart</code> into a collection of <code>amount</code> values, and then just use the <code>reduce</code> function with <code>sumAmount</code> function.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getAmount</span> = (<span class="hljs-params">order</span>) =&gt; order.<span class="hljs-property">amount</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">sumAmount</span> = (<span class="hljs-params">acc, amount</span>) =&gt; acc + amount;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">getTotalAmount</span>(<span class="hljs-params">shoppingCart</span>) {\n  <span class="hljs-keyword">return</span> shoppingCart.<span class="hljs-title function_">map</span>(getAmount).<span class="hljs-title function_">reduce</span>(sumAmount, <span class="hljs-number">0</span>);\n}\n\n<span class="hljs-title function_">getTotalAmount</span>(shoppingCart); <span class="hljs-comment">// 120</span>\n</code></pre>\n<p>The <code>getAmount</code> receives the product object and returns only the <code>amount</code> value. So what we have here is <code>[10, 30, 20, 60]</code>. And then the <code>reduce</code> combines all items by adding up. Beautiful!</p>\n<p>We took a look at how each higher order function works. I want to show you an example of how we can compose all three functions in a simple example.</p>\n<p>Talking about <code>shopping cart</code>, imagine we have this list of products in our order:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">let</span> shoppingCart = [\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Functional Programming&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;books&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">10</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Kindle&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;eletronics&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">30</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Shoes&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;fashion&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">20</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Clean Code&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;books&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">60</span> },\n];\n</code></pre>\n<p>We want the total amount of all books in our shopping cart. Simple as that. The algorithm?</p>\n<ul>\n<li><p><strong>filter</strong> by book type</p>\n</li>\n<li><p>transform the shopping cart into a collection of amount using <strong>map</strong></p>\n</li>\n<li><p>combine all items by adding them up with <strong>reduce</strong></p>\n</li>\n</ul>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">let</span> shoppingCart = [\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Functional Programming&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;books&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">10</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Kindle&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;eletronics&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">30</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Shoes&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;fashion&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">20</span> },\n  { <span class="hljs-attr">productTitle</span>: <span class="hljs-string">&#x27;Clean Code&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;books&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">60</span> },\n];\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">byBooks</span> = (<span class="hljs-params">order</span>) =&gt; order.<span class="hljs-property">type</span> == <span class="hljs-string">&#x27;books&#x27;</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">getAmount</span> = (<span class="hljs-params">order</span>) =&gt; order.<span class="hljs-property">amount</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">sumAmount</span> = (<span class="hljs-params">acc, amount</span>) =&gt; acc + amount;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">getTotalAmount</span>(<span class="hljs-params">shoppingCart</span>) {\n  <span class="hljs-keyword">return</span> shoppingCart.<span class="hljs-title function_">filter</span>(byBooks).<span class="hljs-title function_">map</span>(getAmount).<span class="hljs-title function_">reduce</span>(sumAmount, <span class="hljs-number">0</span>);\n}\n\n<span class="hljs-title function_">getTotalAmount</span>(shoppingCart); <span class="hljs-comment">// 70</span>\n</code></pre>\n<p>Done! 🎉</p>\n<h3 id="resources">Resources</h3>\n<p>I’ve organised some resources I read and studied. I’m sharing the ones that I found really interesting. For more resources, visit my <a href="https://github.com/imteekay/learning-functional-programming">Functional Programming Github repository</a>.</p>\n<ul>\n<li><a href="https://ES6.io/friend/LEANDRO">EcmaScript 6 course by Wes Bos</a></li>\n<li><a href="https://github.com/imteekay/learning-functional-programming/tree/master/ruby">Ruby specific resources</a></li>\n<li><a href="https://github.com/imteekay/learning-functional-programming/tree/master/javascript">Javascript specific resources</a></li>\n<li><a href="https://github.com/imteekay/learning-functional-programming/tree/master/clojure">Clojure specific resources</a></li>\n</ul>\n<h4 id="intros">Intros</h4>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=e-5obm1G_FY">Learning FP in JS</a></li>\n<li><a href="https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming">Intro do FP with Python</a></li>\n<li><a href="https://blog.codeship.com/overview-of-functional-programming">Overview of FP</a></li>\n<li><a href="https://hackernoon.com/a-quick-introduction-to-functional-javascript-7e6fe520e7fa">A quick intro to functional JS</a></li>\n<li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0">What is FP?</a></li>\n<li><a href="https://github.com/hemanth/functional-programming-jargon">Functional Programming Jargon</a></li>\n</ul>\n<h4 id="pure-functions-1">Pure functions</h4>\n<ul>\n<li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976">What is a pure function?</a></li>\n<li><a href="https://www.fpcomplete.com/blog/2017/04/pure-functional-programming">Pure Functional Programming 1</a></li>\n<li><a href="https://www.fpcomplete.com/blog/2017/05/pure-functional-programming-part-2">Pure Functional Programming 2</a></li>\n</ul>\n<h4 id="immutable-data">Immutable data</h4>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=Wo0qiGPSV-s">Immutable DS for functional programming</a></li>\n<li><a href="http://henrikeichenhardt.blogspot.com/2013/06/why-shared-mutable-state-is-root-of-all.html">Why shared mutable state is the root of all evil</a></li>\n</ul>\n<h4 id="higher-order-functions-1">Higher-order functions</h4>\n<ul>\n<li><a href="https://eloquentjavascript.net/05_higher_order.html">Eloquent JS: Higher Order Functions</a></li>\n<li><a href="https://www.youtube.com/watch?v=BMUiFMZr7vk&amp;t=0s&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&amp;index=2&amp;ab_channel=FunFunFunction">Fun fun function Filter</a></li>\n<li><a href="https://www.youtube.com/watch?v=bCqtb-Z5YGQ&amp;index=2&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&amp;ab_channel=FunFunFunction">Fun fun function Map</a></li>\n<li><a href="https://www.youtube.com/watch?v=Wl98eZpkp-c&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&amp;index=3&amp;frags=wn&amp;ab_channel=FunFunFunction">Fun fun function Basic Reduce</a></li>\n<li><a href="https://www.youtube.com/watch?v=1DMolJ2FrNY&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&amp;index=4&amp;ab_channel=FunFunFunction">Fun fun function Advanced Reduce</a></li>\n<li><a href="https://clojure.org/guides/higher_order_functions">Clojure Higher Order Functions</a></li>\n<li><a href="https://purelyfunctional.tv/lesson/filter/">Purely Function Filter</a></li>\n<li><a href="https://purelyfunctional.tv/lesson/map/">Purely Functional Map</a></li>\n<li><a href="https://purelyfunctional.tv/lesson/reduce/">Purely Functional Reduce</a></li>\n</ul>\n<h4 id="declarative-programming">Declarative Programming</h4>\n<ul>\n<li><a href="https://tylermcginnis.com/imperative-vs-declarative-programming/">Declarative Programming vs Imperative</a></li>\n</ul>\n<h2 id="thats-it">That’s it!</h2>\n<p>Hey people, I hope you had fun reading this post, and I hope you learned a lot here! This was my attempt to share what I’m learning.</p>\n<p><a href="https://github.com/tk-notes/fp-in-javascript-article-source-code">Here is the repository with all codes</a> from this article.</p>\n<p>Come learn with me. I’m sharing resources and my code in this <a href="https://github.com/imteekay/learning-functional-programming">Learning Functional Programming repository</a>.</p>\n<p>I also wrote an <a href="https://medium.freecodecamp.org/an-introduction-to-the-basic-principles-of-functional-programming-a2c2a15c84">FP post but using mainly Clojure</a> ❤.</p>\n<p>I hope you saw something useful to you here. And see you next time! :)</p>\n',
  },
  {
    title:
      'How I received 4 salary raises in 2 years of QuintoAndar as a Software Engineer',
    content:
      '<p>Or how to be a <em>Rebel at Work</em>.</p>\n<hr>\n<p><em>Disclaimer:</em></p>\n<ol>\n<li>these ideas and insights come from a privileged person working in a very privileged industry.</li>\n<li>my intent is not to show off, but to share my experience and I hope you can steal some ideas.</li>\n<li>it&#39;s ok to see money as a valuable capital in your life, but I&#39;ll focus on how I keeo improving my craft in this post.</li>\n</ol>\n<h2 id="before-telling-my-experience">Before telling my experience</h2>\n<p>In this essay, I&#39;ll talk about skills, experiences, opportunities, and mindset. Basically how I became better at my own craft.</p>\n<p>My focus was always on the journey and I didn&#39;t intend to grow at the company. This was not my goal. I actually didn&#39;t have a real goal, just wanted to have fun while working, search for autonomy and control, and have a space I could learn a lot.</p>\n<p>With that in mind, my experience may not help you &quot;climb&quot; the <em>Career Ladder</em>. But I hope you can steal some ideas and use them in your favor for better working life.</p>\n<p>Also, if your goal is to grow at the company, climb the career ladder, and get raises, maybe I&#39;ll write about it in the future, but here are two (shallow) advice:</p>\n<ul>\n<li><em>Understand the career ladder (if your company has one)</em>: to be able to get promotions, you need to understand where you are at and what are the expectations for the next level.</li>\n<li><em>Work with your manager</em>: use One-on-One meetings to sync the career ladder expectations, receive feedback, ask for projects you could work on. Everything that can help you go to the next level.</li>\n</ul>\n<p>There are many other things you can do to get raises, but, for me, these are the fundamental pieces that will help you take the first step. And as I don&#39;t want this essay to focus on promotions, I&#39;ll probably write a separate article for this topic. But you can find awesome content on the internet that is probably better than my future one.</p>\n<h2 id="my-experience">My Experience</h2>\n<h3 id="external-factors">External Factors</h3>\n<p>To start, I have to say that I had important <em>External Factors</em>. QuintoAndar is one of the fastest-growing startups in Brazil. Today it&#39;s valued at $5.1 billion. It&#39;s an innovative company in the real estate industry, and it has a business model that works well in Brazil.</p>\n<p>The fact that it&#39;s a company that&#39;s making money, was invested a huge amount of capital, and keeps growing, it&#39;s a very important factor when it comes to getting raises and promotions.</p>\n<p>Besides this, it&#39;s a company that attracts real talented people, not only in engineering but in the product and other organizations too.</p>\n<p>IMHO, the culture is great for engineers as I always felt that it was a safe place to expose and discuss my and new ideas, to share my honest opinion on what was working or not, and was always incentivized to challenge the status quo.</p>\n<p>So these are the important <em>external factors</em> that had nothing to do with my skills and work:</p>\n<ul>\n<li>QuintoAndar is a fast-growing company</li>\n<li>It kept growing financially over the years</li>\n<li>Real talented people</li>\n<li>Great culture (but not only) for engineers</li>\n</ul>\n<h3 id="achieving-my-teams-goals">Achieving my team&#39;s goals</h3>\n<p>Before anything else, my focus was always on my team and our quarter goals. It was truly important to me that I understand the team&#39;s goals, the business metrics we should look at, and why we were doing this list of features.</p>\n<p>To have everybody on board, we had a Notion page with everything business and product-related to our team. I also created a dashboard with all the important pages we had in the Amplitude platform to be easier to access key metrics.</p>\n<p>Understanding <em>why</em> is just the first step. As engineers, one of our responsibilities is to help and come up with solutions for the <em>how</em>.</p>\n<p>Collaborating with the product manager, the designer, and the other engineers here is key to succeeding as a team. I think this part not many people talk about and it was always a bit fuzzy for me when I first started working in software engineering. <em>Collaborating</em> means a lot of different things here, but I&#39;ll list some ideas I executed in the past:</p>\n<ul>\n<li>Ideas can come from different places: your manager, the PM, the designer, or any other person outside your team. After understanding the idea (and most importantly, the problem), you help shape and polish the solution with your engineering background and knowledge from the current system you&#39;re working on.<ul>\n<li>You probably understand the pain points from the system you&#39;re working on.</li>\n<li>With your background, you can think of different solutions: each with its own effort and time you and your team will be needed to spend on.</li>\n<li>Negotiate to have more time to polish the chosen solution after the implementation that needed to be deployed faster to the real user but lacked a bit of the engineering best practices.</li>\n<li>Or better, negotiate to have time to deliver the feature or product with best practices already built-in.</li>\n</ul>\n</li>\n<li>Ideas can come from you: a feature, a product, or an improvement that you saw that could improve the user experience and business metrics. Later, we&#39;ll talk about my experience leading the <a href="/optimizing-the-performance-of-a-react-progressive-web-app">web performance project</a> and being a product-minded software engineer.</li>\n<li>Create a safe space to collaborate: it&#39;s easy when the company&#39;s culture already creates this space that you feel safe to discuss ideas, come up with your own, or disagree with others. Having a more and more diverse team was important to enrich the discussions we had in the team, and having a safe space is the building block that enables people to discuss without fear of judgment.<ul>\n<li>Creating space by asking everybody in the team to ask questions, discuss, and share their opinions.</li>\n<li>Actively listen to people, care about what they are saying, and document the insights to use to polish the ideas discussed.</li>\n<li>Having better processes for developing products: a space to discuss the strategy, a space to discuss quarter&#39;s goals and metrics, a space to discuss the engineering challenges and architectures/solutions.</li>\n</ul>\n</li>\n</ul>\n<p>The thing is, as you mature as an engineer, you not only code to deliver products but you collaborate in all aspects of software engineering. You understand that making the team, the processes, the delivery, and the dev experience better are part of your &quot;<em>responsibility</em>&quot;.</p>\n<h3 id="challenge-the-status-quo-everything-can-be-improved">Challenge the status quo: everything can be improved</h3>\n<p>I need to emphasize that the QuintoAndar&#39;s culture not only expected me to challenge the status quo but I was always incentivized to improve – or create awareness – about everything that was suboptimal. So it was always an environment where I could question everything and experiment with ideas and then improve things that were not working or could be better.</p>\n<p>When thinking about improving stuff in a company, the goal is to make the organization better. I could think of processes, technologies, the team&#39;s culture, the developer experience, and so on.</p>\n<p>My idea was always to <a href="http://paulgraham.com/ds.html"><em>do things that don&#39;t scale</em></a> first: focus on my team, try experiments, learn with this process, and improve it. Do this cycle until the idea gets matured. When I felt it was ready to scale, I could share it in more broad scope, like a tribe (a set of squads/teams) or for the whole organization.</p>\n<p>A good solution always comes up with a well-defined problem (or a well-defined <em>thing</em> that could be improved). This is why understanding the problem and the context is so important. Living and breathing the engineering problems on a daily basis gave me a lot of understanding of how things worked and enabled me to think of solutions to make it better.</p>\n<p>As I was working in a big tech company, the technologies, patterns, and conventions are extremely important to make us move fast but always with quality in mind.</p>\n<p>My first initiative was to create guidelines about how we used React, optimizations, immutability, and testing in JavaScript and React. Guideline documents are a nice initiative because first, we can normalize the conventions and patterns cross-company, and second, they gave awareness about these topics and as engineers, we could discuss the conventions we wanted to adopt and formalize. I liked the whole process, mainly because it was always nice to receive feedback, different views, and insights from other engineers and we could come up with great solutions for frequently problems we face on a daily basis.</p>\n<p>With this first initiative, I gained confidence that I could improve more and more things in the engineering scope. For every problem that I faced, I documented the solutions and patterns that I came up with and shared them with other engineers.</p>\n<p>I remember when we didn&#39;t have the opportunity to use Hooks in our PWAs. So I made some experiments (<a href="/react-hooks-context-api-and-pokemons">React Hooks, Context API, and Pokemons</a>) and shared them.</p>\n<p>Regarding JavaScript patterns, I also experimented with some ideas on <a href="/closure-currying-and-cool-abstractions">Closures and Currying</a>, <a href="/building-an-abstraction-for-react-internationalization-messages">Internationalization abstraction in React</a>, and <a href="/functional-programming-principles-in-javascript">Functional Programming</a>.</p>\n<p>As our codebase was getting more and more complex, it started to get difficult to reason about it, mostly the state management part, which we were heavily using Redux.</p>\n<p><a href="/consistent-state-management-in-react-and-redux">&quot;Typing&quot; our state management</a> gave us more confidence and make it more clear how data was structured in the app.</p>\n<p>Choosing TypeScript to handle this made me study a bit more and create a <a href="/a-mental-model-to-think-in-typescript">Mental Model to think in TypeScript</a>. As we were using React in almost all codebases, it was important to have examples of <a href="/ux-studies-with-react-typescript-and-testing-library">how React and TypeScript can work together</a>.</p>\n<p>Testing applications was a topic people were always interested in the company. We had mini guilds to discuss these ideas and create patterns and conventions we wanted to use. I could share my two experiments: <a href="/tdd-functions-and-react-components">TDD, JavaScript, and React</a> and <a href="/basic-recipes-for-react-testing-library">Basic Recipes for React Testing Library</a>. I think TDD is a more personal process, but using the testing library was our default choice to test our applications.</p>\n<p>Technology is always changing and improving. We saw many libraries coming up and two gained our attention: <a href="https://react-query.tanstack.com/">react-query</a> and <a href="https://swr.vercel.app/">swr</a>. I could make experiments with both and my colleague and I came up with an Architecture Decision Record (ADR) for <a href="/data-fetching-in-react-with-react-query">react-query</a>. We saw the potential to use this pattern and replace redux-pack and redux-saga, which were bottlenecks in terms of performance for us. Also, react-query brings a more intuitive approach and focuses on the server cache challenge.</p>\n<p>Besides technology, we can think of developer experience. Engineering time is getting more and more important.</p>\n<blockquote class="twitter-tweet"><p lang="en" dir="ltr">We recently found that the new 2021 M1 MacBooks cut our Android build times in half.<br><br>So for a team of 9, $32k of laptops will actually save $100k in productivity over 2022. The break-even point happens at 3 months.<br><br>TL;DR Engineering hours are much more expensive than laptops!</p>&mdash; Jameson (@softwarejameson) <a href="https://twitter.com/softwarejameson/status/1455971162060697613?ref_src=twsrc%5Etfw">November 3, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>\n\n<p>But in my opinion, it&#39;s not only important but can be crucial for many companies that are scaling their business. You don&#39;t need a separate team or a platform squad to improve the engineer&#39;s productivity, we as engineers can always design better processes and solve productivity bottlenecks. It&#39;s up to us to talk to our managers, allocate more time for this type of work, or even create a new team from scratch.</p>\n<p>I did work on developer experience and I need to say that I had a blast. I wrote a whole piece about this experience if you want to take a look at it: <a href="/dx-and-software-maintainability-in-frontend-engineering">DX &amp; Software Maintainability in Frontend Engineering</a>.</p>\n<p>But in summary, I worked on the engineers&#39; pain points at that time:</p>\n<ul>\n<li><em>Monitoring</em>: instrument the new system, create dashboard links, document how to use monitoring systems on a daily basis.</li>\n<li><em>Tests</em>: experiment with new testing toolings, share the insights from these experiences, write guidelines and examples on how to use them, show different patterns.</li>\n<li><em>CI/CD</em>: not only optimized the CI builds to tune developers&#39; productivity but also automated the release process. Before it was GitHub tags, now they just need to merge the PR and it automatically deploys the new change.</li>\n<li><em>Code Formatting</em>: now using prettier together with ESLint&#39;s rules. I was able to format the whole codebase with prettier in less than a week. And with confidence as we had quality automated tests and our monitoring system backing us. Also was able to implement a pre-commit hook to run prettier and ESLint for every commit made on the repository.</li>\n<li><em>Web Performance</em>: I had the opportunity to work on a web performance project before, but in this case, I could work on instrumenting performance tooling to collect real user metrics (<a href="https://web.dev/vitals/">Core Web Vitals</a>).</li>\n</ul>\n<p><em>Monitoring</em> and <em>Tests</em> were the building blocks to do more experiments, refactoring, and change code with confidence. Formatting code automatically was a huge gain in letting engineers discuss business rules and architecture instead of debating if you need to add a semicolon or not. Web performance tooling was the building block to measure any initiative related to improving the performance of that software. Making <em>CI</em> faster improved the experience for every engineer that worked on that project. Building a <em>Continuous Delivery</em> also makes the developer experience smoother.</p>\n<p>And the last piece in this <em>Challenge the status quo</em> part is <em>Knowledge Sharing</em>.</p>\n<p>For me, everything that I learn, research, or experiment, I like to document and share. The document format can vary. It can be an article, a guideline, a Notion document, slides to use for tech talks, or simple notes on my Moleskine to be used to create content based on this draft.</p>\n<p>I&#39;ve been doing this for 8 years now and everything is documented here: <a href="/writings">writings</a>.</p>\n<p>It&#39;s a way to share my learnings with my teammates, but also share ideas with the tech communities. Having this process helps me craft my thoughts and learn more about each topic I experimented with before.</p>\n<p>First <em>writing</em>, second any kind of content I want to share. Writing down and organizing the ideas and experiments is the foundation to create any other content. With the written article, I basically detailed everything I wanted to share and it could turn into guidelines (the example here was the <a href="/basic-recipes-for-react-testing-library">testing recipes</a>), engineering critics, or slides for a tech talk, as I did for <em><a href="/optimizing-the-performance-of-a-react-progressive-web-app">Web Performance Improvements</a></em>.</p>\n<p>But the thing that I liked the most was turning my writings into topics to discuss with the team. We had a group meeting called <em>Guildinha</em>, or Little Guild, and every engineer could plan the meeting with a topic in mind. It was always an informal meeting to chat, discuss, and learn from each other.</p>\n<p>With more knowledge and experience I could also mentor informally and formally my colleagues throughout the 3 years I was working there. It was always nice to talk to other people, help them grow in their careers, and impact their work somehow.</p>\n<h3 id="improving-my-craft">Improving my Craft</h3>\n<p>Among all topics I&#39;m covering in this article, this is what I find the most interesting: <em>Improving my Craft</em>.</p>\n<p>I partially wrote about this before in two essays:</p>\n<ul>\n<li><a href="/designing-my-lifes-system">Designing my Life&#39;s System</a></li>\n<li><a href="/designing-my-learning-experience">Designing my Learning Experience</a></li>\n</ul>\n<p>I know I&#39;m not a machine, but I&#39;m constantly looking for ways to learn more and gain more knowledge about things I care about. Every day. Every time. Forever.</p>\n<p>I&#39;ve been rethinking the way I learn in my free time and usually, I have three ways</p>\n<ul>\n<li>Fundamentals</li>\n<li>On-demand</li>\n<li>Local Maxima vs Global Maxima</li>\n</ul>\n<p>When I think about fundamentals, I think of <em>First Principles</em>. What are the building blocks of software engineering? What are we absolutely sure is true? And reasoning from this principle, we can understand and solve more difficult and complex problems.</p>\n<p>In software engineering, we have an ocean of things we can learn. When I was a backend engineer, my focus was on understanding APIs, system architecture, automated tests, and databases. For each topic, I could go deep and understand the building block of each one of them. With a better understanding, I could link this knowledge (or &quot;connect the dots&quot;) and solve more difficult problems in backend engineering.</p>\n<p>This worked the same way for frontend engineering. I started with HTML and CSS and then learned more about JavaScript. Now we have other things we need a better understanding of to do the work (or at least more complex work) like build systems (the compilers and bundlers), automated tests (for components and integration), browsers engines, and so on.</p>\n<p>Knowledge is infinity and I won&#39;t learn everything but reasoning from first principles helps me not only solve complex problems but also understand what are the knowledge gaps that I&#39;m missing.</p>\n<p>On-demand way of learning is basically when I have a new challenge at work or in my side-project and I need this specific kind of knowledge to solve the problem. It happened when I needed to understand monitoring, testing, and web performance at work and it&#39;s also happening on my current side-project which I need to have a better understanding of CMS and text editors.</p>\n<p>And Local Maxima vs Global Maxima is one of the things that I learned these days. It was very counterintuitive for me but as I&#39;m doing more and more it got clear to me how important it&#39;s to diversify your knowledge portfolio.</p>\n<p>If you&#39;re a JavaScript engineer, the obvious choice is to keep learning about JavaScript but soon you can get trapped in the local maxima. What I did was to first get one step away from my comfort zone and <a href="/a-mental-model-to-think-in-typescript">learn TypeScript</a> and <a href="https://github.com/imteekay/programming-with-types">how to get the best out of type systems</a>. My next step was to learn more about browsers, <a href="https://github.com/imteekay/algorithms">algorithms</a> &amp; <a href="/series/data-structures">data structures</a>. Now I&#39;m investing my time and effort in <a href="/series/building-an-interpreter">learning about compilers</a>, <a href="https://github.com/imteekay/minibundler">how bundlers work</a>, and Rust. Everything I&#39;ve been learning has a direct or indirect impact on my work and how I think about engineering.</p>\n<p>At work, it was no different. My approach was to actively look for feedback, from my managers and peers, and figure out how to be a better software/product engineer.</p>\n<p>Actively looking for feedback is a habit that I wanted to start earlier in my career. In the early days, my thoughts were &quot;feedback is great, I&#39;m always open to receiving feedback&quot;. But it was not enough. I did at my last job was to have a weekly meeting with my manager and always ask about her perspective about my work on that week:</p>\n<ul>\n<li>The things I was doing well and should keep doing</li>\n<li>The things I was doing ok and could improve or could do more</li>\n<li>The things I was doing were not that great and could improve</li>\n</ul>\n<p>I think these bullet points are a good starting point to discuss things I could learn, do, and build habits.</p>\n<p>The other thing was to provide feedback and ideas to make the project better. I had a weekly log about the things that could be better and I shared it with my manager to discuss how to implement them in our processes and project&#39;s codebases.</p>\n<p>Another effective way to receive feedback is to work on your <a href="/building-an-individual-development-plan-with-notion">IDP (Individual Development Plan)</a>. I wrote about that before but the idea is to develop a plan for your (career) growth. With this shared document, I could always debate with my manager about the path I was following, what I was learning, what were things I was interested in, and receive feedback and advice on how to improve my actions and habits. It&#39;s also a nice way to become more self-aware and share with your manager the things you like the most and possibly receive projects that have the intersections of your skills and interests. I really liked working on my IDP and I came up with a public version of it to share with my teammates. Everyone knew what I was learning and it was the starting point to discuss and share more knowledge within the team.</p>\n<p>But It&#39;s ok if you don&#39;t want to create a plan to grow in your career. There are always other ways to incentivize receiving (and giving) feedback in your team. To receive feedback from my peers I first gave feedback (informal and formal) for each one of them and kindly shared that if they had time, I would be happy to receive feedback too.</p>\n<p>Regarding figuring out how to be a better product/software engineer, there are very interesting articles about product-minded engineers out there but I&#39;ll give my two cents on this topic through my lens and experience.</p>\n<p>For me, the first step is to understand the product you are working on.</p>\n<p>Is it a product for <em>final users</em>?</p>\n<ul>\n<li>who are the clients?</li>\n<li>can I understand their behavior through data?</li>\n<li>talk to designers who interviewed them, and have documented insights.</li>\n<li>how does the business work?</li>\n</ul>\n<p>Is it a product for <em>internal stakeholders</em>?</p>\n<ul>\n<li>what are the goals of these stakeholders when using this product?</li>\n<li>what are the missing functionalities?</li>\n<li>what are the general complaints?</li>\n</ul>\n<p>Is it a <em>product for engineers</em>?</p>\n<ul>\n<li>what&#39;s their current workflow?</li>\n<li>what are the things they are happy about?</li>\n<li>what are the things they are angry about?</li>\n</ul>\n<p>But for all three (and any other) groups, we can always think about UX (what are the UX pain points?) and find ways to help them achieve their goal.</p>\n<p>Figuring out which product you&#39;re working on is a good starting point. Asking a lot of questions about the business, the users, and how it is used are also tools to gain more knowledge about the product.</p>\n<p>The second thing I usually do is to understand the next steps, the OKR, the goals of the team regarding the product. Understanding why we are creating this feature <em>X</em>, the related metrics we want to achieve, and actively participating in discussions to debate <em>what</em> and <em>how</em> to do things.</p>\n<p>Having open doors to engineers in these meetings is awesome because we can not only help thinking about product ideas but also give insights into the software underneath the product. As we have the engineering and the software background, it&#39;s very useful when creating strategies and debating engineering X product tradeoffs.</p>\n<p>Don&#39;t miss the opportunity to learn more about the product and actively participate in strategy and planning meetings if it&#39;s possible.</p>\n<h3 id="challenge-yourself-with-interesting-projects">Challenge yourself with interesting projects</h3>\n<p>Interesting projects can be the building block for your learning experience at work. While doing a challenging project, you&#39;ll probably learn a lot. Things you don&#39;t know and need to search and learn. Things you know and could do the best work. After finishing this kind of project, it&#39;s nice to do a retrospective on things that went well and things that you could do better. It&#39;s always a learning experience.</p>\n<p>I like challenging projects because, first, I like challenges. Second, because I always have fun at work when I have the opportunity to learn new things. And finally, because I like to look at my past self and be proud of the work I did.</p>\n<p>Things I did:</p>\n<ul>\n<li>Built products and business from scratch:<ul>\n<li>Built a whole new app for photographers</li>\n<li>Built the for sale business in the affiliates product</li>\n</ul>\n</li>\n<li><a href="/optimizing-the-performance-of-a-react-progressive-web-app">Web Performance optimizations for the real estate&#39;s owners product</a></li>\n<li><a href="/dx-and-software-maintainability-in-frontend-engineering">Developer Experience in frontend engineering</a></li>\n<li>CI/CD optimizations, monitoring systems, and <a href="/basic-recipes-for-react-testing-library">automated tests</a></li>\n</ul>\n<p>In all these projects I could always learn a lot. Building the photographers app was the first time I worked with serverless functions and React. Building the affiliate product was the first time I worked with Clojure and the payment system. Improving web performance was the first time I worked with performance in the web and build tooling (mostly Webpack) in depth. Thinking about DX gave me a macro perspective about the engineer&#39;s workflow and I can apply this knowledge in other places as well.</p>\n<p>Challenging projects are always great tools for self-improvement as they are opportunities to keep learning and improving your craft. Seek interesting projects and keep learning. The feeling to look to your past self and be proud of your decisions and development is amazing.</p>\n<h3 id="keep-a-journal">Keep a Journal</h3>\n<p>I have a habit to document everything. From things I&#39;m learning to book&#39;s notes. From articles ideas to daily journals. Journaling is part of my day and it helps me think and opens space to reflect on the things I did in the past.</p>\n<p>These are a series of ideas I came across and you can use in your favor as well:</p>\n<p>Document all the things I accomplished</p>\n<ul>\n<li><code>What</code>: What was the project I was working on, the problem I was solving, or features I implemented.</li>\n<li><code>How</code>: How were the solution and the architecture decision, which PRs I worked on, what were the tradeoffs, how the team worked together, and what was my role in this whole project.</li>\n<li><code>Learnings</code>: What are things I would do differently – it can be architecture, solution, process, delegation, communication, prioritization, anything that could be improved and you can use it as a learning experience for another project.</li>\n</ul>\n<p>Understand the impact of your work</p>\n<ul>\n<li>The first things that should be 100% clear to me are: what&#39;s the problem we are solving, why (this usually come from the PM, designer, or business people), and how we should solve this.</li>\n<li>With that in mind, I keep my eye on the important &quot;metrics&quot;:<ul>\n<li><code>business/ux</code>: I work together with PMs and designers to understand the business metrics and OKRs we&#39;ll be looking at.</li>\n<li><code>engineering</code>: performance, build time, error logs, monitoring systems.</li>\n<li><code>dx</code>: feedback from my teammates about what are the pain points and create initiatives to solve these problems.</li>\n</ul>\n</li>\n</ul>\n<p>Weekly documents</p>\n<ul>\n<li>As I told you, I document everything. It&#39;s a habit. At the end of the week, I tend to compile all my daily documents in a weekly document.</li>\n<li>It&#39;s cool to see what I&#39;ve been working on, what I&#39;ve learned, and the challenges I had to overcome.</li>\n</ul>\n<p>Quarter document</p>\n<ul>\n<li>It is also great to document in this way because I can just compound all notes I wrote at the end of the quarter, and it works like a report document for everyone at the company that wants to know what I&#39;ve been doing.</li>\n<li>This document also serves as a &quot;brag document&quot; to talk to your manager.</li>\n<li>It&#39;s easy for your manager to understand your accomplishments.</li>\n<li>It&#39;s easy for your manager to use this document to work on your promotion (if you&#39;re interested in this).</li>\n</ul>\n<p>This is why I think documentation and journals are powerful. Making it a tiny habit has a huge impact after compounding all your work. As engineers, we tend to focus on the little things in our daily lives, but having this macro vision about our work is rewarding. It makes me proud and aware of my self-development.</p>\n<h2 id="final-words">Final words</h2>\n<p>As I wrote at the beginning of this essay, even though the title is a true story and money is a valuable and important capital in our lives, I wanted to talk about skills, experiences, opportunities, and mindset. Basically how I became better at my own craft. And I hope this piece can help you in some way in your career. Feel free to steal some ideas you find interesting and apply them in your life.</p>\n<p>Finally, I need to say <em>Thanks!</em> to QuintoAndar for its great culture and the amazing people I worked with: my peers, my managers and leaders, and stakeholders that enabled me to be the best version of myself. I only have gratitude.</p>\n<h2 id="resources">Resources</h2>\n<h3 id="writings">Writings</h3>\n<ul>\n<li><a href="/optimizing-the-performance-of-a-react-progressive-web-app">Optimizing the Performance of a React Progressive Web App</a></li>\n<li><a href="/react-hooks-context-api-and-pokemons">React Hooks, Context API, and Pokemons</a></li>\n<li><a href="/closure-currying-and-cool-abstractions">Closures, Currying, and Cool Abstractions</a></li>\n<li><a href="/building-an-abstraction-for-react-internationalization-messages">Building an abstraction for React intl messages</a></li>\n<li><a href="https://iamtk.co/functional-programming-principles-in-javascript">Functional Programming Principles in JavaScript</a></li>\n<li><a href="/consistent-state-management-in-react-and-redux">Consistent State Management in React and Redux</a></li>\n<li><a href="https://iamtk.co/a-mental-model-to-think-in-typescript">A Mental Model to think in TypeScript</a></li>\n<li><a href="https://iamtk.co/ux-studies-with-react-typescript-and-testing-library">UX Studies with React, TypeScript, and Testing Library</a></li>\n<li><a href="/tdd-functions-and-react-components">TDD, simple functions, and React components</a></li>\n<li><a href="/basic-recipes-for-react-testing-library">Basic Recipes for React Testing Library</a></li>\n<li><a href="/data-fetching-in-react-with-react-query">Data Fetching in React with react-query</a></li>\n<li><a href="/dx-and-software-maintainability-in-frontend-engineering">DX &amp; Software Maintainability in Frontend Engineering</a></li>\n</ul>\n<h3 id="series">Series</h3>\n<ul>\n<li><a href="/series/data-structures">Data Structures series</a></li>\n<li><a href="/series/building-an-interpreter">Building an Interpreter Series</a></li>\n</ul>\n<h3 id="learning">Learning</h3>\n<ul>\n<li><a href="/designing-my-lifes-system">Designing my Life&#39;s System</a></li>\n<li><a href="/designing-my-learning-experience">Designing my Learning Experience</a></li>\n<li><a href="/building-an-individual-development-plan-with-notion">Building a simple Individual Development Plan (IDP) with Notion</a></li>\n<li><a href="https://leaddev.com/culture-engagement-motivation/compromise-and-collaboration-working-product">Compromise and collaboration: Working with product</a></li>\n<li><a href="https://www.getrevue.co/profile/lucianohgo/issues/nope-practice-does-not-make-perfect-lu-s-newsletter-issue-4-423806">Nope, Practice does not make perfect</a></li>\n<li><a href="https://fs.blog/first-principles/">First Principles: The Building Blocks of True Knowledge</a></li>\n<li><a href="https://jamesclear.com/first-principles">First Principles: Elon Musk on the Power of Thinking for Yourself</a></li>\n</ul>\n<h3 id="interesting-resources">Interesting resources</h3>\n<ul>\n<li><a href="https://jvns.ca/blog/brag-documents/">Get your work recognized: write a brag document</a></li>\n<li><a href="http://paulgraham.com/ds.html">Do Things that Don&#39;t Scale</a></li>\n<li><a href="https://react-query.tanstack.com/">react-query</a></li>\n<li><a href="https://swr.vercel.app/">swr</a></li>\n</ul>\n',
  },
  {
    title: 'Learning Python: From Zero to Hero',
    content:
      '<p>First of all, what is Python? According to its creator, Guido van Rossum, Python is a:</p>\n<blockquote>\n<p>“high-level programming language, and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code.”</p>\n</blockquote>\n<p>For me, the first reason to learn Python was that it is, in fact, a beautiful programming language. It was really natural to code in it and express my thoughts.</p>\n<p>Another reason was that we can use coding in Python in multiple ways: data science, web development, and machine learning all shine here. Quora, Pinterest and Spotify all use Python for their backend web development. So let’s learn a bit about it.</p>\n<h3 id="the-basics">The Basics</h3>\n<h4 id="1-variables">1. Variables</h4>\n<p>You can think about variables as words that store a value. Simple as that.</p>\n<p>In Python, it is really easy to define a variable and set a value to it. Imagine you want to store number 1 in a variable called “one.” Let’s do it:</p>\n<pre><code class="hljs language-python">one = <span class="hljs-number">1</span>\n</code></pre>\n<p>How simple was that? You just assigned the value 1 to the variable “one.”</p>\n<pre><code class="hljs language-python">two = <span class="hljs-number">2</span>\nsome_number = <span class="hljs-number">10000</span>\n</code></pre>\n<p>And you can assign any other <strong>value</strong> to whatever other <strong>variables</strong> you want. As you see in the table above, the variable “<strong>two</strong>” stores the integer <strong>2</strong>, and “<strong>some_number</strong>” stores <strong>10,000</strong>.</p>\n<p>Besides integers, we can also use booleans (True / False), strings, float, and so many other data types.</p>\n<pre><code class="hljs language-python"><span class="hljs-comment"># booleans</span>\ntrue_boolean = <span class="hljs-literal">True</span>\nfalse_boolean = <span class="hljs-literal">False</span>\n\n<span class="hljs-comment"># string</span>\nmy_name = <span class="hljs-string">&quot;Leandro Tk&quot;</span>\n\n<span class="hljs-comment"># float</span>\nbook_price = <span class="hljs-number">15.80</span>\n</code></pre>\n<h4 id="2-control-flow-conditional-statements">2. Control Flow: conditional statements</h4>\n<p>“<strong>If</strong>” uses an expression to evaluate whether a statement is True or False. If it is True, it executes what is inside the “if” statement. For example:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:\n  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello Python If&quot;</span>)\n\n<span class="hljs-keyword">if</span> <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span>:\n  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2 is greater than 1&quot;</span>)\n</code></pre>\n<p><strong>2</strong> is greater than <strong>1</strong>, so the “<strong>print</strong>” code is executed.</p>\n<p>The “<strong>else</strong>” statement will be executed if the “<strong>if</strong>” expression is <strong>false</strong>.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span>:\n  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1 is greater than 2&quot;</span>)\n<span class="hljs-keyword">else</span>:\n  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1 is not greater than 2&quot;</span>)\n</code></pre>\n<p><strong>1</strong> is not greater than <strong>2</strong>, so the code inside the “<strong>else</strong>” statement will be executed.</p>\n<p>You can also use an “<strong>elif</strong>” statement:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span>:\n  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1 is greater than 2&quot;</span>)\n<span class="hljs-keyword">elif</span> <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span>:\n  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1 is not greater than 2&quot;</span>)\n<span class="hljs-keyword">else</span>:\n  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1 is equal to 2&quot;</span>)\n</code></pre>\n<h4 id="3-looping--iterator">3. Looping / Iterator</h4>\n<p>In Python, we can iterate in different forms. I’ll talk about two: <strong>while</strong> and <strong>for</strong>.</p>\n<p><strong>While</strong> Looping: while the statement is True, the code inside the block will be executed. So, this code will print the number from <strong>1</strong> to <strong>10</strong>.</p>\n<pre><code class="hljs language-python">num = <span class="hljs-number">1</span>\n\n<span class="hljs-keyword">while</span> num &lt;= <span class="hljs-number">10</span>:\n    <span class="hljs-built_in">print</span>(num)\n    num += <span class="hljs-number">1</span>\n</code></pre>\n<p>The <strong>while</strong> loop needs a “**loop condition.**” If it stays True, it continues iterating. In this example, when <code>num</code> is <code>11</code> the <strong>loop condition</strong> equals <code>False</code>.</p>\n<p>Another basic bit of code to better understand it:</p>\n<pre><code class="hljs language-python">loop_condition = <span class="hljs-literal">True</span>\n\n<span class="hljs-keyword">while</span> loop_condition:\n    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Loop Condition keeps: %s&quot;</span> %(loop_condition))\n    loop_condition = <span class="hljs-literal">False</span>\n</code></pre>\n<p>The <strong>loop condition</strong> is <code>True</code> so it keeps iterating — until we set it to <code>False</code>.</p>\n<p><strong>For Looping</strong>: you apply the variable “<strong>num</strong>” to the block, and the “<strong>for</strong>” statement will iterate it for you. This code will print the same as <strong>while</strong> code: from <strong>1</strong> to <strong>10</strong>.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):\n  <span class="hljs-built_in">print</span>(i)\n</code></pre>\n<p>See? It is so simple. The range starts with <code>1</code> and goes until the <code>11</code>th element (<code>10</code> is the <code>10</code>th element).</p>\n<h3 id="list-collection--array--data-structure">List: Collection | Array | Data Structure</h3>\n<p>Imagine you want to store the integer 1 in a variable. But maybe now you want to store 2. And 3, 4, 5 …</p>\n<p>Do I have another way to store all the integers that I want, but not in <strong>millions of variables</strong>? You guessed it — there is indeed another way to store them.</p>\n<p><code>List</code> is a collection that can be used to store a list of values (like these integers that you want). So let’s use it:</p>\n<pre><code class="hljs language-python">my_integers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]\n</code></pre>\n<p>It is really simple. We created an array and stored it on <strong>my_integer</strong>.</p>\n<p>But maybe you are asking: “How can I get a value from this array?”</p>\n<p>Great question. <code>List</code> has a concept called <strong>index</strong>. The first element gets the index 0 (zero). The second gets 1, and so on. You get the idea.</p>\n<p>To make it clearer, we can represent the array and each element with its index. I can draw it:</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*ReMk6NgghLII20vPD6uNEA.jpeg" alt=""></p>\n<p>Using the Python syntax, it’s also simple to understand:</p>\n<pre><code class="hljs language-python">my_integers = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]\n<span class="hljs-built_in">print</span>(my_integers[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 5</span>\n<span class="hljs-built_in">print</span>(my_integers[<span class="hljs-number">1</span>]) <span class="hljs-comment"># 7</span>\n<span class="hljs-built_in">print</span>(my_integers[<span class="hljs-number">4</span>]) <span class="hljs-comment"># 4</span>\n</code></pre>\n<p>Imagine that you don’t want to store integers. You just want to store strings, like a list of your relatives’ names. Mine would look something like this:</p>\n<pre><code class="hljs language-python">relatives_names = [\n  <span class="hljs-string">&quot;Toshiaki&quot;</span>,\n  <span class="hljs-string">&quot;Juliana&quot;</span>,\n  <span class="hljs-string">&quot;Yuji&quot;</span>,\n  <span class="hljs-string">&quot;Bruno&quot;</span>,\n  <span class="hljs-string">&quot;Kaio&quot;</span>\n]\n\n<span class="hljs-built_in">print</span>(relatives_names[<span class="hljs-number">4</span>]) <span class="hljs-comment"># Kaio</span>\n</code></pre>\n<p>It works the same way as integers. Nice.</p>\n<p>We just learned how <code>Lists</code> indices work. But I still need to show you how we can add an element to the <code>List</code> data structure (an item to a list).</p>\n<p>The most common method to add a new value to a <code>List</code> is <code>append</code>. Let’s see how it works:</p>\n<pre><code class="hljs language-python">bookshelf = []\nbookshelf.append(<span class="hljs-string">&quot;The Effective Engineer&quot;</span>)\nbookshelf.append(<span class="hljs-string">&quot;The 4 Hour Work Week&quot;</span>)\n<span class="hljs-built_in">print</span>(bookshelf[<span class="hljs-number">0</span>]) <span class="hljs-comment"># The Effective Engineer</span>\n<span class="hljs-built_in">print</span>(bookshelf[<span class="hljs-number">1</span>]) <span class="hljs-comment"># The 4 Hour Work Week</span>\n</code></pre>\n<p><code>append</code> is super simple. You just need to apply the element (eg. “<strong>The Effective Engineer</strong>”) as the <code>append</code> parameter.</p>\n<p>Well, enough about <code>Lists</code><strong>.</strong> Let’s talk about another data structure.</p>\n<h3 id="dictionary-key-value-data-structure">Dictionary: Key-Value Data Structure</h3>\n<p>Now we know that <code>Lists</code> are indexed with integer numbers. But what if we don’t want to use integer numbers as indices? Some data structures that we can use are numeric, string, or other types of indices.</p>\n<p>Let’s learn about the <code>Dictionary</code> data structure. <code>Dictionary</code> is a collection of key-value pairs. Here’s what it looks like:</p>\n<pre><code class="hljs language-python">dictionary_example = {\n  <span class="hljs-string">&quot;key1&quot;</span>: <span class="hljs-string">&quot;value1&quot;</span>,\n  <span class="hljs-string">&quot;key2&quot;</span>: <span class="hljs-string">&quot;value2&quot;</span>,\n  <span class="hljs-string">&quot;key3&quot;</span>: <span class="hljs-string">&quot;value3&quot;</span>\n}\n</code></pre>\n<p>The <strong>key</strong> is the index pointing to the <strong>value</strong>. How do we access the <code>Dictionary</code> <strong>value</strong>? You guessed it — using the <strong>key</strong>. Let’s try it:</p>\n<pre><code class="hljs language-python">dictionary_tk = {\n  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Leandro&quot;</span>,\n  <span class="hljs-string">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;Tk&quot;</span>,\n  <span class="hljs-string">&quot;nationality&quot;</span>: <span class="hljs-string">&quot;Brazilian&quot;</span>\n}\n\n<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is %s&quot;</span> %(dictionary_tk[<span class="hljs-string">&quot;name&quot;</span>])) <span class="hljs-comment"># My name is Leandro</span>\n<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;But you can call me %s&quot;</span> %(dictionary_tk[<span class="hljs-string">&quot;nickname&quot;</span>])) <span class="hljs-comment"># But you can call me Tk</span>\n<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;And by the way I&#x27;m %s&quot;</span> %(dictionary_tk[<span class="hljs-string">&quot;nationality&quot;</span>])) <span class="hljs-comment"># And by the way I&#x27;m Brazilian</span>\n</code></pre>\n<p>I created a <code>Dictionary</code> about me. My name, nickname, and nationality. Those attributes are the <code>Dictionary</code> <strong>keys</strong>.</p>\n<p>As we learned how to access the <code>List</code> using index, we also use indices (<strong>keys</strong> in the <code>Dictionary</code> context) to access the <strong>value</strong> stored in the <code>Dictionary</code>.</p>\n<p>In the example, I printed a phrase about me using all the values stored in the <code>Dictionary</code>. Pretty simple, right?</p>\n<p>Another cool thing about <code>Dictionary</code> is that we can use anything as the value. In the <code>Dictionary</code> I created, I want to add the <strong>key</strong> “age” and my real integer age in it:</p>\n<pre><code class="hljs language-python">dictionary_tk = {\n  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Leandro&quot;</span>,\n  <span class="hljs-string">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;Tk&quot;</span>,\n  <span class="hljs-string">&quot;nationality&quot;</span>: <span class="hljs-string">&quot;Brazilian&quot;</span>,\n  <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">24</span>\n}\n\n<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is %s&quot;</span> %(dictionary_tk[<span class="hljs-string">&quot;name&quot;</span>])) <span class="hljs-comment"># My name is Leandro</span>\n<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;But you can call me %s&quot;</span> %(dictionary_tk[<span class="hljs-string">&quot;nickname&quot;</span>])) <span class="hljs-comment"># But you can call me Tk</span>\n<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;And by the way I&#x27;m %i and %s&quot;</span> %(dictionary_tk[<span class="hljs-string">&quot;age&quot;</span>], dictionary_tk[<span class="hljs-string">&quot;nationality&quot;</span>])) <span class="hljs-comment"># And by the way I&#x27;m Brazilian</span>\n</code></pre>\n<p>Here we have a <strong>key</strong> (age) <strong>value</strong> (24) pair using string as the <strong>key</strong> and integer as the <strong>value</strong>.</p>\n<p>As we did with <code>Lists</code>, let’s learn how to add elements to a <code>Dictionary</code>. The <strong>key <strong>pointing to a</strong> value</strong> is a big part of what <code>Dictionary</code> is. This is also true when we are talking about adding elements to it:</p>\n<pre><code class="hljs language-python">dictionary_tk = {\n  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Leandro&quot;</span>,\n  <span class="hljs-string">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;Tk&quot;</span>,\n  <span class="hljs-string">&quot;nationality&quot;</span>: <span class="hljs-string">&quot;Brazilian&quot;</span>\n}\n\ndictionary_tk[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">24</span>\n\n<span class="hljs-built_in">print</span>(dictionary_tk) <span class="hljs-comment"># {&#x27;nationality&#x27;: &#x27;Brazilian&#x27;, &#x27;age&#x27;: 24, &#x27;nickname&#x27;: &#x27;Tk&#x27;, &#x27;name&#x27;: &#x27;Leandro&#x27;}</span>\n</code></pre>\n<p>We just need to assign a <strong>value</strong> to a <code>Dictionary</code> <strong>key</strong>. Nothing complicated here, right?</p>\n<h3 id="iteration-looping-through-data-structures">Iteration: Looping Through Data Structures</h3>\n<p>As we learned in the <a href="https://medium.com/the-renaissance-developer/python-101-the-basics-441136fb7cc3">Python Basics</a>, the <code>List</code> iteration is very simple. We <code>Python</code> developers commonly use <code>For</code> looping. Let’s do it:</p>\n<pre><code class="hljs language-python">bookshelf = [\n  <span class="hljs-string">&quot;The Effective Engineer&quot;</span>,\n  <span class="hljs-string">&quot;The 4 hours work week&quot;</span>,\n  <span class="hljs-string">&quot;Zero to One&quot;</span>,\n  <span class="hljs-string">&quot;Lean Startup&quot;</span>,\n  <span class="hljs-string">&quot;Hooked&quot;</span>\n]\n\n<span class="hljs-keyword">for</span> book <span class="hljs-keyword">in</span> bookshelf:\n    <span class="hljs-built_in">print</span>(book)\n</code></pre>\n<p>So for each book in the bookshelf, we (<strong>can do everything with it</strong>) print it. Pretty simple and intuitive. That’s Python.</p>\n<p>For a hash data structure, we can also use the <code>for</code> loop, but we apply the <code>key</code> :</p>\n<pre><code class="hljs language-python">dictionary = { <span class="hljs-string">&quot;some_key&quot;</span>: <span class="hljs-string">&quot;some_value&quot;</span> }\n\n<span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> dictionary:\n    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s --&gt; %s&quot;</span> %(key, dictionary[key]))\n\n<span class="hljs-comment"># some_key --&gt; some_value</span>\n</code></pre>\n<p>This is an example how to use it. For each <code>key</code> in the <code>dictionary</code> , we <code>print</code> the <code>key</code> and its corresponding <code>value</code>.</p>\n<p>Another way to do it is to use the <code>iteritems</code> method.</p>\n<pre><code class="hljs language-python">dictionary = { <span class="hljs-string">&quot;some_key&quot;</span>: <span class="hljs-string">&quot;some_value&quot;</span> }\n\n<span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> dictionary.items():\n    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s --&gt; %s&quot;</span> %(key, value))\n\n<span class="hljs-comment"># some_key --&gt; some_value</span>\n</code></pre>\n<p>We did name the two parameters as <code>key</code> and <code>value</code>, but it is not necessary. We can name them anything. Let’s see it:</p>\n<pre><code class="hljs language-python">dictionary_tk = {\n  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Leandro&quot;</span>,\n  <span class="hljs-string">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;Tk&quot;</span>,\n  <span class="hljs-string">&quot;nationality&quot;</span>: <span class="hljs-string">&quot;Brazilian&quot;</span>,\n  <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">24</span>\n}\n\n<span class="hljs-keyword">for</span> attribute, value <span class="hljs-keyword">in</span> dictionary_tk.items():\n    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My %s is %s&quot;</span> %(attribute, value))\n\n<span class="hljs-comment"># My name is Leandro</span>\n<span class="hljs-comment"># My nickname is Tk</span>\n<span class="hljs-comment"># My nationality is Brazilian</span>\n<span class="hljs-comment"># My age is 24</span>\n</code></pre>\n<p>We can see we used attribute as a parameter for the <code>Dictionary</code> <code>key</code>, and it works properly. Great!</p>\n<h3 id="classes--objects">Classes &amp; Objects</h3>\n<h4 id="a-little-bit-of-theory">A little bit of theory:</h4>\n<p><strong>Objects</strong> are a representation of real world objects like cars, dogs, or bikes. The objects share two main characteristics: <strong>data</strong> and <strong>behavior</strong>.</p>\n<p>Cars have <strong>data,</strong> like number of wheels, number of doors, and seating capacity They also exhibit <strong>behavior</strong>: they can accelerate, stop, show how much fuel is left, and so many other things.</p>\n<p>We identify <strong>data</strong> as <strong>attributes</strong> and <strong>behavior</strong> as <strong>methods</strong> in object-oriented programming. Again:</p>\n<p>Data → Attributes and Behavior → Methods</p>\n<p>And a <strong>Class</strong> is the blueprint from which individual objects are created. In the real world, we often find many objects with the same type. Like cars. All the same make and model (and all have an engine, wheels, doors, and so on). Each car was built from the same set of blueprints and has the same components.</p>\n<h4 id="python-object-oriented-programming-mode-on">Python Object-Oriented Programming mode: ON</h4>\n<p>Python, as an Object-Oriented programming language, has these concepts: <strong>class</strong> and <strong>object</strong>.</p>\n<p>A class is a blueprint, a model for its objects.</p>\n<p>So again, a class it is just a model, or a way to define <strong>attributes</strong> and <strong>behavior</strong> (as we talked about in the theory section). As an example, a vehicle <strong>class</strong> has its own <strong>attributes</strong> that define what <strong>objects</strong> are vehicles. The number of wheels, type of tank, seating capacity, and maximum velocity are all attributes of a vehicle.</p>\n<p>With this in mind, let’s look at Python syntax for <strong>classes</strong>:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span>:\n    <span class="hljs-keyword">pass</span>\n</code></pre>\n<p>We define classes with a class statement — and that’s it. Easy, isn’t it?</p>\n<p><strong>Objects</strong> are instances of a <strong>class</strong>. We create an instance by naming the class.</p>\n<pre><code class="hljs language-python">car = Vehicle()\n<span class="hljs-built_in">print</span>(car) <span class="hljs-comment"># &lt;__main__.Vehicle instance at 0x7fb1de6c2638&gt;</span>\n</code></pre>\n<p>Here <code>car</code> is an <strong>object</strong> (or instance) of the <strong>class</strong> <code>Vehicle</code>.</p>\n<p>Remember that our vehicle <strong>class</strong> has four <strong>attributes</strong>: number of wheels, type of tank, seating capacity, and maximum velocity. We set all these <strong>attributes</strong> when creating a vehicle <strong>object</strong>. So here, we define our <strong>class</strong> to receive data when it initiates it:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity</span>):\n        self.number_of_wheels = number_of_wheels\n        self.type_of_tank = type_of_tank\n        self.seating_capacity = seating_capacity\n        self.maximum_velocity = maximum_velocity\n</code></pre>\n<p>We use the <code>init</code> <strong>method</strong>. We call it a constructor method. So when we create the vehicle <strong>object</strong>, we can define these <strong>attributes</strong>. Imagine that we love the <strong>Tesla Model S,</strong> and we want to create this kind of <strong>object</strong>. It has four wheels, runs on electric energy, has space for five seats, and the maximum velocity is 250km/hour (155 mph). Let’s create this <strong>object:</strong></p>\n<pre><code class="hljs language-python">tesla_model_s = Vehicle(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;electric&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">250</span>)\n</code></pre>\n<p>Four wheels + electric “tank type” + five seats + 250km/hour maximum speed.</p>\n<p>All attributes are set. But how can we access these attributes’ values? We <strong>send a message to the object asking about them</strong>. We call it a <strong>method</strong>. It’s the <strong>object’s behavior</strong>. Let’s implement it:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity</span>):\n        self.number_of_wheels = number_of_wheels\n        self.type_of_tank = type_of_tank\n        self.seating_capacity = seating_capacity\n        self.maximum_velocity = maximum_velocity\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">number_of_wheels</span>(<span class="hljs-params">self</span>):\n        <span class="hljs-keyword">return</span> self.number_of_wheels\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_number_of_wheels</span>(<span class="hljs-params">self, number</span>):\n        self.number_of_wheels = number\n</code></pre>\n<p>This is an implementation of two methods: <strong>number_of_wheels</strong> and <strong>set_number_of_wheels</strong>. We call it <code>getter</code> &amp; <code>setter</code>. Because the first gets the attribute value, and the second sets a new value for the attribute.</p>\n<p>In Python, we can do that using <code>@property</code> (<code>decorators</code>) to define <code>getters</code> and <code>setters</code>. Let’s see it with code:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity</span>):\n        self.number_of_wheels = number_of_wheels\n        self.type_of_tank = type_of_tank\n        self.seating_capacity = seating_capacity\n        self.maximum_velocity = maximum_velocity\n\n<span class="hljs-meta">    @property</span>\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">number_of_wheels</span>(<span class="hljs-params">self</span>):\n        <span class="hljs-keyword">return</span> self.number_of_wheels\n\n<span class="hljs-meta">    @number_of_wheels.setter</span>\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">number_of_wheels</span>(<span class="hljs-params">self, number</span>):\n        self.number_of_wheels = number\n</code></pre>\n<p>And we can use these methods as attributes:</p>\n<pre><code class="hljs language-python">tesla_model_s = Vehicle(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;electric&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">250</span>)\n<span class="hljs-built_in">print</span>(tesla_model_s.number_of_wheels) <span class="hljs-comment"># 4</span>\ntesla_model_s.number_of_wheels = <span class="hljs-number">2</span> <span class="hljs-comment"># setting number of wheels to 2</span>\n<span class="hljs-built_in">print</span>(tesla_model_s.number_of_wheels) <span class="hljs-comment"># 2</span>\n</code></pre>\n<p>This is slightly different than defining methods. The methods work as attributes. For example, when we set the new number of wheels, we don’t apply two as a parameter, but set the value 2 to <code>number_of_wheels</code>. This is one way to write <code>pythonic</code> <code>getter</code> and <code>setter</code> code.</p>\n<p>But we can also use methods for other things, like the “<strong>make_noise</strong>” method. Let’s see it:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity</span>):\n        self.number_of_wheels = number_of_wheels\n        self.type_of_tank = type_of_tank\n        self.seating_capacity = seating_capacity\n        self.maximum_velocity = maximum_velocity\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_noise</span>(<span class="hljs-params">self</span>):\n        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;VRUUUUUUUM&#x27;</span>)\n</code></pre>\n<p>When we call this method, it just returns a string <strong>“VRRRRUUUUM.”</strong></p>\n<pre><code class="hljs language-python">tesla_model_s = Vehicle(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;electric&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">250</span>)\ntesla_model_s.make_noise() <span class="hljs-comment"># VRUUUUUUUM</span>\n</code></pre>\n<h3 id="encapsulation-hiding-information">Encapsulation: Hiding Information</h3>\n<p>Encapsulation is a mechanism that restricts direct access to objects’ data and methods. But at the same time, it facilitates operation on that data (objects’ methods).</p>\n<blockquote>\n<p>“Encapsulation can be used to hide data members and members function. Under this definition, encapsulation means that the internal representation of an object is generally hidden from view outside of the object’s definition.” — Wikipedia</p>\n</blockquote>\n<p>All internal representation of an object is hidden from the outside. Only the object can interact with its internal data.</p>\n<p>First, we need to understand how <code>public</code> and <code>non-public</code> instance variables and methods work.</p>\n<h4 id="public-instance-variables">Public Instance Variables</h4>\n<p>For a Python class, we can initialize a <code>public instance variable</code> within our constructor method. Let’s see this:</p>\n<p>Within the constructor method:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, first_name</span>):\n        self.first_name = first_name\n</code></pre>\n<p>Here we apply the <code>first_name</code> value as an argument to the <code>public instance variable</code>.</p>\n<pre><code class="hljs language-python">tk = Person(<span class="hljs-string">&#x27;TK&#x27;</span>)\n<span class="hljs-built_in">print</span>(tk.first_name) <span class="hljs-comment"># =&gt; TK</span>\n</code></pre>\n<p>Within the class:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:\n    first_name = <span class="hljs-string">&#x27;TK&#x27;</span>\n</code></pre>\n<p>Here, we do not need to apply the <code>first_name</code> as an argument, and all instance objects will have a <code>class attribute</code> initialized with <code>TK</code>.</p>\n<pre><code class="hljs language-python">tk = Person()\n<span class="hljs-built_in">print</span>(tk.first_name) <span class="hljs-comment"># =&gt; TK</span>\n</code></pre>\n<p>Cool. We have now learned that we can use <code>public instance variables</code> and <code>class attributes</code>. Another interesting thing about the <code>public</code> part is that we can manage the variable value. What do I mean by that? Our <code>object</code> can manage its variable value: <code>Get</code> and <code>Set</code> variable values.</p>\n<p>Keeping the <code>Person</code> class in mind, we want to set another value to its <code>first_name</code> variable:</p>\n<pre><code class="hljs language-python">tk = Person(<span class="hljs-string">&#x27;TK&#x27;</span>)\ntk.first_name = <span class="hljs-string">&#x27;Kaio&#x27;</span>\n<span class="hljs-built_in">print</span>(tk.first_name) <span class="hljs-comment"># =&gt; Kaio</span>\n</code></pre>\n<p>There we go. We just set another value (<code>kaio</code>) to the <code>first_name</code> instance variable and it updated the value. Simple as that. Since it’s a <code>public</code> variable, we can do that.</p>\n<h4 id="non-public-instance-variable">Non-public Instance Variable</h4>\n<blockquote>\n<p>We don’t use the term “private” here, since no attribute is really private in Python (without a generally unnecessary amount of work). — PEP 8</p>\n</blockquote>\n<p>As the <code>public instance variable</code> , we can define the <code>non-public instance variable</code> both within the constructor method or within the class. The syntax difference is: for <code>non-public instance variables</code> , use an underscore (<code>_</code>) before the <code>variable</code> name.</p>\n<blockquote>\n<p>“‘Private’ instance variables that cannot be accessed except from inside an object don’t exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member)” — Python Software Foundation</p>\n</blockquote>\n<p>Here’s an example:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, first_name, email</span>):\n        self.first_name = first_name\n        self._email = email\n</code></pre>\n<p>Did you see the <code>email</code> variable? This is how we define a <code>non-public variable</code> :</p>\n<pre><code class="hljs language-python">tk = Person(<span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-string">&#x27;tk@mail.com&#x27;</span>)\n<span class="hljs-built_in">print</span>(tk._email) <span class="hljs-comment"># tk@mail.com</span>\n</code></pre>\n<blockquote>\n<p>We can access and update it. Non-public variables are just a convention and should be treated as a non-public part of the API.</p>\n</blockquote>\n<p>So we use a method that allows us to do it inside our class definition. Let’s implement two methods (<code>email</code> and <code>update_email</code>) to understand it:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, first_name, email</span>):\n        self.first_name = first_name\n        self._email = email\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_email</span>(<span class="hljs-params">self, new_email</span>):\n        self._email = new_email\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">email</span>(<span class="hljs-params">self</span>):\n        <span class="hljs-keyword">return</span> self._email\n</code></pre>\n<p>Now we can update and access <code>non-public variables</code> using those methods. Let’s see:</p>\n<pre><code class="hljs language-python">tk = Person(<span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-string">&#x27;tk@mail.com&#x27;</span>)\n<span class="hljs-built_in">print</span>(tk.email()) <span class="hljs-comment"># =&gt; tk@mail.com</span>\ntk._email = <span class="hljs-string">&#x27;new_tk@mail.com&#x27;</span>\n<span class="hljs-built_in">print</span>(tk.email()) <span class="hljs-comment"># =&gt; tk@mail.com</span>\ntk.update_email(<span class="hljs-string">&#x27;new_tk@mail.com&#x27;</span>)\n<span class="hljs-built_in">print</span>(tk.email()) <span class="hljs-comment"># =&gt; new_tk@mail.com</span>\n</code></pre>\n<h4 id="public-method">Public Method</h4>\n<p>With <code>public methods</code>, we can also use them out of our class:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, first_name, age</span>):\n        self.first_name = first_name\n        self._age = age\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_age</span>(<span class="hljs-params">self</span>):\n        <span class="hljs-keyword">return</span> self._age\n</code></pre>\n<p>Let’s test it:</p>\n<pre><code class="hljs language-python">tk = Person(<span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-number">25</span>)\n<span class="hljs-built_in">print</span>(tk.show_age()) <span class="hljs-comment"># =&gt; 25</span>\n</code></pre>\n<p>Great — we can use it without any problem.</p>\n<h4 id="non-public-method">Non-public Method</h4>\n<p>But with <code>non-public methods</code> we aren’t able to do it. Let’s implement the same <code>Person</code> class, but now with a <code>show_age</code> <code>non-public method</code> using an underscore (<code>_</code>).</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, first_name, age</span>):\n        self.first_name = first_name\n        self._age = age\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_show_age</span>(<span class="hljs-params">self</span>):\n        <span class="hljs-keyword">return</span> self._age\n</code></pre>\n<p>And now, we’ll try to call this <code>non-public method</code> with our object:</p>\n<pre><code class="hljs language-python">tk = Person(<span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-number">25</span>)\n<span class="hljs-built_in">print</span>(tk._show_age()) <span class="hljs-comment"># =&gt; 25</span>\n</code></pre>\n<blockquote>\n<p>We can access and update it. Non-public methods are just a convention and should be treated as a non-public part of the API.</p>\n</blockquote>\n<p>Here’s an example for how we can use it:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, first_name, age</span>):\n        self.first_name = first_name\n        self._age = age\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_age</span>(<span class="hljs-params">self</span>):\n        <span class="hljs-keyword">return</span> self._get_age()\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_age</span>(<span class="hljs-params">self</span>):\n        <span class="hljs-keyword">return</span> self._age\n\ntk = Person(<span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-number">25</span>)\n<span class="hljs-built_in">print</span>(tk.show_age()) <span class="hljs-comment"># =&gt; 25</span>\n</code></pre>\n<p>Here we have a <code>_get_age</code> <code>non-public method</code> and a <code>show_age</code> <code>public method</code>. The <code>show_age</code> can be used by our object (out of our class) and the <code>_get_age</code> only used inside our class definition (inside <code>show_age</code> method). But again: as a matter of convention.</p>\n<h4 id="encapsulation-summary">Encapsulation Summary</h4>\n<p>With encapsulation we can ensure that the internal representation of the object is hidden from the outside.</p>\n<h3 id="inheritance-behaviors-and-characteristics">Inheritance: behaviors and characteristics</h3>\n<p>Certain objects have some things in common: their behavior and characteristics.</p>\n<p>For example, I inherited some characteristics and behaviors from my father. I inherited his eyes and hair as characteristics, and his impatience and introversion as behaviors.</p>\n<p>In object-oriented programming, classes can inherit common characteristics (data) and behavior (methods) from another class.</p>\n<p>Let’s see another example and implement it in Python.</p>\n<p><strong>ElectricCar</strong> class inherits these same attributes from the regular <strong>Car</strong> class.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, number_of_wheels, seating_capacity, maximum_velocity</span>):\n        self.number_of_wheels = number_of_wheels\n        self.seating_capacity = seating_capacity\n        self.maximum_velocity = maximum_velocity\n</code></pre>\n<p>Our <strong>Car</strong> class implemented:</p>\n<pre><code class="hljs language-python">my_car = Car(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">250</span>)\n<span class="hljs-built_in">print</span>(my_car.number_of_wheels)\n<span class="hljs-built_in">print</span>(my_car.seating_capacity)\n<span class="hljs-built_in">print</span>(my_car.maximum_velocity)\n</code></pre>\n<p>Once initiated, we can use all <code>instance variables</code> created. Nice.</p>\n<p>In Python, we apply a <code>parent class</code> to the <code>child class</code> as a parameter. An <strong>ElectricCar</strong> class can inherit from our <strong>Car</strong> class.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>):\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, number_of_wheels, seating_capacity, maximum_velocity</span>):\n        Car.__init__(self, number_of_wheels, seating_capacity, maximum_velocity)\n</code></pre>\n<p>Simple as that. We don’t need to implement any other method, because this class already has it (inherited from <strong>Car</strong> class). Let’s prove it:</p>\n<pre><code class="hljs language-python">my_electric_car = ElectricCar(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">250</span>)\n<span class="hljs-built_in">print</span>(my_electric_car.number_of_wheels) <span class="hljs-comment"># =&gt; 4</span>\n<span class="hljs-built_in">print</span>(my_electric_car.seating_capacity) <span class="hljs-comment"># =&gt; 5</span>\n<span class="hljs-built_in">print</span>(my_electric_car.maximum_velocity) <span class="hljs-comment"># =&gt; 250</span>\n</code></pre>\n<p>Beautiful.</p>\n<h3 id="thats-it">That’s it!</h3>\n<p>We learned a lot of things about Python basics:</p>\n<ul>\n<li>How Python variables work</li>\n<li>How Python conditional statements work</li>\n<li>How Python looping (while &amp; for) works</li>\n<li>How to use Lists: Collection | Array</li>\n<li>Dictionary Key-Value Collection</li>\n<li>How we can iterate through these data structures</li>\n<li>Objects and Classes</li>\n<li>Attributes as objects’ data</li>\n<li>Methods as objects’ behavior</li>\n<li>Using Python getters and setters &amp; property decorator</li>\n<li>Encapsulation: hiding information</li>\n<li>Inheritance: behaviors and characteristics</li>\n</ul>\n<p>Congrats! You completed this dense piece of content about Python.</p>\n<p>If you want a complete Python course, learn more real-world coding skills and build projects, try <a href="https://onemonth.com/courses/python?campaignid=33447&amp;discount_code=TKPython1&amp;mbsy=lG6tv&amp;mbsy_source=7d89eeb0-0031-478c-a60c-6a96d762712a">One Month Python Bootcamp</a>. See you there ☺</p>\n<p>For more stories and posts about my journey learning &amp; mastering programming, follow my publication <a href="https://medium.com/the-renaissance-developer">The Renaissance Developer</a>.</p>\n<p><a href="https://medium.freecodecamp.org/learning-python-from-zero-to-hero-120ea540b567">This post was first published at my Medium blog.</a></p>\n<p>Have fun, keep learning, and always keep coding.</p>\n',
  },
  {
    title: 'Learning Ruby: From Zero to Hero',
    content:
      '<blockquote>\n<p>“Ruby is simple in appearance, but is very complex inside, just like our human body.” — Matz, creator of the Ruby programming language</p>\n</blockquote>\n<p>Why learn Ruby?</p>\n<p>For me, the first reason is that it’s a beautiful language. It’s natural to code and it always expresses my thoughts.</p>\n<p>The second — and main — reason is Rails: the same framework that Twitter, Basecamp, Airbnb, Github, and so many companies use.</p>\n<h3 id="introductionhistory">Introduction/History</h3>\n<p>Ruby is “A dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write.” — <a href="https://www.ruby-lang.org/">ruby-lang.org</a></p>\n<p>Let’s get started with some basics!</p>\n<h3 id="variables">Variables</h3>\n<p>You can think about a variable as a word that stores a value. Simple as that.</p>\n<p>In Ruby it’s easy to define a variable and set a value to it. Imagine you want to store the number 1 in a variable called one. Let’s do it!</p>\n<pre><code class="hljs language-ruby">one = <span class="hljs-number">1</span>\n</code></pre>\n<p>How simple was that? You just assigned the value 1 to a variable called one.</p>\n<pre><code class="hljs language-ruby">two = <span class="hljs-number">2</span>\nsome_number = <span class="hljs-number">10000</span>\n</code></pre>\n<p>You can assign a value to whatever variable you want. In the example above, a two variable stores an integer of 2 and some_number stores 10,000.</p>\n<p>Besides integers, we can also use booleans (true/false), strings, <a href="http://rubylearning.com/satishtalim/ruby_symbols.html">symbols</a>, float, and other data types.</p>\n<pre><code class="hljs language-ruby"><span class="hljs-comment"># booleans</span>\ntrue_boolean = <span class="hljs-literal">true</span>\nfalse_boolean = <span class="hljs-literal">false</span>\n\n<span class="hljs-comment"># string</span>\nmy_name = <span class="hljs-string">&quot;Leandro Tk&quot;</span>\n\n<span class="hljs-comment"># symbol</span>\na_symbol = <span class="hljs-symbol">:my_symbol</span>\n\n<span class="hljs-comment"># float</span>\nbook_price = <span class="hljs-number">15.80</span>\n</code></pre>\n<h3 id="conditional-statements-control-flow">Conditional Statements: Control Flow</h3>\n<p>Conditional statements evaluate true or false. If something is true, it executes what’s inside the statement. For example:</p>\n<pre><code class="hljs language-ruby"><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>\n  puts <span class="hljs-string">&quot;Hello Ruby If&quot;</span>\n<span class="hljs-keyword">end</span>\n\n<span class="hljs-keyword">if</span> <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span>\n  puts <span class="hljs-string">&quot;2 is greater than 1&quot;</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>2 is greater than 1, so the puts code is executed.</p>\n<p>This else statement will be executed when the if expression is false:</p>\n<pre><code class="hljs language-ruby"><span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span>\n  puts <span class="hljs-string">&quot;1 is greater than 2&quot;</span>\n<span class="hljs-keyword">else</span>\n  puts <span class="hljs-string">&quot;1 is not greater than 2&quot;</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>1 is not greater than 2, so the code inside the else statement will be executed.</p>\n<p>There’s also the elsif statement. You can use it like this:</p>\n<pre><code class="hljs language-ruby"><span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span>\n  puts <span class="hljs-string">&quot;1 is greater than 2&quot;</span>\n<span class="hljs-keyword">elsif</span> <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span>\n  puts <span class="hljs-string">&quot;1 is not greater than 2&quot;</span>\n<span class="hljs-keyword">else</span>\n  puts <span class="hljs-string">&quot;1 is equal to 2&quot;</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>One way I really like to write Ruby is to use an if statement after the code to be executed:</p>\n<pre><code class="hljs language-ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hey_ho?</span></span>\n  <span class="hljs-literal">true</span>\n<span class="hljs-keyword">end</span>\n\nputs <span class="hljs-string">&quot;let’s go&quot;</span> <span class="hljs-keyword">if</span> hey_ho?\n</code></pre>\n<p>It is so beautiful and natural. It is idiomatic Ruby.</p>\n<h3 id="loopingiterator">Looping/Iterator</h3>\n<p>In Ruby we can iterate in so many different forms. I’ll talk about three iterators: while, for and each.</p>\n<p>While looping: As long as the statement is true, the code inside the block will be executed. So this code will print the number from 1 to 10:</p>\n<pre><code class="hljs language-ruby">num = <span class="hljs-number">1</span>\n\n<span class="hljs-keyword">while</span> num &lt;= <span class="hljs-number">10</span>\n  puts num\n  num += <span class="hljs-number">1</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>For looping: You pass the variable num to the block and the for statement will iterate it for you. This code will print the same as while code: from 1 to 10:</p>\n<pre><code class="hljs language-ruby"><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>..<span class="hljs-number">10</span>\n  puts num\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>Each iterator: I really like the each iterator. For an array of values, it’ll iterate one by one, passing the variable to the block:</p>\n<pre><code class="hljs language-ruby">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].each <span class="hljs-keyword">do</span> <span class="hljs-params">|num|</span>\n  puts num\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>You may be asking what the difference is between the each iterator and for looping. The main difference is that the each iterator only maintains the variable inside the iteration block, whereas for looping allows the variable to live on outside the block.</p>\n<pre><code class="hljs language-ruby"><span class="hljs-comment"># for vs each</span>\n\n<span class="hljs-comment"># for looping</span>\n<span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>...<span class="hljs-number">5</span>\n  puts num\n<span class="hljs-keyword">end</span>\n\nputs num <span class="hljs-comment"># =&gt; 5</span>\n\n<span class="hljs-comment"># each iterator</span>\n[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].each <span class="hljs-keyword">do</span> <span class="hljs-params">|num|</span>\n  puts num\n<span class="hljs-keyword">end</span>\n\nputs num <span class="hljs-comment"># =&gt; undefined local variable or method `n&#x27; for main:Object (NameError)</span>\n</code></pre>\n<h3 id="array-collectionlistdata-structure">Array: Collection/List/Data Structure</h3>\n<p>Imagine you want to store the integer 1 in a variable. But maybe now you want to store 2. And 3, 4, 5 …</p>\n<p>Do I have a way to store all the integers that I want, but not in millions of variables? Ruby has an answer!</p>\n<p>Array is a collection that can be used to store a list of values (like these integers). So let’s use it!</p>\n<pre><code class="hljs language-ruby">my_integers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]\n</code></pre>\n<p>It is really simple. We created an array and stored it in my_integer.</p>\n<p>You may be asking, “How can I get a value from this array?” Great question. Arrays have a concept called index. The first element gets the index 0 (zero). The second gets 1, and so on. You get the idea!</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*HmGUFmEI1w7ClqD6YCSmJQ.png" alt=""></p>\n<p>Using the Ruby syntax, it’s simple to understand:</p>\n<pre><code class="hljs language-ruby">my_integers = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]\nprint my_integers[<span class="hljs-number">0</span>] <span class="hljs-comment"># 5</span>\nprint my_integers[<span class="hljs-number">1</span>] <span class="hljs-comment"># 7</span>\nprint my_integers[<span class="hljs-number">4</span>] <span class="hljs-comment"># 4</span>\n</code></pre>\n<p>Imagine you want to store strings instead of integers, like a list of your relatives’ names. Mine would be something like this:</p>\n<pre><code class="hljs language-ruby">relatives_names = [\n  <span class="hljs-string">&quot;Toshiaki&quot;</span>,\n  <span class="hljs-string">&quot;Juliana&quot;</span>,\n  <span class="hljs-string">&quot;Yuji&quot;</span>,\n  <span class="hljs-string">&quot;Bruno&quot;</span>,\n  <span class="hljs-string">&quot;Kaio&quot;</span>\n]\n\nprint relatives_names[<span class="hljs-number">4</span>] <span class="hljs-comment"># Kaio</span>\n</code></pre>\n<p>Works the same way as integers. Nice!</p>\n<p>We just learned how array indices works. Now let’s add elements to the array data structure (items to the list).</p>\n<p>The most common methods to add a new value to an array are push and &lt;&lt;.</p>\n<p>Push is super simple! You just need to pass the element (The Effective Engineer) as the push parameter:</p>\n<pre><code class="hljs language-ruby">bookshelf = []\nbookshelf.push(<span class="hljs-string">&quot;The Effective Engineer&quot;</span>)\nbookshelf.push(<span class="hljs-string">&quot;The 4 hours work week&quot;</span>)\nprint bookshelf[<span class="hljs-number">0</span>] <span class="hljs-comment"># The Effective Engineer</span>\nprint bookshelf[<span class="hljs-number">1</span>] <span class="hljs-comment"># The 4 hours work week</span>\n</code></pre>\n<p>The &lt;&lt; method is just slightly different:</p>\n<pre><code class="hljs language-ruby">bookshelf = []\nbookshelf &lt;&lt; <span class="hljs-string">&quot;Lean Startup&quot;</span>\nbookshelf &lt;&lt; <span class="hljs-string">&quot;Zero to One&quot;</span>\nprint bookshelf[<span class="hljs-number">0</span>] <span class="hljs-comment"># Lean Startup</span>\nprint bookshelf[<span class="hljs-number">1</span>] <span class="hljs-comment"># Zero to One</span>\n</code></pre>\n<p>You may ask, “But it doesn’t use the dot notation like other methods do. How could it be a method?” Nice question! Writing this:</p>\n<pre><code class="hljs language-ruby">bookshelf &lt;&lt; <span class="hljs-string">&quot;Hooked&quot;</span>\n</code></pre>\n<p>…is similar to writing this:</p>\n<pre><code class="hljs language-ruby">bookshelf.&lt;&lt;(<span class="hljs-string">&quot;Hooked&quot;</span>)\n</code></pre>\n<p>Ruby is so great, huh?</p>\n<p>Well, enough arrays. Let’s talk about another data structure.</p>\n<h3 id="hash-key-value-data-structuredictionary-collection">Hash: Key-Value Data Structure/Dictionary Collection</h3>\n<p>We know that arrays are indexed with numbers. But what if we don’t want to use numbers as indices? Some data structures can use numeric, string, or other types of indices. The hash data structure is one of them.</p>\n<p>Hash is a collection of key-value pairs. It looks like this:</p>\n<pre><code class="hljs language-ruby">hash_example = {\n  <span class="hljs-string">&quot;key1&quot;</span> =&gt; <span class="hljs-string">&quot;value1&quot;</span>,\n  <span class="hljs-string">&quot;key2&quot;</span> =&gt; <span class="hljs-string">&quot;value2&quot;</span>,\n  <span class="hljs-string">&quot;key3&quot;</span> =&gt; <span class="hljs-string">&quot;value3&quot;</span>\n}\n</code></pre>\n<p>The key is the index pointing to the value. How do we access the hash value? Using the key!</p>\n<p>Here’s a hash about me. My name, nickname, and nationality are the hash’s keys.</p>\n<pre><code class="hljs language-ruby">hash_tk = {\n  <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;Leandro&quot;</span>,\n  <span class="hljs-string">&quot;nickname&quot;</span> =&gt; <span class="hljs-string">&quot;Tk&quot;</span>,\n  <span class="hljs-string">&quot;nationality&quot;</span> =&gt; <span class="hljs-string">&quot;Brazilian&quot;</span>\n}\n\nprint <span class="hljs-string">&quot;My name is <span class="hljs-subst">#{hash_tk[<span class="hljs-string">&quot;name&quot;</span>]}</span>&quot;</span> <span class="hljs-comment"># My name is Leandro</span>\nprint <span class="hljs-string">&quot;But you can call me <span class="hljs-subst">#{hash_tk[<span class="hljs-string">&quot;nickname&quot;</span>]}</span>&quot;</span> <span class="hljs-comment"># But you can call me Tk</span>\nprint <span class="hljs-string">&quot;And by the way I&#x27;m <span class="hljs-subst">#{hash_tk[<span class="hljs-string">&quot;nationality&quot;</span>]}</span>&quot;</span> <span class="hljs-comment"># And by the way I&#x27;m Brazilian</span>\n</code></pre>\n<p>In the above example I printed a phrase about me using all the values stored in the hash.</p>\n<p>Another cool thing about hashes is that we can use anything as the value. I’ll add the key “age” and my real integer age (24).</p>\n<pre><code class="hljs language-ruby">hash_tk = {\n  <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;Leandro&quot;</span>,\n  <span class="hljs-string">&quot;nickname&quot;</span> =&gt; <span class="hljs-string">&quot;Tk&quot;</span>,\n  <span class="hljs-string">&quot;nationality&quot;</span> =&gt; <span class="hljs-string">&quot;Brazilian&quot;</span>,\n  <span class="hljs-string">&quot;age&quot;</span> =&gt; <span class="hljs-number">24</span>\n}\n\nprint <span class="hljs-string">&quot;My name is <span class="hljs-subst">#{hash_tk[<span class="hljs-string">&quot;name&quot;</span>]}</span>&quot;</span> <span class="hljs-comment"># My name is Leandro</span>\nprint <span class="hljs-string">&quot;But you can call me <span class="hljs-subst">#{hash_tk[<span class="hljs-string">&quot;nickname&quot;</span>]}</span>&quot;</span> <span class="hljs-comment"># But you can call me Tk</span>\nprint <span class="hljs-string">&quot;And by the way I&#x27;m <span class="hljs-subst">#{hash_tk[<span class="hljs-string">&quot;age&quot;</span>]}</span> and <span class="hljs-subst">#{hash_tk[<span class="hljs-string">&quot;nationality&quot;</span>]}</span>&quot;</span> <span class="hljs-comment"># And by the way I&#x27;m 24 and Brazilian</span>\n</code></pre>\n<p>Let’s learn how to add elements to a hash. The key pointing to a value is a big part of what hash is — and the same goes for when we want to add elements to it.</p>\n<pre><code class="hljs language-ruby">hash_tk = {\n  <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;Leandro&quot;</span>,\n  <span class="hljs-string">&quot;nickname&quot;</span> =&gt; <span class="hljs-string">&quot;Tk&quot;</span>,\n  <span class="hljs-string">&quot;nationality&quot;</span> =&gt; <span class="hljs-string">&quot;Brazilian&quot;</span>\n}\n\nhash_tk[<span class="hljs-string">&quot;age&quot;</span>] = <span class="hljs-number">24</span>\nprint hash_tk <span class="hljs-comment"># { &quot;name&quot; =&gt; &quot;Leandro&quot;, &quot;nickname&quot; =&gt; &quot;Tk&quot;, &quot;nationality&quot; =&gt; &quot;Brazilian&quot;, &quot;age&quot; =&gt; 24 }</span>\n</code></pre>\n<p>We just need to assign a value to a hash key. Nothing complicated here, right?</p>\n<h3 id="iteration-looping-through-data-structures">Iteration: Looping Through Data Structures</h3>\n<p>The array iteration is very simple. Ruby developers commonly use the each iterator. Let’s do it:</p>\n<pre><code class="hljs language-ruby">bookshelf = [\n  <span class="hljs-string">&quot;The Effective Engineer&quot;</span>,\n  <span class="hljs-string">&quot;The 4 hours work week&quot;</span>,\n  <span class="hljs-string">&quot;Zero to One&quot;</span>,\n  <span class="hljs-string">&quot;Lean Startup&quot;</span>,\n  <span class="hljs-string">&quot;Hooked&quot;</span>\n]\n\nbookshelf.each <span class="hljs-keyword">do</span> <span class="hljs-params">|book|</span>\n  puts book\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>The each iterator works by passing array elements as parameters in the block. In the above example, we print each element.</p>\n<p>For hash data structure, we can also use the each iterator by passing two parameters to the block: the key and the value. Here’s an example:</p>\n<pre><code class="hljs language-ruby">hash = { <span class="hljs-string">&quot;some_key&quot;</span> =&gt; <span class="hljs-string">&quot;some_value&quot;</span> }\nhash.each { <span class="hljs-params">|key, value|</span> puts <span class="hljs-string">&quot;<span class="hljs-subst">#{key}</span>: <span class="hljs-subst">#{value}</span>&quot;</span> } <span class="hljs-comment"># some_key: some_value</span>\n</code></pre>\n<p>We named the two parameters as key and value, but it’s not necessary. We can name them anything:</p>\n<pre><code class="hljs language-ruby">hash_tk = {\n  <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;Leandro&quot;</span>,\n  <span class="hljs-string">&quot;nickname&quot;</span> =&gt; <span class="hljs-string">&quot;Tk&quot;</span>,\n  <span class="hljs-string">&quot;nationality&quot;</span> =&gt; <span class="hljs-string">&quot;Brazilian&quot;</span>,\n  <span class="hljs-string">&quot;age&quot;</span> =&gt; <span class="hljs-number">24</span>\n}\n\nhash_tk.each <span class="hljs-keyword">do</span> <span class="hljs-params">|attribute, value|</span>\n  puts <span class="hljs-string">&quot;<span class="hljs-subst">#{attribute}</span>: <span class="hljs-subst">#{value}</span>&quot;</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>You can see we used attribute as a parameter for the hash key and it works properly. Great!</p>\n<h3 id="classes--objects">Classes &amp; Objects</h3>\n<p>As an object oriented programming language, Ruby uses the concepts of class and object.</p>\n<p>“Class” is a way to define objects. In the real world there are many objects of the same type. Like vehicles, dogs, bikes. Each vehicle has similar components (wheels, doors, engine).</p>\n<p>“Objects” have two main characteristics: data and behavior. Vehicles have data like number of wheels and number of doors. They also have behavior like accelerating and stopping.</p>\n<p>In object oriented programming we call data “attributes” and behavior “methods.”</p>\n<p>Data = Attributes</p>\n<p>Behavior = Methods</p>\n<h3 id="ruby-object-oriented-programming-mode-on">Ruby Object Oriented Programming Mode: On</h3>\n<p>Let’s understand Ruby syntax for classes:</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span></span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>We define Vehicle with class statement and finish with end. Easy!</p>\n<p>And objects are instances of a class. We create an instance by calling the .new method.</p>\n<pre><code class="hljs language-ruby">vehicle = Vehicle.new\n</code></pre>\n<p>is an object (or instance) of the class Vehicle.</p>\n<p>Our vehicle class will have 4 attributes: Wheels, type of tank, seating capacity, and maximum velocity.</p>\n<p>Let’s define our class Vehicle to receive data and instantiate it.</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span></span>\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(number_of_wheels, type_of_tank, seating_capacity, maximum_velocity)</span></span>\n    <span class="hljs-variable">@number_of_wheels</span> = number_of_wheels\n    <span class="hljs-variable">@type_of_tank</span> = type_of_tank\n    <span class="hljs-variable">@seating_capacity</span> = seating_capacity\n    <span class="hljs-variable">@maximum_velocity</span> = maximum_velocity\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>We use the initialize method. We call it a constructor method so when we create the vehicle object, we can define its attributes.</p>\n<p>Imagine that you love the Tesla Model S and want to create this kind of object. It has 4 wheels. Its tank type is electric energy. It has space for 5 seats and a maximum velocity is 250km/hour (155 mph). Let’s create the object tesla_model_s! :)</p>\n<pre><code class="hljs language-ruby">tesla_model_s = Vehicle.new(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;electric&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">250</span>)\n</code></pre>\n<p>4 wheels + electric tank + 5 seats + 250km/hour maximum speed = tesla_model_s.</p>\n<pre><code class="hljs language-ruby">tesla_model_s\n<span class="hljs-comment"># =&gt; &lt;Vehicle:0x0055d516903a08 <span class="hljs-doctag">@number</span>_of_wheels=4, <span class="hljs-doctag">@type</span>_of_tank=&quot;electric&quot;, <span class="hljs-doctag">@seating</span>_capacity=5, <span class="hljs-doctag">@maximum</span>_velocity=250&gt;</span>\n</code></pre>\n<p>We’ve set the Tesla’s attributes. But how do we access them?</p>\n<p>We send a message to the object asking about them. We call it a method. It’s the object’s behavior. Let’s implement it!</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span></span>\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(number_of_wheels, type_of_tank, seating_capacity, maximum_velocity)</span></span>\n    <span class="hljs-variable">@number_of_wheels</span> = number_of_wheels\n    <span class="hljs-variable">@type_of_tank</span> = type_of_tank\n    <span class="hljs-variable">@seating_capacity</span> = seating_capacity\n    <span class="hljs-variable">@maximum_velocity</span> = maximum_velocity\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">number_of_wheels</span></span>\n    <span class="hljs-variable">@number_of_wheels</span>\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_number_of_wheels=</span><span class="hljs-params">(number)</span></span>\n    <span class="hljs-variable">@number_of_wheels</span> = number\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>This is an implementation of two methods: number_of_wheels and set_number_of_wheels. We call it “getter” and “setter.” First we get the attribute value, and second, we set a value for the attribute.</p>\n<p>In Ruby, we can do that without methods using attr_reader, attr_writer and attr_accessor. Let’s see it with code!</p>\n<ul>\n<li>attr_reader: implements the getter method</li>\n</ul>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span></span>\n  <span class="hljs-keyword">attr_reader</span> <span class="hljs-symbol">:number_of_wheels</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(number_of_wheels, type_of_tank, seating_capacity, maximum_velocity)</span></span>\n    <span class="hljs-variable">@number_of_wheels</span> = number_of_wheels\n    <span class="hljs-variable">@type_of_tank</span> = type_of_tank\n    <span class="hljs-variable">@seating_capacity</span> = seating_capacity\n    <span class="hljs-variable">@maximum_velocity</span> = maximum_velocity\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n\ntesla_model_s = Vehicle.new(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;electric&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">250</span>)\ntesla_model_s.number_of_wheels <span class="hljs-comment"># =&gt; 4</span>\n</code></pre>\n<ul>\n<li>attr_writer: implements the setter method</li>\n</ul>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span></span>\n  <span class="hljs-keyword">attr_writer</span> <span class="hljs-symbol">:number_of_wheels</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(number_of_wheels, type_of_tank, seating_capacity, maximum_velocity)</span></span>\n    <span class="hljs-variable">@number_of_wheels</span> = number_of_wheels\n    <span class="hljs-variable">@type_of_tank</span> = type_of_tank\n    <span class="hljs-variable">@seating_capacity</span> = seating_capacity\n    <span class="hljs-variable">@maximum_velocity</span> = maximum_velocity\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n\n<span class="hljs-comment"># number_of_wheels equals 4</span>\ntesla_model_s = Vehicle.new(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;electric&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">250</span>)\ntesla_model_s <span class="hljs-comment"># =&gt; &lt;Vehicle:0x0055644f55b820 <span class="hljs-doctag">@number</span>_of_wheels=4, <span class="hljs-doctag">@type</span>_of_tank=&quot;electric&quot;, <span class="hljs-doctag">@seating</span>_capacity=5, <span class="hljs-doctag">@maximum</span>_velocity=250&gt;</span>\n\n<span class="hljs-comment"># number_of_wheels equals 3</span>\ntesla_model_s.number_of_wheels = <span class="hljs-number">3</span>\ntesla_model_s <span class="hljs-comment"># =&gt; &lt;Vehicle:0x0055644f55b820 <span class="hljs-doctag">@number</span>_of_wheels=3, <span class="hljs-doctag">@type</span>_of_tank=&quot;electric&quot;, <span class="hljs-doctag">@seating</span>_capacity=5, <span class="hljs-doctag">@maximum</span>_velocity=250&gt;</span>\n</code></pre>\n<ul>\n<li>attr_accessor: implements both methods</li>\n</ul>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span></span>\n  <span class="hljs-keyword">attr_accessor</span> <span class="hljs-symbol">:number_of_wheels</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(number_of_wheels, type_of_tank, seating_capacity, maximum_velocity)</span></span>\n    <span class="hljs-variable">@number_of_wheels</span> = number_of_wheels\n    <span class="hljs-variable">@type_of_tank</span> = type_of_tank\n    <span class="hljs-variable">@seating_capacity</span> = seating_capacity\n    <span class="hljs-variable">@maximum_velocity</span> = maximum_velocity\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n\n<span class="hljs-comment"># number_of_wheels equals 4</span>\ntesla_model_s = Vehicle.new(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;electric&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">250</span>)\ntesla_model_s.number_of_wheels <span class="hljs-comment"># =&gt; 4</span>\n\n<span class="hljs-comment"># number_of_wheels equals 3</span>\ntesla_model_s.number_of_wheels = <span class="hljs-number">3</span>\ntesla_model_s.number_of_wheels <span class="hljs-comment"># =&gt; 3</span>\n</code></pre>\n<p>So now we’ve learned how to get attribute values, implement the getter and setter methods, and use attr (reader, writer, and accessor).</p>\n<p>We can also use methods to do other things — like a “make_noise” method. Let’s see it!</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span></span>\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(number_of_wheels, type_of_tank, seating_capacity, maximum_velocity)</span></span>\n    <span class="hljs-variable">@number_of_wheels</span> = number_of_wheels\n    <span class="hljs-variable">@type_of_tank</span> = type_of_tank\n    <span class="hljs-variable">@seating_capacity</span> = seating_capacity\n    <span class="hljs-variable">@maximum_velocity</span> = maximum_velocity\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_noise</span></span>\n    <span class="hljs-string">&quot;VRRRRUUUUM&quot;</span>\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>When we call this method, it just returns a string “VRRRRUUUUM”.</p>\n<pre><code class="hljs language-ruby">v = Vehicle.new(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;gasoline&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">180</span>)\nv.make_noise <span class="hljs-comment"># =&gt; &quot;VRRRRUUUUM&quot;</span>\n</code></pre>\n<h3 id="encapsulation-hiding-information">Encapsulation: Hiding Information</h3>\n<p>Encapsulation is a way to restrict direct access to objects’ data and methods. At the same time it facilitates operation on that data (objects’ methods).</p>\n<blockquote>\n<p>Encapsulation can be used to hide data members and members function…Encapsulation means that the internal representation of an object is generally hidden from view outside of the object’s definition.  — Wikipedia</p>\n</blockquote>\n<p>So all internal representation of an object is hidden from the outside, only the object can interact with its internal data.</p>\n<p>In Ruby we use methods to directly access data. Let’s see an example:</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(name, age)</span></span>\n    <span class="hljs-variable">@name</span> = name\n    <span class="hljs-variable">@age</span>  = age\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>We just implemented this Person class. And as we’ve learned, to create the object person, we use the new method and pass the parameters.</p>\n<pre><code class="hljs language-ruby">tk = Person.new(<span class="hljs-string">&quot;Leandro Tk&quot;</span>, <span class="hljs-number">24</span>)\n</code></pre>\n<p>So I created me! :) The <a href="https://medium.com/@leandrotk_/">tk</a> object! Passing my name and my age. But how can I access this information? My first attempt is to call the name and age methods.</p>\n<pre><code class="hljs language-ruby">tk.name\n&gt; <span class="hljs-symbol">NoMethodError:</span> undefined method <span class="hljs-string">`name&#x27; for #&lt;Person:0x0055a750f4c520 @name=&quot;Leandro Tk&quot;, @age=24&gt;</span>\n</code></pre>\n<p>We can’t do it! We didn’t implement the name (and the age) method.</p>\n<p>Remember when I said “In Ruby we use methods to directly access data?” To access the tk name and age we need to implement those methods on our Person class.</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(name, age)</span></span>\n    <span class="hljs-variable">@name</span> = name\n    <span class="hljs-variable">@age</span>  = age\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span></span>\n    <span class="hljs-variable">@name</span>\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">age</span></span>\n    <span class="hljs-variable">@age</span>\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>Now we can directly access this information. With encapsulation we can ensure that the object (tk in this case) is only allowed to access name and age. The internal representation of the object is hidden from the outside.</p>\n<h3 id="inheritance-behaviors-and-characteristics">Inheritance: behaviors and characteristics</h3>\n<p>Certain objects have something in common. Behavior and characteristics.</p>\n<p>For example, I inherited some characteristics and behaviors from my father — like his eyes and hair. And behaviors like impatience and introversion.</p>\n<p>In object oriented programming, classes can inherit common characteristics (data) and behavior (methods) from another class.</p>\n<p>Let’s see another example and implement it in Ruby.</p>\n<p>Imagine a car. Number of wheels, seating capacity and maximum velocity are all attributes of a car.</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span></span>\n  <span class="hljs-keyword">attr_accessor</span> <span class="hljs-symbol">:number_of_wheels</span>, <span class="hljs-symbol">:seating_capacity</span>, <span class="hljs-symbol">:maximum_velocity</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(number_of_wheels, seating_capacity, maximum_velocity)</span></span>\n    <span class="hljs-variable">@number_of_wheels</span> = number_of_wheels\n    <span class="hljs-variable">@seating_capacity</span> = seating_capacity\n    <span class="hljs-variable">@maximum_velocity</span> = maximum_velocity\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>Our Car class implemented! :)</p>\n<pre><code class="hljs language-ruby">my_car = Car.new(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">250</span>)\nmy_car.number_of_wheels <span class="hljs-comment"># 4</span>\nmy_car.seating_capacity <span class="hljs-comment"># 5</span>\nmy_car.maximum_velocity <span class="hljs-comment"># 250</span>\n</code></pre>\n<p>Instantiated, we can use all methods created! Nice!</p>\n<p>In Ruby, we use the &lt; operator to show a class inherits from another. An ElectricCar class can inherit from our Car class.</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElectricCar</span> &lt; Car</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>Simple as that! We don’t need to implement the initialize method and any other method, because this class already has it (inherited from the Car class). Let’s prove it!</p>\n<pre><code class="hljs language-ruby">tesla_model_s = ElectricCar.new(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">250</span>)\ntesla_model_s.number_of_wheels <span class="hljs-comment"># 4</span>\ntesla_model_s.seating_capacity <span class="hljs-comment"># 5</span>\ntesla_model_s.maximum_velocity <span class="hljs-comment"># 250</span>\n</code></pre>\n<p>Beautiful!</p>\n<h3 id="module-a-toolbox">Module: A Toolbox</h3>\n<p>We can think of a module as a toolbox that contains a set of constants and methods.</p>\n<p>An example of a Ruby module is Math. We can access the constant PI:</p>\n<pre><code class="hljs language-ruby">Math::PI <span class="hljs-comment"># &gt; 3.141592653589793</span>\n</code></pre>\n<p>And the .sqrt method:</p>\n<pre><code class="hljs language-ruby">Math.sqrt(<span class="hljs-number">9</span>) <span class="hljs-comment"># 3.0</span>\n</code></pre>\n<p>And we can implement our own module and use it in classes. We have a RunnerAthlete class:</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RunnerAthlete</span></span>\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(name)</span></span>\n    <span class="hljs-variable">@name</span> = name\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>And implement a module Skill to have the average_speed method.</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Skill</span></span>\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">average_speed</span></span>\n    puts <span class="hljs-string">&quot;My average speed is 20mph&quot;</span>\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>How do we add the module to our classes so it has this behavior (average_speed method)? We just include it!</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RunnerAthlete</span></span>\n  <span class="hljs-keyword">include</span> Skill\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(name)</span></span>\n    <span class="hljs-variable">@name</span> = name\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>See the “include Skill”! And now we can use this method in our instance of RunnerAthlete class.</p>\n<pre><code class="hljs language-ruby">mohamed = RunnerAthlete.new(<span class="hljs-string">&quot;Mohamed Farah&quot;</span>)\nmohamed.average_speed <span class="hljs-comment"># &quot;My average speed is 20mph&quot;</span>\n</code></pre>\n<p>Yay! To finish modules, we need to understand the following:</p>\n<ul>\n<li>A module can have no instances.</li>\n<li>A module can have no subclasses.</li>\n<li>A module is defined by module…end.</li>\n</ul>\n<h3 id="wrapping-up">Wrapping Up!</h3>\n<p>We learned A LOT of things here!</p>\n<ul>\n<li>How Ruby variables work</li>\n<li>How Ruby conditional statements work</li>\n<li>How Ruby looping &amp; iterators work</li>\n<li>Array: Collection | List</li>\n<li>Hash: Key-Value Collection</li>\n<li>How we can iterate through this data structures</li>\n<li>Objects &amp; Classes</li>\n<li>Attributes as objects’ data</li>\n<li>Methods as objects’ behavior</li>\n<li>Using Ruby getters and setters</li>\n<li>Encapsulation: hiding information</li>\n<li>Inheritance: behaviors and characteristics</li>\n<li>Modules: a toolbox</li>\n</ul>\n<h3 id="thats-it">That’s it</h3>\n<p>Congrats! You completed this dense piece of content about Ruby! We learned a lot here. Hope you liked it.</p>\n<p>If you want a complete Ruby course, learn real-world coding skills and build projects, try <a href="https://onemonth.com/courses/ruby?mbsy=lG6tt&amp;mbsy_source=97541b09-e3ab-45d7-a9b1-dbc77028e008&amp;campaignid=33446&amp;discount_code=TKRuby1">One Month Ruby Bootcamp</a>. See you there ☺</p>\n<p>Have fun, keep learning, and always keep coding!</p>\n',
  },
  {
    title: 'On Distraction',
    content:
      '<p>I often listen to music while working, writing, or when doing anything &quot;knowledge-work&quot; related. But most of the time, I don&#39;t have any specific music that I want to listen to, and a playlist I usually use to listen to while working. So I open YouTube and try to find anything that I would like.</p>\n<p>— SpongeBob Narrator: &quot;a few hours later&quot;.</p>\n<img src="/on-distraction/a-few-hours-later.jpeg">\n\n<p>The only thing I needed was to do the work, I didn&#39;t need music, I didn&#39;t need YouTube, but suddenly I&#39;m procrastinating, watching useless videos, and being stuck on YouTube rabbit hole.</p>\n<p>Every time this happens I reflect on two things: the first one is the attention economy and the second is how to design better systems.</p>\n<h2 id="the-attention-economy">The Attention Economy</h2>\n<p>We live in a world that everybody is trying to get your attention: on social media, advertisement, influencers, TV, people around you. Everybody.</p>\n<p>Having the attention means visibility, and today, this number is very important when it comes to monetizing things. Our &quot;beautiful&quot; capitalist world.</p>\n<p>It&#39;s easy to be distracted by the physical world — TV, friends, colleagues — and the digital world — any new shiny social media, ads, notifications. I&#39;m not saying that they are bad things, even though most of the time they can be. My theory is that it&#39;s easy to &quot;say yes!&quot; to things that don&#39;t matter to you. Because they are entertaining or just a tool to potentialize your procrastination.</p>\n<p>I don&#39;t want to be a prisoner of distractions.</p>\n<h2 id="how-to-design-better-systems">How to design better systems</h2>\n<p>The first thing that I always think about is to use my energy on things I can control.</p>\n<ul>\n<li>I can&#39;t control social media&#39;s algorithm. But I can remove the app from my phone.</li>\n<li>I can&#39;t control TV entertainment shows. But I can turn it off — or just not buy it at all.</li>\n<li>I can&#39;t control people texting me. But I can separate work time from leisure time.</li>\n</ul>\n<p>The idea is to focus on things that I can control and create systems that can support this concept.</p>\n<p>What do I do to control distractions?</p>\n<p>I have some tools and systems I use to help me don&#39;t on the procrastination rabbit hole, but I&#39;m still improving it.</p>\n<h3 id="mobile">Mobile</h3>\n<ul>\n<li>Whenever I&#39;m working, I put my phone in airplane mode.</li>\n<li>Set up social media to not send too many notifications, just the good amount that I find healthy.</li>\n<li>Depending on the social media, I delete it from my phone and just take a break from it.</li>\n<li>I have a &quot;list&quot; on my phone to remember the habits I want to cultivate daily.</li>\n</ul>\n<h3 id="desktop">Desktop</h3>\n<ul>\n<li>I use an extension called Work Mode to block social media — or any other website I configure — when I&#39;m working.</li>\n<li>Twitter<ul>\n<li>I use an extension called Demetricator to remove the number of followers, likes, retweets. I think it helps me focus on some content and not too much on trendy things.</li>\n<li>I usually use lists instead of following people. As I have a small number of people I follow, Twitter&#39;s home doesn&#39;t have too much content there. I open, don&#39;t see anything new, and close the app.</li>\n</ul>\n</li>\n<li>Ads are very distracting too, and most of the time, they are not interesting to me. I AdBlock them.</li>\n<li>As I told you in the beginning, I usually use YouTube to listen to music while studying or working. So instead of opening the website, I have a Spotify playlist to work on and a bookmarked playlist on YouTube. So every time I want to listen to music while working, it&#39;s just basically one click — instead of hours of procrastination.</li>\n</ul>\n<h3 id="system">System</h3>\n<p>But I&#39;m not only distracted by these things. I&#39;m also distracted by the future or the next things I want to do on that day.</p>\n<p>I do two simple things here: one thing at a time and being conscious about my day.</p>\n<p>The one thing concept is very simple: Instead of multitasking, I focus on only one thing. My head is thinking only about that one thing. It has a start, middle, and end. After finishing it, I can think about other things.</p>\n<p>Even though it&#39;s simple, it&#39;s also difficult to execute. My head is always thinking about the future and it brings me a lot of anxiety. What is the next thing? Everything is planned? Can I do everything I plan today?</p>\n<p>To focus on that one thing is a constant battle against my head and thoughts.</p>\n<p>And to be conscious about my day is to plan. I create a simple list of things I want to do and prioritize it. Sometimes I put too many things. Sometimes I put not that many. So I usually adjust through the day.</p>\n<p>Planning is also a battle against my inner ambitions. I want everything. For today! But it&#39;s not how things work. I won&#39;t have time to do everything I want, so saying no is crucial.</p>\n<p>Planning also helps me calm my anxiety. I planned, so I know what I need to do. I don&#39;t need to be constantly debating with my brain what are the next things.</p>\n<p>One thing that I also learned was to create space for serendipity. I don&#39;t want to make my calendar works as lego and place every little detail there. Without any space to breathe and use my intuition. Time for reflections is so important in my life that I have &quot;meetings&quot; on my calendar to have time to just think about anything.</p>\n<hr>\n<p>I do want to do great things and time is one of the things that we can&#39;t waste. If most of my time I&#39;m wasting on useless things, I won&#39;t accomplish my goals and live my life the way I want. Focusing on things I can control and systems to fight distractions and procrastination is the way to go.</p>\n',
  },
  {
    title: 'On Leaving',
    content:
      '<h2 id="as-a-sansei">As a Sansei</h2>\n<p>Since I was a child, I was immersed in Japanese culture.</p>\n<p>At home, my <code>ba-chans</code> and <code>ji-chans</code> (grandparents) always tried to communicate in Japanese with me. The amazing Japanese food was part of my every day. And I used the manners daily.</p>\n<p>Every Sansei (Sansei stands for &quot;the third generation of Japanese people born in another country&quot;) should remember using these phrases:</p>\n<ul>\n<li>おやすみなさい (good night) before going to bed</li>\n<li>or いってきます (see you later) before leaving the house</li>\n<li>or いただきます (let&#39;s eat or thanks for the food) before starting to eat the food</li>\n</ul>\n<p>Three days a week I also went to a 日本語学校 (Japanese school) to learn Japanese, but also be immersed in the culture. Made a lot of friends who I relate to. Participated in Undokai (it&#39;s a Japanese sports day) with all my friends&#39; families.</p>\n<p>Japan is part of me.</p>\n<h2 id="the-japan-trip">The Japan trip</h2>\n<p>In 2019 I had the opportunity to take vacation days and travel to Japan with my friends. It was an amazing experience that <a href="https://leandrotk.medium.com/hist%C3%B3rias-do-jap%C3%A3o-13a0cddd9ac">I documented with photos and an article</a> (Portuguese content!).</p>\n<p>With all trips, it comes with what we call in Portuguese &quot;Perrengues&quot; (it&#39;s a funny way to say &quot;travel problems&quot;).</p>\n<p>But even though I had travel issues, I had unforgettable moments there. I went to a lot of different places (Tokyo, Kyoto, Osaka, Hiroshima, Yokohama, and Okayama), tried different foods (most of them remember me of my family&#39;s food), and could enjoy the beautiful places.</p>\n<p>If there’s one thing travel teaches us, it’s that the journey is just as important as the destination. And the journey showed a new possibility. The possibility of experiencing this culture, that&#39;s new and part of me at the same time.</p>\n<p>Coming back home, to my lovely country Brazil, I decided to plan and prepare (mentally and also technically) to move to Japan and have this new experience in my life.</p>\n<p>I had many different opportunities in terms of moving abroad, but this travel made a huge difference in my decision.</p>\n<h2 id="companies-in-japan--smartnews">Companies in Japan &amp; SmartNews</h2>\n<p>If I received an offer from a Japanese company, I think it would be an easy decision as I wanted to experience this. But I also thought about my career. So I was looking for a company that could provide me a great career experience:</p>\n<ul>\n<li>in software engineering</li>\n<li>an international culture</li>\n<li>a place I could use English to communicate as I&#39;m still (re)learning Japanese</li>\n<li>a good culture, interesting products, and technical challenges</li>\n</ul>\n<p>SmartNews was one of the companies that caught my attention. I attended different events like the &quot;<em>Life in a Japanese Unicorn as a Software Engineer</em>&quot; that was very interesting to understand the engineers&#39; perspectives about working at SmartNews. Even though I needed to wake up at 6 a.m. to attend these events, it was worth it.</p>\n<p>Not only did I attend these events but I also <a href="https://careers.smartnews.com/">read the career page</a> and watched some videos about <a href="https://www.youtube.com/watch?v=VmXoI6XbgS8&amp;t=5s&amp;ab_channel=SmartNews">working at SmartNews</a> and the <a href="https://www.youtube.com/watch?v=mJ9sWRSvU8g&amp;ab_channel=SmartNews">engineering challenges</a>.</p>\n<p>I liked the company&#39;s mission and values. My favorite value is the <code>For the Common Good</code> (Be a valuable contributor to society. Make a direct commitment to build a better world and help the content ecosystem thrive).</p>\n<p>Knowing that the work you do has a real impact on society is gratifying.</p>\n<p>Through the interviews, I could understand a bit more of the company&#39;s culture and how diverse and global they are. I was looking to work in an international environment with a lot of different cultures that I could learn from every single day.</p>\n<p>I am also sure that SmartNews&#39; interviews were the toughest process I participated in my entire career. The company has a high hiring bar for engineering talents and it will be amazing to work with so many interesting and talented people.</p>\n<p>And the reason the company has a high hiring bar for engineers is because of the complex and interesting technical challenges it has to provide the best experience for the users.</p>\n<p>It was great to be challenged in the interviews and also have the opportunity to interview them, ask a lot of questions to make my decision. And I made.</p>\n<h2 id="why-am-i-moving-to-tokyo">Why am I moving to Tokyo?</h2>\n<p>I don&#39;t have one big reason to move to Japan or more specifically Tokyo. Part of me just wants to go YOLO, have this experience, and see what happens next. The other part is way more conscious and rational. So I needed to document a list of reasons why to please the rational TK.</p>\n<p>Japan is part of me. I joke with my friends that in Brazil I feel I&#39;m Japanese. In Japan, I feel I&#39;m Brazilian. But the Japanese culture was always part of me and my family and I want to explore more this part of me.</p>\n<p>Traveling within Brazil and to other countries made me rethink how things are, learn how to make things differently, and embrace new cultures.</p>\n<p>Being in another country is a huge opportunity to immerse me in the culture and learn the language. I had this opportunity of learning Japanese when I was a child, but I missed it. Now that I have the &quot;second chance&quot;, it&#39;ll be awesome to learn a third language and be immersed in the culture. Learning a local language is part of knowing the culture in depth.</p>\n<p>Tokyo has an international vibe and this could be a big factor in terms of adaptability. I like nature, but I love being where things happen. Maybe this is why I always liked living in Sao Paulo. They have similarities in terms of infrastructure and convenience, even though Tokyo is much safer.</p>\n<p>I&#39;m also aware of the work culture in Japan. But as SmartNews is a more &quot;Silicon Valley&quot; kind of company, I didn&#39;t worry about it. Also, in Tokyo is easier to find more international companies that have a better culture fit with me.</p>\n<p>And finally, I know that Japan is not a perfect country, like any other country in the world, so I&#39;m setting the right expectations to not be frustrated when starting living there. I&#39;ll probably like some things and dislike others. It&#39;s part of the trade-off.</p>\n<h2 id="point-of-discomfort--failure">Point of discomfort &amp; Failure</h2>\n<blockquote>\n<p>“Do something that makes you uncomfortable every day. Get out of your comfort zone.” - David Goggins</p>\n</blockquote>\n<p>Seeking discomfort to learn more and grow is one of the things I&#39;m thinking about a lot these days. And what&#39;s the most uncomfortable environment if not moving abroad, changing jobs, learning a new language, and embracing a new culture at the same time?</p>\n<p>I keep asking myself which one is riskier: to do and fail or not to do and have regret?</p>\n<p>As Kobe Bryant said, <a href="https://www.youtube.com/watch?v=js8OfeEL4jI&amp;ab_channel=MykChiz">failure doesn&#39;t exist</a>. If you &quot;fail&quot; Monday, try Tuesday. If you &quot;fail&quot; Tuesday, try Wednesday. I want to keep going, keep growing, and <a href="/designing-my-lifes-system">enable myself to understand more about the world (and about myself)</a>.</p>\n<p>I usually have two different pains: the pain of discipline or the pain of regret. And I want to always consciously choose the pain of discipline.</p>\n<p>I have a lot of plans for my life, experiences I want to have, and things I want to learn. <a href="https://twitter.com/wordsofteekay/status/1443936035105292288">I don&#39;t see myself settling down on things I know</a>, and I want to use this intellectual vitality to get to know everything. With no priority in mind:</p>\n<ul>\n<li><em>Learn Japanese</em> (日本語のべんきょうがんばてね！)</li>\n<li><em>Photography</em>: I can&#39;t wait to take photos of the beautiful city of Tokyo.</li>\n<li><em>Filmography</em>: I&#39;ve been studying it and it&#39;s fascinating the art of capturing feelings and behavior. I see myself doing long-format videos/documentaries about things I find interesting.</li>\n<li><em>Books</em>: I keep <a href="https://www.goodreads.com/iamteekay">collecting books</a> to help me understand the world.</li>\n<li><em>Traveling</em>: embracing the culture won&#39;t happen in my apartment. I want to travel as much as possible and get to know the beautiful places in Japan&#39;s provinces, meet new people.</li>\n<li><em>Writing</em>: I&#39;ve been blogging for 7 years now. But mostly about programming. I want to expand the topics and write about other things I find interesting like, culture, languages, travel.</li>\n<li><em>Tech</em>: I was in backend, fullstack, and frontend roles. I want to have time (and energy) to learn more about system programming and data science (I want to learn these things with my future colleagues as SmartNews is well-known as a Machine Learning company). I&#39;m also doing <a href="https://github.com/imteekay/web-performance-research">independent research on web performance</a>, <a href="https://github.com/imteekay/webdev-research">web development</a>, and <a href="https://github.com/imteekay/devtools-research">devtools</a>.</li>\n</ul>\n<p>Well, I think I have a lot of things to do and my life is just starting. I&#39;m pretty excited about the future and my journey to become the version of myself.</p>\n<blockquote>\n<p>&quot;Be curious. Read widely. Try new things.&quot;</p>\n</blockquote>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://github.com/imteekay/devtools-research">Devtools Research</a></li>\n<li><a href="https://github.com/imteekay/web-performance-research">Web Performance Research</a></li>\n<li><a href="https://github.com/imteekay/webdev-research">Web Development Research</a></li>\n<li><a href="/designing-my-lifes-system">Designing my life&#39;s System</a></li>\n<li><a href="https://leandrotk.medium.com/hist%C3%B3rias-do-jap%C3%A3o-13a0cddd9ac">Histórias do Japão</a></li>\n</ul>\n',
  },
  {
    title: 'Optimizing the Performance of a React Progressive Web App',
    content:
      '<p>In the last quarter, I started working in a new team with different business goals. It was a great team, really fun to work with, and we did a lot of amazing work that I&#39;m proud of.</p>\n<p>One of the projects we managed in the last 4 months was web performance improvements for the application we were working on. This post intends to share the improvements we made and the things we learned throughout this process.</p>\n<h2 id="context">Context</h2>\n<p>Before we start a conversation about web performance, it&#39;s important to show the context behind this work.</p>\n<p>The first thing I want to mention is the fact that the application (PWA) we started to work on had (actually it still has) most parts of the codebase written 2 years ago. It&#39;s a React PWA using Webpack 3, Babel 6, react-redux 5, and so on. A small number of hooks. Most classes components.</p>\n<p>The project didn&#39;t have real ownership of a team or responsible engineer to take care of the codebase. Different teams need to add features here and there in the PWA but don&#39;t actually own the codebase. Effect: the codebase grows in features, bugs, and tech debt, but it is not improved nor refactored.</p>\n<p>With this context, we already had a lot of space to improve the codebase. This project was our focus and started to be our own responsibility as well.</p>\n<p>My colleague and I became &quot;Service Owners&quot; for this project. The idea of the &quot;Service Owners&quot; is someone (or two people in this case) to be the focal point to clear doubts, manage the tech debts, issues, bugs, etc. Basically, someone that takes care of a project.</p>\n<p>Our team was focused on providing the best experience for house owners (landlords): to ease their understanding of the product, register new houses or apartments, and manage the rental and sale of theirs houses.</p>\n<p>Together with the product manager and designer, we created a roadmap of features we wanted to ship that quarter. At the same time, performance is a critical piece of the puzzle to provide a good experience for users. We can start with the basic two &quot;metrics&quot;: page-load and time to interactivity. There&#39;s a correlation (and sometimes causality) between these metrics and user experience.</p>\n<p>We also wanted to ship A/B tests and make sure that performance was not a variable that could affect the results of these tests. Basically, we wanted to prevent performance regressions to not influence the tests (but we needed metrics - we&#39;ll talk about it soon!).</p>\n<p>Our team was not a performance expert team. But the company has a team called Core UX, mainly focused on Web Performance. A team that had experience with frontend performance in the first 3 quarters of 2020.</p>\n<h2 id="the-process">The Process</h2>\n<p>Our first idea was to understand the metrics we wanted to track and take care of and do &quot;discovery&quot; tasks to understand potential issues and how we could improve the user experience and app performance. Along with that, we also tried to have a channel with the web performance team to discuss, learn from them, ask questions, and try to find performance issues and fix them.</p>\n<p>So we opened a new Slack channel to ease this whole idea and have a bi-weekly meeting with them to show what we were working on, what they were working on, discuss possibilities to improve performance, and have time to ask questions and open discussions.</p>\n<p>With this open relationship, we could learn faster and prioritize low-hanging fruit kind of tasks to have faster results with little or no effort at all. We&#39;ll discuss this in-depth later in the Performance Improvements section.</p>\n<p>The whole process was documented: the meetings, our learning, our discoveries, and the performance fixes.</p>\n<h2 id="metrics--measure">Metrics &amp; Measure</h2>\n<p>We had the first discussion about the metrics we wanted to track and my team started to learn more about them. For us that didn&#39;t have much familiarity, at first, it was a bunch of acronyms we didn&#39;t truly understand. FCP, LCP, FID? What&#39;s that?</p>\n<p>To understand these terms, I like to first understand the user experience metrics, because it&#39;s all linked together.</p>\n<p>So, for user experience metrics, I like this User-centric performance metrics article by Google where it defines these metrics:</p>\n<ul>\n<li><strong>Perceived load speed</strong>: how quickly a page can load and render all of its visual elements to the screen.</li>\n<li><strong>Load &amp; Runtime responsiveness</strong>: how quickly a page can load and execute any required JavaScript code in order for components to respond quickly to user interaction</li>\n<li><strong>Visual stability</strong>: do elements on the page shift in ways that users don&#39;t expect and potentially interfere with their interactions?</li>\n<li><strong>Smoothness</strong>: do transitions and animations render at a consistent frame rate and flow fluidly from one state to the next?</li>\n</ul>\n<p>I like this because it&#39;s very relatable. As website users, we can understand these metrics (and possible frustration when using some &quot;bad-performance&quot; kind of websites).</p>\n<p>This is also interesting because we can map the user-centric metrics to the performance metrics we commonly see.</p>\n<ul>\n<li><strong>First contentful paint (FCP)</strong>: measures the time from when the page starts loading to when any part of the page&#39;s content is rendered on the screen.</li>\n<li><strong>Largest contentful paint (LCP)</strong>: measures the time from when the page starts loading to when the largest text block or image element is rendered on the screen.</li>\n<li><strong>First input delay (FID)</strong>: measures the time from when a user first interacts with your site (i.e. when they click a link, tap a button, or use a custom, JavaScript-powered control) to the time when the browser is actually able to respond to that interaction.</li>\n<li><strong>Time to Interactive (TTI)</strong>: measures the time from when the page starts loading to when it&#39;s visually rendered, its initial scripts (if any) have loaded, and it&#39;s capable of reliably responding to user input quickly.</li>\n<li><strong>Total blocking time (TBT)</strong>: measures the total amount of time between FCP and TTI where the main thread was blocked for long enough to prevent input responsiveness.</li>\n<li><strong>Cumulative layout shift (CLS)</strong>: measures the cumulative score of all unexpected layout shifts that occur between when the page starts loading and when its lifecycle state changes to hidden.</li>\n</ul>\n<p>I built a simple table to map the performance metrics to the user-centric metrics to be easier to understand each acronym.</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/metrics-table.png">\n\n<p>As I said earlier, this relation is very interesting and makes us focus not only on bits and bytes but also on the user experience as a whole.</p>\n<h2 id="tooling-audit--knowledge-sharing">Tooling, Audit &amp; Knowledge Sharing</h2>\n<p>After having a better understanding of user experience and performance metrics, we wanted to start tracking them. There is a difference between Lab and Field metrics. According to Google:</p>\n<ul>\n<li><strong>Lab metrics:</strong> using tools to simulate a page load in a consistent, controlled environment.</li>\n<li><strong>Field metrics</strong>: on real users actually loading and interacting with the page.</li>\n</ul>\n<h3 id="lab-metrics">Lab Metrics</h3>\n<p>For the lab metrics, we set up the Lighthouse in our CI using <a href="https://github.com/GoogleChrome/lighthouse-ci">Lighthouse CI</a>. So, for every Pull Request (PR) opened, we run the Lighthouse to gather performance-related data and lock PRs until we fix the performance issue.</p>\n<p>With this tool, we can validate various aspects of the PWA (accessibility, SEO, best practices, and performance), but also add assertions to break PRs when it surpasses a budget threshold we set.</p>\n<p>For example, we can add assertions related to JavaScript and images sizes (in bytes):</p>\n<pre><code class="hljs language-python">assertions: {\n  <span class="hljs-string">&#x27;resource-summary:script:size&#x27;</span>: [\n    <span class="hljs-string">&#x27;error&#x27;</span>,\n    { maxNumericValue: <span class="hljs-number">1000000</span> },\n  ],\n  <span class="hljs-string">&#x27;resource-summary:image:size&#x27;</span>: [\n    <span class="hljs-string">&#x27;error&#x27;</span>,\n    { maxNumericValue: <span class="hljs-number">100000</span> },\n  ],\n  <span class="hljs-string">&#x27;resource-summary:total:size&#x27;</span>: [\n    <span class="hljs-string">&#x27;error&#x27;</span>,\n    { maxNumericValue: <span class="hljs-number">1000000</span> },\n  ],\n},\n</code></pre>\n<p>This JavaScript object is part of the configuration we can use to gather different info about performance. To better understand the configuration for Lighthouse CI, take a look at this docs: <a href="https://github.com/GoogleChrome/lighthouse-ci/blob/master/docs/configuration.md">Lighthouse CI Configuration</a>.</p>\n<p>Another very cool tool we are using for lab metrics is Speed Curve. It&#39;s super simple to set up and start gathering data. This tool works better for &quot;unlogged pages&quot; because we add the URL of the website, and based on the website load and interaction, it will collect performance metrics.</p>\n<p>The Speed Curve dashboard is very flexible to show (or hide) the metrics we want to focus on. In our case, we wanted to see the evolution of the JavaScript total size, First Contentful Paint, Largest Contentful Paint, Cumulative Layout Shift, JS Total Blocking Time, Backend (TTFB) Time, and Lighthouse Performance Score.</p>\n<p>This is working very cool for our landing and home pages.</p>\n<p>The last tool we set up is an in-house tool the performance team built. This is a tool to analyze the app bundles and it has 3 main features now:</p>\n<ul>\n<li><strong>Bundle Analyze Report</strong>: collects and saves the bundle analyzer HTML results.</li>\n<li><strong>Bundle Budgets</strong>: sets up a budget configuration to add a threshold for the bundle sizes. It breaks the PR if the size of a bundle surpasses the threshold.</li>\n<li><strong>Bundle Changes:</strong> shows the bundle size changes between the PR and the master (or main) branch. It helps us easily answer &quot;did it increase/decrease the bundle size for X?&quot;</li>\n</ul>\n<p>This tool is run in our CI pipeline for every PR and the result is shown in the Github PR (it uses <a href="https://github.com/danger/danger-js">Danger</a> behind it).</p>\n<p>These tools are very interesting because</p>\n<ul>\n<li>it helps us prevent performance regressions</li>\n<li>it also creates awareness about web performance, its metrics, and share knowledge</li>\n</ul>\n<h3 id="field-metrics">Field Metrics</h3>\n<p>For now, we are using <a href="https://www.instana.com/">Instana</a> to collect Real User performance-related data.</p>\n<p>The next step for Real User Monitoring (RUM) is to track more user behavior in our application to gather <a href="https://github.com/GoogleChrome/web-vitals">web vitals metrics</a> in the PWA flow.</p>\n<h2 id="performance-improvements">Performance Improvements</h2>\n<p>In this section, I want to detail the process behind each discovery and fixes we did to improve performance and user experience in our application.</p>\n<h3 id="landing-page">Landing Page</h3>\n<p>We started with our landing page. The first action was to analyze the JavaScript bundle size using <a href="https://www.npmjs.com/package/webpack-bundle-analyzer">Webpack Bundle Analyzer</a>.</p>\n<p><strong>Side note</strong>: 2 years ago, the team responsible for the landing page decided to use a tool to develop the landing page with react but in the build time, we remove the react from the application to reduce the bundle size served in the landing page.</p>\n<p>And this is what we got:</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/react-on-lp.png">\n\n<p>We can analyze a lot of things here, but one that got our attention was the React library in our landing page bundle. As I wrote above, in the side note, React is not being used in production, and we are unintentionally serving it in production making our users download the library without the need to do this.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-comment">// components/XYZ.js</span>\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">A_CONSTANT</span> = <span class="hljs-string">&#x27;A_CONSTANT&#x27;</span>;\n</code></pre>\n<p>We had a constant inside a React component file. And we were importing that constant in the landing page.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-comment">// landing.js</span>\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">A_CONSTANT</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;components/XYZ&#x27;</span>;\n</code></pre>\n<p>So importing this constant, we were also importing React.</p>\n<p>A possible simple fix was to separate this constant outside the React component file and import it from this new file.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-comment">// components/XYZ/constants.js</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">A_CONSTANT</span> = <span class="hljs-string">&#x27;A_CONSTANT&#x27;</span>;\n</code></pre>\n<p>And import the constant from the new file:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-comment">// landing.js</span>\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">A_CONSTANT</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;components/XYZ/constants&#x27;</span>;\n</code></pre>\n<p>Let&#39;s see the bundle size impact after this change:</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/befor-after-react.png">\n\n<p>We reduced 95KB! It&#39;s interesting to think we can have a huge impact on a small change after carefully analyzing our bundles. This will be the process behind each improvement we did for the rest of this article:</p>\n<ol>\n<li>Analyze the bundles</li>\n<li>Fix the performance issue</li>\n<li>Gather results &amp; keep track the metrics</li>\n</ol>\n<p>We run again the bundle analyzer and we got this:</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/lp-with-appboy.png">\n\n<p>The first things that got our attention were the <code>appboy.min.js</code> and the <code>transit.js</code> libraries. The <code>appboy</code> is the Braze, a library we use for communication, and the <code>transit</code> is a library to transform JSON format data into our app state.</p>\n<p>The <code>Braze</code> library was very similar to the React library. It was an <code>import</code> statement in a file that the landing page was using but not really using the <code>Braze</code>.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-comment">// braze.js</span>\n<span class="hljs-keyword">import</span> braze <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;appboy-web-sdk&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">aFunction</span> = (<span class="hljs-params">brazeInstance = braze</span>) =&gt; {\n  <span class="hljs-comment">// do something with braze</span>\n};\n</code></pre>\n<p>It was importing Braze in the file and using the instance as a default value for a function. The simple solution was to remove the import statement and enforce that every place that was using the <code>aFunction</code> function passes the braze instance. So we don&#39;t need to import Braze and add a default value to the parameter:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-comment">// braze.js</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">aFunction</span> = (<span class="hljs-params">brazeInstance</span>) =&gt; {\n  <span class="hljs-comment">// do something with braze</span>\n};\n</code></pre>\n<p>Running the bundle analyzer again, we got an astonishing result.</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/before-after-appboy.png">\n\n<p>The AnnounceYourHouse landing page was reduced to 90 KB. We could remove almost 50% of the main landing bundle.</p>\n<p>We also improved a lot the bundle size of the PriceSuggestion landing page. From 115 KB to 4 KB was an amazing result.</p>\n<p>For the <code>transit</code> library, we did a temporary workaround solution. It was importing the library to transform the string JSON saved in the local storage to get info from a single attribute from this object.</p>\n<p>The temporary solution was to verify if the string included the info we wanted and remove the need to use the <code>transit</code> library.</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/befor-after-transit-js.png">\n\n<p>We could improved a lot the bundle size of the main landing. Removing almost 50% of the bundle.</p>\n<p>As we saw in the metrics section, we had set up the Speed Curve to track the performance of some pages in all this journey. So, for every improvement we made in our application, we keep track of the metrics in these tools.</p>\n<p>The total size of the landing page reduced drastically: -2.16 MB.</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/speed-curve-total-size.png">\n\n<p>The Lighthouse Performance score was from 73 to 97:</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/speed-curve-lighthouse-score.png">\n\n<p>The Largest Contentful Paint was improved in 1s:</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/speed-curve-lcp.png">\n\n<h3 id="vendor-chunk">Vendor Chunk</h3>\n<p>When running <code>npm run bundle:analyzer</code>, we also notice a big dependency in our vendor chunk.</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/vendor-icons.png">\n\n<p>In the vendor chunk, we noticed all the icons from Material UI. Every time a user enters the website, and if the chunk is not cached in the browser, it would need to download the whole chunk. If it&#39;s a big chunk to download, it has an impact on the performance and consequently on the user experience.</p>\n<p>This is a <a href="https://material-ui.com/guides/minimizing-bundle-size/">common problem</a> when importing a Material UI icon in a React component.</p>\n<p>One of our components was using an internal component library that used the &quot;named import&quot; style to import the Material UI icon. This, without a proper babel plugin, also adds the rest of the unused icons to the vendor chunk.</p>\n<p>We came up with two solutions:</p>\n<ol>\n<li>Fix the import from this internal component library we had stopping the use of named import.</li>\n<li>Add the babel plugin and configure the app to not add unused modules.</li>\n</ol>\n<p>As this internal component library was the first and the deprecated version of our design system, we didn&#39;t want to keep maintaining it. The best approach was to not use this library anymore and move all the codebase to use the new design system library (and we&#39;re working on it!).</p>\n<p>This performance project was not our main project in the quarter so we had less time to focus on it in the sprint. The babel plugin was a more straightforward and simple solution for us at that moment.</p>\n<p>We basically needed to add this new babel plugin <code>babel-plugin-transform-imports</code> and configure the <code>babelrc</code>:</p>\n<pre><code class="hljs language-jsx">[\n  <span class="hljs-string">&#x27;babel-plugin-transform-imports&#x27;</span>,\n  {\n    <span class="hljs-string">&#x27;@material-ui/core&#x27;</span>: {\n      <span class="hljs-attr">transform</span>: <span class="hljs-string">&#x27;@material-ui/core/esm/${member}&#x27;</span>,\n      <span class="hljs-attr">preventFullImport</span>: <span class="hljs-literal">true</span>,\n    },\n    <span class="hljs-string">&#x27;@material-ui/icons&#x27;</span>: {\n      <span class="hljs-attr">transform</span>: <span class="hljs-string">&#x27;@material-ui/icons/esm/${member}&#x27;</span>,\n      <span class="hljs-attr">preventFullImport</span>: <span class="hljs-literal">true</span>,\n    },\n  },\n];\n</code></pre>\n<p>And with it, we prevent the full import of the library in the vendor chunk.</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/before-after-material-ui.png">\n\n<p>The vendor became way smaller. We also had some impact in the main chunk (the next chunk will talk soon).</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/results-material-ui.png">\n\n<p>With this simple analysis and configuration, we could reduce the vendor chunk by more than 50% (it&#39;s still 2.83 MB and could be improved. We will see later!) and the main chunk by 28%.</p>\n<p>A huge improvement for the whole app as these chunks were downloaded on each page, if not cached in the browser.</p>\n<h3 id="main-chunk">Main Chunk</h3>\n<p>The main chunk has some common modules among all parts of the application. But after running the bundle analyzer, we got this:</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/main-chunk-before.png">\n\n<p>The main chunk is the bottom-left block in the bundle. One thing that got our attention was some containers and components in the bundle. Why are there some components that are specific to only one page but we are making our users download the whole main chunk?</p>\n<p>The issue was simple: our code splitting was not working properly.</p>\n<p>Our initial idea was to make sure all routes had dynamic import for our components to code split in each router entry point. And this was the problem: not all routes entry points had loadable components, so they were joined in the main chunk instead of creates their own chunk for that specific route and page.</p>\n<p>In this application we were using, at that time, <code>react-loadable</code>, so the idea was to simply create these loadables:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Loadable</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-loadable&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Loadable</span>({\n  <span class="hljs-attr">loader</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;component&quot; */</span> <span class="hljs-string">&#x27;./Component&#x27;</span>),\n  <span class="hljs-attr">loading</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">null</span>,\n});\n</code></pre>\n<p>And use them for each route entry point.</p>\n<p>Running bundle analyzer, we got this:</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/main-chunk-after.png">\n\n<p>The main chunk is way smaller and Webpack created more page-specific chunks as well.</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/results-code-splitting.png">\n\n<p>The result was huge. The main chunk got more than 50% smaller and the vendor chunk also decreased by 29%.</p>\n<h3 id="caching-biggest-dependencies">Caching Biggest Dependencies</h3>\n<p>Reading this article, you probably saw some big dependencies in our bundle like firebase, braze, immutable, and so on.</p>\n<p>Every time we do a new product release, our build system generate a new bundle with the chunks. If anything related to the vendor chunk changes, Webpack will generate a new hash for the chunk. So the browser will not have a cached version for this chunk and it will make the user download it again.</p>\n<p>But sometimes, or most of the time, we don&#39;t really change these biggest dependencies (only when the dependency is upgraded), and we are making our users paying for that huge chunk.</p>\n<p>Our idea was to split these biggest dependencies in its own chunk and make sure the browser has a cached version of this chunk and the user doesn&#39;t need to download it again until it is needed.</p>\n<p>As we were using Webpack 3 at that time, we needed to use the <code>CommonsChunkPlugin</code> to split these dependencies in its own chunk.</p>\n<p>We created a list of all biggest dependencies:</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/biggest-deps-table.png">\n\n<p>It was mapped as a list data structure in our Webpack config as well:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VENDOR_LIBRARIES</span> = [\n  {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;@firebase&#x27;</span>,\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;firebase&#x27;</span>,\n  },\n  {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;@braze&#x27;</span>,\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;braze&#x27;</span>,\n  },\n  {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;transit-js&#x27;</span>,\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;transit-js&#x27;</span>,\n  },\n  {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;@material-ui(?!\\\\/icons)&#x27;</span>,\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;material-ui&#x27;</span>,\n  },\n  {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;react-dom&#x27;</span>,\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;react-dom&#x27;</span>,\n  },\n  {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;amplitude-js&#x27;</span>,\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;amplitude-js&#x27;</span>,\n  },\n  {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;immutable&#x27;</span>,\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;immutable&#x27;</span>,\n  },\n  {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;raven-js&#x27;</span>,\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;raven-js&#x27;</span>,\n  },\n];\n</code></pre>\n<p>Along with <code>CommonsChunkPlugin</code>, we just needed to iterate through this list to create each chunk.</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/biggest-deps-later.png">\n\n<p>We can see that the vendor chunk got way smaller and some new chunks were created.</p>\n<p>Running the application, we can also test the download of each separate chunk.</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/biggest-deps-network.png">\n\n<p>And we got a really cool result:</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/results-biggest-deps.png">\n\n<p>The user still needs to download the dependencies, but after download the first time, the browser will cache them and they won&#39;t need to be downloaded again until we bump their version. If we change the vendor chunk, Webpack only generates a new hash for the vendor and doesn&#39;t change the other dependencies.</p>\n<p>We saw some nice improvements in the Speed Curve dashboard:</p>\n<p>As expected, we saw a huge improvement in the JavaScript size: -1.43 MB</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/speed-curve-total-size-home.png">\n\n<p>Decreasing the JavaScript size also had an impact on the total time the user is blocked to interact with the page: -1.2s</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/speed-curve-js-total-blocking-time-home.png">\n\n<p>The speed index is a metric to show how quickly the contents of a page are visibly populated. We improved the page to load 2.2s faster.</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/speed-curve-speed-index-home.png">\n\n<p>And the largest contentful paint went from 6s to 3.75s.</p>\n<img src="/optimizing-the-performance-of-a-react-progressive-web-app/speed-curve-lcp-home.png">\n\n<h2 id="recap">Recap</h2>\n<p>To recap what we saw in this article, let&#39;s see the list of things we did in this journey:</p>\n<ul>\n<li><strong>Measure</strong>: metrics as the foundation of performance improvements.</li>\n<li><strong>Lock</strong>: prevent regressions &amp; scale the performance knowledge.</li>\n<li><strong>Analyze</strong>: with data and metrics, analyze the possible problems.</li>\n<li><strong>Improvements</strong>: code.</li>\n<li><strong>Impact</strong>: measure the before and the later picture.</li>\n</ul>\n<p>I would also recommend talking to more experienced people in this performance domain if it is possible.</p>\n<h2 id="next-steps">Next steps</h2>\n<p>We have more things to do, but we didn&#39;t have time to focus on those things in the last quarter. This is a list of things that come to my mind now:</p>\n<ul>\n<li><strong>More metrics</strong>: rum for logged pages, ux metrics (engagement, bounce rate), business metrics (conversion).</li>\n<li><strong>Manage requests</strong>: server requests caching.</li>\n<li><strong>More Analysis</strong>: backend, chunks, prefetching, etc.</li>\n<li><strong>Removable Dependencies</strong>: analyze big dependencies that can be removable or replaced</li>\n<li><strong>Webpack Upgrade</strong>: bump to v5 - cache, optimization, code-splitting, tree shaking.</li>\n<li><strong>Webpack Optimization</strong>: the need to build faster.</li>\n<li><strong>Keep studying</strong>: learn more to discover more opportunities.</li>\n</ul>\n<h2 id="resources">Resources</h2>\n<p>I have some resources I used along the way while doing this project. I hope it can be helpful to you too: <a href="https://github.com/imteekay/web-performance-studies">Web Performance Studies</a>.</p>\n<h3 id="react">React</h3>\n<ul>\n<li><a href="https://www.educative.io/path/become-a-react-developer?aff=x8bV">Become a React Developer</a></li>\n<li><a href="https://www.educative.io/path/react-development-for-professionals?aff=x8bV">React Development for Professionals</a></li>\n<li><a href="https://www.educative.io/path/react-app-testing?aff=x8bV">React App Testing</a></li>\n<li><a href="https://www.educative.io/path/react-front-end-developer?aff=x8bV">React for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/react-beginner-to-advanced?aff=x8bV">React Deep Dive: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/test-driven-react-development?aff=x8bV">Test-driven Development with React</a></li>\n<li><a href="https://www.educative.io/courses/the-road-to-learn-react?aff=x8bV">The Road to learn React</a></li>\n<li><a href="https://www.educative.io/courses/reintroducing-react-v16-beyond?aff=x8bV">Reintroducing React: V16 and Beyond</a></li>\n<li><a href="https://www.educative.io/courses/advanced-react-patterns-with-hooks?aff=x8bV">Advanced React Patterns With Hooks</a></li>\n<li><a href="https://reactforbeginners.com/friend/LEANDRO">React for Beginners Course</a></li>\n<li><a href="https://advancedreact.com/friend/LEANDRO">Advanced React Course</a></li>\n</ul>\n<h3 id="redux">Redux</h3>\n<ul>\n<li><a href="https://www.educative.io/courses/practical-redux?aff=x8bV">Practical Redux</a></li>\n<li><a href="https://www.educative.io/courses/ultimate-guide-to-redux?aff=x8bV">The Ultimate Guide to Redux</a></li>\n<li><a href="https://www.educative.io/courses/intermediate-redux-toolkit?aff=x8bV">Intermediate Redux with Redux Toolkit</a></li>\n</ul>\n<h3 id="web">Web</h3>\n<ul>\n<li><a href="https://www.educative.io/path/fundamentals-web-programming?aff=x8bV">Fundamentals of Web Programming</a></li>\n<li><a href="https://www.educative.io/path/become-an-ember-js-developer?aff=x8bV">Become an EmberJS Developer</a></li>\n<li><a href="https://www.educative.io/path/ace-front-end-interview?aff=x8bV">Ace the Front End Interview</a></li>\n<li><a href="https://www.educative.io/path/become-front-end-developer?aff=x8bV">Become a Front End Developer</a></li>\n<li><a href="https://www.educative.io/courses/web-development-unraveling-html-css-js?aff=x8bV">Web Development: Unraveling HTML, CSS, and JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/the-complete-javascript-course-build-a-real-world-app-from-scratch?aff=x8bV">Complete JavaScript Course: Build a Real World App from Scratch</a></li>\n</ul>\n<h3 id="typescript">TypeScript</h3>\n<ul>\n<li><a href="https://www.educative.io/path/typescript-for-front-end-developers?aff=x8bV">TypeScript for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/using-typescript-with-react?aff=x8bV">Using TypeScript with React</a></li>\n<li><a href="https://www.educative.io/courses/learn-typescript-complete-course?aff=x8bV">Learn TypeScript: The Complete Course for Beginners</a></li>\n<li><a href="https://www.educative.io/courses/advanced-typescript-masterclass?aff=x8bV">Advanced TypeScript Masterclass</a></li>\n</ul>\n<h3 id="javascript">JavaScript</h3>\n<ul>\n<li><a href="https://www.educative.io/courses/javascript-in-detail-from-beginner-to-advanced?aff=x8bV">JavaScript in Detail: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/simplifying-javascript-handy-guide?aff=x8bV">Simplifying JavaScript: A Handy Guide for Software Engineers</a></li>\n<li><a href="https://www.educative.io/courses/complete-guide-to-modern-javascript?aff=x8bV">The Complete Guide to Modern JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/learn-object-oriented-programming-in-javascript?aff=x8bV">Learn Object-Oriented Programming in JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/javascript-in-practice-es6-and-beyond?aff=x8bV">JavaScript In Practice: ES6 And Beyond</a></li>\n<li><a href="https://www.educative.io/courses/data-structures-coding-interviews-javascript?aff=x8bV">Data Structures for Coding Interviews in JavaScript</a></li>\n<li><a href="https://mbsy.co/lFtbC">JavaScript Course by OneMonth</a></li>\n<li><a href="https://es6.io/friend/LEANDRO">ES6 Course</a></li>\n<li><a href="https://beginnerjavascript.com/friend/LEANDRO">Beginner JavaScript Course</a></li>\n<li><a href="https://www.educative.io/courses/javascript-fundamentals-before-learning-react?aff=x8bV">JavaScript Fundamentals Before Learning React</a></li>\n<li><a href="https://www.educative.io/courses/rediscovering-javascript?aff=x8bV">Rediscovering JavaScript: ES6, ES7 &amp; ES8</a></li>\n</ul>\n',
  },
  {
    title: 'Performance: Prefetch Next Pages Chunks',
    content:
      '<p>Web performance is one of the things I got really interested these days and I&#39;m get myself always learning, reading, and trying things out.</p>\n<p>The idea of this post is to share some ideas about <code>prefetching</code> and how it can be a nice technique to speed up page load (of the next page the user will navigate to).</p>\n<p>One common way to use prefetching (<a href="https://www.w3.org/TR/resource-hints/#prefetch">resource hint</a>) is the declarative <code>link</code> tag together with the <code>rel=&quot;prefetch&quot;</code> attribute. It looks like this:</p>\n<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;prefetch&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/next-page-bundle.js&quot;</span> /&gt;</span>\n</code></pre>\n<p>In this article, we will see this tag generated by Webpack prefetch import as I&#39;m doing in a React project.</p>\n<p>We will create a fake web app from zero using create-react-app, set up different pages (routes), add an analyzer for webpack bundles, separate each page into loadables, and finally prefetch the next page.</p>\n<h2 id="set-up-routes"><a href="https://github.com/imteekay/prefetch-chunk/pull/1/files">Set up routes</a></h2>\n<p>First thing first, let&#39;s create the project using <code>create-react-app</code>. If you have the <code>npx</code> installed, you just need to do:</p>\n<pre><code class="hljs language-bash">$ npx create-react-app prefetch-chunk\n</code></pre>\n<p>This will scaffold the project for you. It uses Webpack under the hood to build the application.</p>\n<p>Now that we have an initialized project, let&#39;s add the <code>react-router</code> to the package.json.</p>\n<pre><code class="hljs language-bash">$ yarn add react-router-dom\n</code></pre>\n<p>We can use the <code>Router</code> and <code>Route</code> from <code>react-router</code> to build simple routes. Here will have a Home, Step1, Step2, and Step3 pages.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">BrowserRouter</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Router</span>, <span class="hljs-title class_">Switch</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Link</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Step1</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Step1<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Step2</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Step2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Step3</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Step3<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/step-1&quot;</span>&gt;</span>Step 1<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/step-2&quot;</span>&gt;</span>Step 2<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/step-3&quot;</span>&gt;</span>Step 3<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/step-1&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">Step1</span> /&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/step-2&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">Step2</span> /&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/step-3&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">Step3</span> /&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">Router</span>&gt;</span></span>\n);\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;\n</code></pre>\n<p>Now we have this 4 pages:</p>\n<ul>\n<li><code>/</code>: Home</li>\n<li><code>/step-1</code>: Step1</li>\n<li><code>/step-2</code>: Step2</li>\n<li><code>/step-3</code>: Step3</li>\n</ul>\n<p>Great! Super simple! Routes set up.</p>\n<h2 id="add-webpack-bundle-analyzer"><a href="https://github.com/imteekay/prefetch-chunk/pull/2/files">Add webpack-bundle-analyzer</a></h2>\n<p>In this section, we want to use the <code>webpack-bundle-analyzer</code> library to be able to analyze the Webpack bundles. Let&#39;s add it:</p>\n<pre><code class="hljs language-bash">$ yarn add webpack-bundle-analyzer\n</code></pre>\n<p>To analyze the bundles, we need to generate the stats from the bundles first and then use the library to analyze them. Something like this:</p>\n<pre><code class="hljs language-bash">$ webpack-bundle-analyzer ./build/bundle-stats.json\n</code></pre>\n<p>So I made a script to build first and then analyze:</p>\n<pre><code class="hljs language-json"><span class="hljs-comment">// package.json</span>\n<span class="hljs-attr">&quot;analyze:bundle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yarn build --stats &amp;&amp; webpack-bundle-analyzer ./build/bundle-stats.json&quot;</span>\n</code></pre>\n<p>Now we can run it and see the stats:</p>\n<img src="/performance-prefetch-next-pages-chunks/full-bundle-pre.png">\n\n<p>The biggest chunk is about some libraries in the <code>node_modules</code>. But if we look closely, we can see the main chunk:</p>\n<img src="/performance-prefetch-next-pages-chunks/main-chunk-pre.png">\n\n<p>This is the main component we created for the routes.</p>\n<h2 id="separate-pages-in-loadables"><a href="https://github.com/imteekay/prefetch-chunk/pull/3/files">Separate pages in loadables</a></h2>\n<p>Now that we have <code>webpack-bundle-analyzer</code>, we can split the pages into its own chunk and analyze them with this library.</p>\n<p>To code split each route, we can use some libraries. For this article, we&#39;ll use <code>@loadable/component</code>:</p>\n<pre><code class="hljs language-bash">$ yarn add @loadable/component\n</code></pre>\n<p>Let&#39;s break down the pages into its own folder and files using the loadable. The structure will look like this:</p>\n<pre><code class="hljs language-bash">src\n│___ App.js\n│\n└─── Pages\n│     └───Home\n│       │___ Home.js\n│       │___ index.js\n│\n│     └───Step1\n│       │___ Step1.js\n│       │___ index.js\n│\n│     └───Step2\n│       │___ Step2.js\n│       │___ index.js\n│\n│     └───Step3\n│       │___ Step3.js\n│       │___ index.js\n</code></pre>\n<p>I didn&#39;t want to make the project structure super complex, so the <code>Pages</code> folder it is. Now let&#39;s see each folder how we can use the <code>loadable</code> to code split our application.</p>\n<ul>\n<li>Home Page</li>\n</ul>\n<pre><code class="hljs language-jsx"><span class="hljs-comment">// src/Pages/Home/Home.js</span>\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;\n\n<span class="hljs-comment">// src/Pages/Home/index.js</span>\n<span class="hljs-keyword">import</span> loadable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@loadable/component&#x27;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">loadable</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;Home&quot; */</span> <span class="hljs-string">&#x27;./Home&#x27;</span>));\n</code></pre>\n<ul>\n<li>Step1 Page</li>\n</ul>\n<pre><code class="hljs language-jsx"><span class="hljs-comment">// src/Pages/Step1/Step1.js</span>\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;\n\n<span class="hljs-comment">// src/Pages/Step1/index.js</span>\n<span class="hljs-keyword">import</span> loadable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@loadable/component&#x27;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">loadable</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;Step1&quot; */</span> <span class="hljs-string">&#x27;./Home&#x27;</span>));\n</code></pre>\n<ul>\n<li>Step2 Page</li>\n</ul>\n<pre><code class="hljs language-jsx"><span class="hljs-comment">// src/Pages/Step2/Step2.js</span>\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;\n\n<span class="hljs-comment">// src/Pages/Step2/index.js</span>\n<span class="hljs-keyword">import</span> loadable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@loadable/component&#x27;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">loadable</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;Step2&quot; */</span> <span class="hljs-string">&#x27;./Home&#x27;</span>));\n</code></pre>\n<ul>\n<li>Step3 Page</li>\n</ul>\n<pre><code class="hljs language-jsx"><span class="hljs-comment">// src/Pages/Step3/Step3.js</span>\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;\n\n<span class="hljs-comment">// src/Pages/Step3/index.js</span>\n<span class="hljs-keyword">import</span> loadable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@loadable/component&#x27;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">loadable</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;Step3&quot; */</span> <span class="hljs-string">&#x27;./Home&#x27;</span>));\n</code></pre>\n<p>Great! Now we can import these loadables into the routes in our App.js:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Step1</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Pages/Step1&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Step2</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Pages/Step2&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Step3</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Pages/Step3&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Pages/Home&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/step-1&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Step1</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/step-2&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Step2</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/step-3&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Step3</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">Router</span>&gt;</span></span>\n);\n</code></pre>\n<p>The App.js looks cleaner but we want to make sure that the code splitting worked. Run again:</p>\n<pre><code class="hljs language-bash">$ yarn analyze:bundle\n</code></pre>\n<p>And the generated stats is:</p>\n<img src="/performance-prefetch-next-pages-chunks/full-bundle-post.png">\n\n<p>We can some small chunks created there. Let&#39;s look closely:</p>\n<img src="/performance-prefetch-next-pages-chunks/code-splitting.png">\n\n<p>We have the <code>Step1</code>, <code>Step2</code>, <code>Step3</code>, and the <code>Home</code> chunks created. Now we are sure the code splitting worked for our routes.</p>\n<h2 id="prefetch-next-page"><a href="https://github.com/imteekay/prefetch-chunk/pull/4/files">Prefetch next page</a></h2>\n<p>As we learned before, a common way to prefetch resources (JavaScript bundles in our case) in HTML is to add a <code>link</code> tag with a <code>rel=&quot;prefetch&quot;</code> in the application <code>head</code> tag.</p>\n<pre><code class="hljs language-jsx">&lt;link rel=<span class="hljs-string">&quot;prefetch&quot;</span> href=<span class="hljs-string">&quot;/next-page-bundle.js&quot;</span>&gt;\n</code></pre>\n<p>But as we are building the application with a build tool (Webpack in our case), the chunks will have a hash, so it&#39;s not easy to know the chunk hash that was generated from this build tool.</p>\n<p>In version 4, Webpack shipped a new feature to import chunks with this prefetch concept. We just need to import a module with the <code>webpackPrefetch: true</code> flag. Something like this:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackPrefetch: true */</span> <span class="hljs-string">&#x27;path/to/the/module&#x27;</span>);\n</code></pre>\n<p>This is what we will do for each page. The user always starts on the <code>Home</code> page (<code>/</code>). The next probable page, she will visit is the <code>Step 1</code> page (<code>/step-1</code>). The next page is the <code>Step 2</code> page (<code>/step-2</code>), and then the <code>Step 3</code> page (<code>/step-3</code>). Let&#39;s break down this idea to make it easier to digest:</p>\n<ul>\n<li><code>Home</code> page: we prefetch <code>Step 1</code> page module.</li>\n<li><code>Step 1</code> page: we prefetch <code>Step 2</code> page module.</li>\n<li><code>Step 2</code> page: we prefetch <code>Step 3</code> page module.</li>\n<li><code>Step 3</code> page: we don&#39;t need to prefetch anything here.</li>\n</ul>\n<p>Great, let&#39;s implement this!</p>\n<p>My first attempt was to just add the import statement in each page component:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackPrefetch: true */</span> <span class="hljs-string">&#x27;Pages/Step1/Step1&#x27;</span>);\n</code></pre>\n<p>But when I add this <code>import</code> to the home page, we&#39;ll get all the chunks downloaded:</p>\n<img src="/performance-prefetch-next-pages-chunks/all-chunks-prefetched.png">\n\n<p>And if we see the <code>head</code> tag, we&#39;ll get this:</p>\n<pre><code class="hljs language-jsx">&lt;script charset=<span class="hljs-string">&quot;utf-8&quot;</span> src=<span class="hljs-string">&quot;/static/js/Home.chunk.js&quot;</span>&gt;&lt;/script&gt;\n&lt;link rel=&quot;prefetch&quot; as=&quot;script&quot; href=&quot;/static/js/Step1.chunk.js&quot;&gt;\n&lt;link rel=&quot;prefetch&quot; as=&quot;script&quot; href=&quot;/static/js/Step2.chunk.js&quot;&gt;\n&lt;link rel=&quot;prefetch&quot; as=&quot;script&quot; href=&quot;/static/js/Step3.chunk.js&quot;&gt;\n</code></pre>\n<p>So for each component, it will try to prefetch the next page. This is why we have all the chunks downloaded in the <code>Home</code> page.</p>\n<p>So one idea is to import each next page when the page component renders.</p>\n<p>As we are changing the DOM, it&#39;s a side-effect, and call this in a <code>useEffect</code> hook. Let&#39;s see how it can work.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackPrefetch: true */</span> <span class="hljs-string">&#x27;Pages/Step1/Step1&#x27;</span>);\n  }, []);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/step-1&quot;</span>&gt;</span>Step 1<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n    <span class="hljs-tag">&lt;/&gt;</span></span>\n  );\n};\n</code></pre>\n<p>If we go to the <code>Home</code> page and open the Network tab, we&#39;ll see the download of the <code>Home.chunk.js</code> as expected, but we also see the <code>Step1.chunk.js</code>.</p>\n<img src="/performance-prefetch-next-pages-chunks/home-prefetch.png">\n\n<p>And in the <code>head</code> tag, we&#39;ll find the following code:</p>\n<pre><code class="hljs language-jsx">&lt;script charset=<span class="hljs-string">&quot;utf-8&quot;</span> src=<span class="hljs-string">&quot;/static/js/Home.chunk.js&quot;</span>&gt;&lt;/script&gt;\n<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;prefetch&quot;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;script&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/js/Step1.chunk.js&quot;</span>&gt;</span></span>\n</code></pre>\n<p>So we make sure that the <code>Home.chunk.js</code> is download to show the page, but the <code>Step1.chunk.js</code> will be downloaded when the browser is in the idle time (prefetching).</p>\n<p>We do the same thing for the <code>Step 1</code> page, but now prefetching the <code>Step 2</code> page module:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Step1</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackPrefetch: true */</span> <span class="hljs-string">&#x27;Pages/Step2/Step2&#x27;</span>);\n  }, []);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/step-2&quot;</span>&gt;</span>Step 2<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Step1<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n    <span class="hljs-tag">&lt;/&gt;</span></span>\n  );\n};\n</code></pre>\n<p>And now for the <code>Step 2</code> page:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Step2</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackPrefetch: true */</span> <span class="hljs-string">&#x27;Pages/Step3/Step3&#x27;</span>);\n  }, []);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/step-3&quot;</span>&gt;</span>Step 3<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Step2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n    <span class="hljs-tag">&lt;/&gt;</span></span>\n  );\n};\n</code></pre>\n<h2 id="final-words">Final Words</h2>\n<p>To recap what we&#39;ve learned:</p>\n<ul>\n<li><a href="https://github.com/imteekay/prefetch-chunk/pull/1/files">Set up routes</a>: add 4 different pages to use for prefetching purpose</li>\n<li><a href="https://github.com/imteekay/prefetch-chunk/pull/2/files">Add webpack-bundle-analyzer</a>: add library to make Webpack bundles easy to analyze</li>\n<li><a href="https://github.com/imteekay/prefetch-chunk/pull/3/files">Loadables for pages</a>: code splitting adding loadable for each page</li>\n<li><a href="https://github.com/imteekay/prefetch-chunk/pull/4/files">Prefetch next page</a>: using the Webpack prefetch feature to prefetch the next page</li>\n</ul>\n<h2 id="resources">Resources</h2>\n<h3 id="react">React</h3>\n<ul>\n<li><a href="https://www.educative.io/path/become-a-react-developer?aff=x8bV">Become a React Developer</a></li>\n<li><a href="https://www.educative.io/path/react-development-for-professionals?aff=x8bV">React Development for Professionals</a></li>\n<li><a href="https://www.educative.io/path/react-app-testing?aff=x8bV">React App Testing</a></li>\n<li><a href="https://www.educative.io/path/react-front-end-developer?aff=x8bV">React for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/react-beginner-to-advanced?aff=x8bV">React Deep Dive: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/test-driven-react-development?aff=x8bV">Test-driven Development with React</a></li>\n<li><a href="https://www.educative.io/courses/the-road-to-learn-react?aff=x8bV">The Road to learn React</a></li>\n<li><a href="https://www.educative.io/courses/reintroducing-react-v16-beyond?aff=x8bV">Reintroducing React: V16 and Beyond</a></li>\n<li><a href="https://www.educative.io/courses/advanced-react-patterns-with-hooks?aff=x8bV">Advanced React Patterns With Hooks</a></li>\n<li><a href="https://reactforbeginners.com/friend/LEANDRO">React for Beginners Course</a></li>\n<li><a href="https://advancedreact.com/friend/LEANDRO">Advanced React Course</a></li>\n</ul>\n<h3 id="redux">Redux</h3>\n<ul>\n<li><a href="https://www.educative.io/courses/practical-redux?aff=x8bV">Practical Redux</a></li>\n<li><a href="https://www.educative.io/courses/ultimate-guide-to-redux?aff=x8bV">The Ultimate Guide to Redux</a></li>\n<li><a href="https://www.educative.io/courses/intermediate-redux-toolkit?aff=x8bV">Intermediate Redux with Redux Toolkit</a></li>\n</ul>\n<h3 id="web">Web</h3>\n<ul>\n<li><a href="https://www.educative.io/path/fundamentals-web-programming?aff=x8bV">Fundamentals of Web Programming</a></li>\n<li><a href="https://www.educative.io/path/become-an-ember-js-developer?aff=x8bV">Become an EmberJS Developer</a></li>\n<li><a href="https://www.educative.io/path/ace-front-end-interview?aff=x8bV">Ace the Front End Interview</a></li>\n<li><a href="https://www.educative.io/path/become-front-end-developer?aff=x8bV">Become a Front End Developer</a></li>\n<li><a href="https://www.educative.io/courses/web-development-unraveling-html-css-js?aff=x8bV">Web Development: Unraveling HTML, CSS, and JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/the-complete-javascript-course-build-a-real-world-app-from-scratch?aff=x8bV">Complete JavaScript Course: Build a Real World App from Scratch</a></li>\n</ul>\n<h3 id="typescript">TypeScript</h3>\n<ul>\n<li><a href="https://www.educative.io/path/typescript-for-front-end-developers?aff=x8bV">TypeScript for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/using-typescript-with-react?aff=x8bV">Using TypeScript with React</a></li>\n<li><a href="https://www.educative.io/courses/learn-typescript-complete-course?aff=x8bV">Learn TypeScript: The Complete Course for Beginners</a></li>\n<li><a href="https://www.educative.io/courses/advanced-typescript-masterclass?aff=x8bV">Advanced TypeScript Masterclass</a></li>\n</ul>\n<h3 id="javascript">JavaScript</h3>\n<ul>\n<li><a href="https://www.educative.io/courses/javascript-in-detail-from-beginner-to-advanced?aff=x8bV">JavaScript in Detail: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/simplifying-javascript-handy-guide?aff=x8bV">Simplifying JavaScript: A Handy Guide for Software Engineers</a></li>\n<li><a href="https://www.educative.io/courses/complete-guide-to-modern-javascript?aff=x8bV">The Complete Guide to Modern JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/learn-object-oriented-programming-in-javascript?aff=x8bV">Learn Object-Oriented Programming in JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/javascript-in-practice-es6-and-beyond?aff=x8bV">JavaScript In Practice: ES6 And Beyond</a></li>\n<li><a href="https://www.educative.io/courses/data-structures-coding-interviews-javascript?aff=x8bV">Data Structures for Coding Interviews in JavaScript</a></li>\n<li><a href="https://mbsy.co/lFtbC">JavaScript Course by OneMonth</a></li>\n<li><a href="https://es6.io/friend/LEANDRO">ES6 Course</a></li>\n<li><a href="https://beginnerjavascript.com/friend/LEANDRO">Beginner JavaScript Course</a></li>\n<li><a href="https://www.educative.io/courses/javascript-fundamentals-before-learning-react?aff=x8bV">JavaScript Fundamentals Before Learning React</a></li>\n<li><a href="https://www.educative.io/courses/rediscovering-javascript?aff=x8bV">Rediscovering JavaScript: ES6, ES7 &amp; ES8</a></li>\n</ul>\n<p>For more resources on performance, take at my <a href="https://github.com/imteekay/web-performance-studies">Web Performance Studies</a>. It&#39;s a repository with all the resources I&#39;ve been consuming to learn about performance.</p>\n',
  },
  {
    title:
      'Publisher, a tooling to automate the process to publish my blog posts',
    content:
      '<p>As I&#39;m building a writing habit, well, I&#39;m writing more and more. Even though I use publishing blogs like <a href="https://medium.com/@leandrotk_">Medium</a>, <a href="https://dev.to/teekay">dev.to</a>, and <a href="https://hashnode.com/@teekay">Hashnode</a>, I like to post my content on <a href="http://leandrotk.github.io/tk">my own blog</a>.</p>\n<p>As I wanted to build a simple website, this blog is basically an HTML, CSS with very little JavaScript website. But the thing is, the publishing process could be a lot better.</p>\n<p>How does it work now?</p>\n<p>I manage the blog roadmap on Notion. It looks like this:</p>\n<img src="/publisher-a-tooling-to-automate-the-process-to-publish-my-blog-posts/blog-roadmap.png">\n\n<p>It&#39;s a simple kanban type of board. I like this board because I can get all my ideas into physical (or digital?) representation. I also use it to build a draft, polish and make it better and better to publish in the blog.</p>\n<p>So I write my blog post using Notion. After I finish it, I copy the Notion writing and paste it into an online tool to transform markdown into HTML. And then I can use this HTML to create the actual post.</p>\n<p>But this is just the body, the content for the page. I always need to create the whole HTML with the head content, body, and footer.</p>\n<p>This process is tedious and boring. But good news, it can be automated. And this post is all about this automation. I want to show you the behind the scenes of this new tool I created and the learnings I got through this process.</p>\n<h2 id="features">Features</h2>\n<p>My main idea was to have a whole HTML article ready to publish. As I mentioned before, the <code>&lt;head&gt;</code> and <code>&lt;footer&gt;</code> sections don&#39;t change much. So I could use it as a &quot;template&quot;.</p>\n<p>With this template, I have the data that could change for each article I would write and publish. This data could be a variable in the template with this representation <code>{{ variableName }}</code>. An example:</p>\n<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{ title }}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n</code></pre>\n<p>Now I can use the template and replace the variables with real data, specific info for each article.</p>\n<p>The second part is the body, the real post. In the template, it is represented by <code>{{ article }}</code>. This variable will be replaced by the HTML generated by Notion markdown.</p>\n<p>When we copy and paste notes from Notion, we get kind of a Markdown style. This project will transform this markdown into an HTML and use it as the <code>article</code> variable in the template.</p>\n<p>To create the ideal template, I took a look of all variables I needed to create:</p>\n<ul>\n<li><code>title</code></li>\n<li><code>description</code></li>\n<li><code>date</code></li>\n<li><code>tags</code></li>\n<li><code>imageAlt</code></li>\n<li><code>imageCover</code></li>\n<li><code>photographerUrl</code></li>\n<li><code>photographerName</code></li>\n<li><code>article</code></li>\n<li><code>keywords</code></li>\n</ul>\n<p>With these variables, I created the <a href="https://github.com/imteekay/publisher/blob/master/examples/template.html">template</a>.</p>\n<p>To pass some of this information to build the HTML, I created a <code>json</code> file as the article config: <code>article.config.json</code>. There I have something like this:</p>\n<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;React Hooks, Context API, and Pokemons&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Understanding how hooks and the context api work&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2020-04-21&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;javascript&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;react&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;imageAlt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;The Ash from Pokemon&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;photographerUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;https://www.instagram.com/kazuh.illust&gt;&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;photographerName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kazuh.yasiro&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;articleFile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;article.md&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;keywords&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;javascript,react&quot;</span>\n<span class="hljs-punctuation">}</span>\n</code></pre>\n<p>First step: the project should know how to open and read the template and the article config. With this data, I could use to populate the template.</p>\n<p>Template first:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">templateContent</span>: <span class="hljs-built_in">string</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getTemplateContent</span>();\n</code></pre>\n<p>So we basically need to implement the <code>getTemplateContent</code> function.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">import</span> fs, { promises } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span>;\n<span class="hljs-keyword">import</span> { resolve } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span>;\n\n<span class="hljs-keyword">const</span> { readFile } = promises;\n\n<span class="hljs-keyword">const</span> getTemplateContent = <span class="hljs-keyword">async</span> (): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">string</span>&gt; =&gt; {\n  <span class="hljs-keyword">const</span> contentTemplatePath = <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../examples/template.html&#x27;</span>);\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-title function_">readFile</span>(contentTemplatePath, <span class="hljs-string">&#x27;utf8&#x27;</span>);\n};\n</code></pre>\n<p>The <code>resolve</code> with <code>__dirname</code> will get the absolute path to the directory from the source file that is running. And then go to the <code>examples/template.html</code> file. The <code>readFile</code> will asynchronously read and return the content from the template path.</p>\n<p>Now we have the template content. And we need to do the same thing for the article config.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> getArticleConfig = <span class="hljs-keyword">async</span> (): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">ArticleConfig</span>&gt; =&gt; {\n  <span class="hljs-keyword">const</span> articleConfigPath = <span class="hljs-title function_">resolve</span>(\n    __dirname,\n    <span class="hljs-string">&#x27;../examples/article.config.json&#x27;</span>,\n  );\n  <span class="hljs-keyword">const</span> articleConfigContent = <span class="hljs-keyword">await</span> <span class="hljs-title function_">readFile</span>(articleConfigPath, <span class="hljs-string">&#x27;utf8&#x27;</span>);\n  <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(articleConfigContent);\n};\n</code></pre>\n<p>Two different things here:</p>\n<ul>\n<li>As the <code>article.config.json</code> has a json format, we need to transform this json string into an JavaScript object after reading the file</li>\n<li>The return of the article config content will be an <code>ArticleConfig</code> as I defined in the function return type. Let&#39;s build it.</li>\n</ul>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ArticleConfig</span> = {\n  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">description</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">date</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">tags</span>: <span class="hljs-built_in">string</span>[];\n  <span class="hljs-attr">imageCover</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">imageAlt</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">photographerUrl</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">photographerName</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">articleFile</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">keywords</span>: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<p>When we get this content, we also use this new type.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">articleConfig</span>: <span class="hljs-title class_">ArticleConfig</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getArticleConfig</span>();\n</code></pre>\n<p>Now we can use the <code>replace</code> method to fill the config data in the template content. Just to illustrate the idea, it would look like this:</p>\n<pre><code class="hljs language-ts">templateContent.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;title&#x27;</span>, articleConfig.<span class="hljs-property">title</span>);\n</code></pre>\n<p>But some variables appear more than one time in the template. Regex for the rescue. With this:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;\\\\{\\\\{(?:\\\\\\\\s+)?(title)(?:\\\\\\\\s+)?\\\\}\\\\}&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>);\n</code></pre>\n<p>... I get all the strings that match <code>{{ title }}</code>. So I could build a function that receives a parameter to be found and use it in the title place.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> getPattern = (<span class="hljs-attr">find</span>: <span class="hljs-built_in">string</span>): <span class="hljs-function"><span class="hljs-params">RegExp</span> =&gt;</span>\n  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;\\\\{\\\\{(?:\\\\\\\\s+)?(&#x27;</span> + find + <span class="hljs-string">&#x27;)(?:\\\\\\\\s+)?\\\\}\\\\}&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>);\n</code></pre>\n<p>Now we can replace all matches. An example for the title variable:</p>\n<pre><code class="hljs language-ts">templateContent.<span class="hljs-title function_">replace</span>(<span class="hljs-title function_">getPattern</span>(<span class="hljs-string">&#x27;title&#x27;</span>), articleConfig.<span class="hljs-property">title</span>);\n</code></pre>\n<p>But we don&#39;t want to replace only the title variable, but all variables from the article config. Replace all!</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">buildArticle</span> = (<span class="hljs-params">templateContent: <span class="hljs-built_in">string</span></span>) =&gt; ({\n  <span class="hljs-attr">with</span>: <span class="hljs-function">(<span class="hljs-params">articleConfig: ArticleAttributes</span>) =&gt;</span>\n    templateContent\n      .<span class="hljs-title function_">replace</span>(<span class="hljs-title function_">getPattern</span>(<span class="hljs-string">&#x27;title&#x27;</span>), articleConfig.<span class="hljs-property">title</span>)\n      .<span class="hljs-title function_">replace</span>(<span class="hljs-title function_">getPattern</span>(<span class="hljs-string">&#x27;description&#x27;</span>), articleConfig.<span class="hljs-property">description</span>)\n      .<span class="hljs-title function_">replace</span>(<span class="hljs-title function_">getPattern</span>(<span class="hljs-string">&#x27;date&#x27;</span>), articleConfig.<span class="hljs-property">date</span>)\n      .<span class="hljs-title function_">replace</span>(<span class="hljs-title function_">getPattern</span>(<span class="hljs-string">&#x27;tags&#x27;</span>), articleConfig.<span class="hljs-property">articleTags</span>)\n      .<span class="hljs-title function_">replace</span>(<span class="hljs-title function_">getPattern</span>(<span class="hljs-string">&#x27;imageCover&#x27;</span>), articleConfig.<span class="hljs-property">imageCover</span>)\n      .<span class="hljs-title function_">replace</span>(<span class="hljs-title function_">getPattern</span>(<span class="hljs-string">&#x27;imageAlt&#x27;</span>), articleConfig.<span class="hljs-property">imageAlt</span>)\n      .<span class="hljs-title function_">replace</span>(<span class="hljs-title function_">getPattern</span>(<span class="hljs-string">&#x27;photographerUrl&#x27;</span>), articleConfig.<span class="hljs-property">photographerUrl</span>)\n      .<span class="hljs-title function_">replace</span>(<span class="hljs-title function_">getPattern</span>(<span class="hljs-string">&#x27;photographerName&#x27;</span>), articleConfig.<span class="hljs-property">photographerName</span>)\n      .<span class="hljs-title function_">replace</span>(<span class="hljs-title function_">getPattern</span>(<span class="hljs-string">&#x27;article&#x27;</span>), articleConfig.<span class="hljs-property">articleBody</span>)\n      .<span class="hljs-title function_">replace</span>(<span class="hljs-title function_">getPattern</span>(<span class="hljs-string">&#x27;keywords&#x27;</span>), articleConfig.<span class="hljs-property">keywords</span>),\n});\n</code></pre>\n<p>Now I replace all! We use it like this:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">article</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title function_">buildArticle</span>(templateContent).<span class="hljs-title function_">with</span>(articleConfig);\n</code></pre>\n<p>But we are missing two parts here:</p>\n<ul>\n<li><code>tags</code></li>\n<li><code>article</code></li>\n</ul>\n<p>In the config json file, the <code>tags</code> is a list. So, for the list:</p>\n<pre><code class="hljs language-ts">[<span class="hljs-string">&#x27;javascript&#x27;</span>, <span class="hljs-string">&#x27;react&#x27;</span>];\n</code></pre>\n<p>The final HTML would be:</p>\n<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tag-link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../tags/javascript.html&quot;</span>&gt;</span>javascript<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tag-link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../tags/react.html&quot;</span>&gt;</span>react<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n</code></pre>\n<p>So I created another template: <code>tag_template.html</code> with the <code>{{ tag }}</code> variable. We just need to map the <code>tags</code> list and create each HTML tag template.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> getArticleTags = <span class="hljs-keyword">async</span> ({\n  tags,\n}: {\n  <span class="hljs-attr">tags</span>: <span class="hljs-built_in">string</span>[];\n}): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">string</span>&gt; =&gt; {\n  <span class="hljs-keyword">const</span> tagTemplatePath = <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../examples/tag_template.html&#x27;</span>);\n  <span class="hljs-keyword">const</span> tagContent = <span class="hljs-keyword">await</span> <span class="hljs-title function_">readFile</span>(tagTemplatePath, <span class="hljs-string">&#x27;utf8&#x27;</span>);\n  <span class="hljs-keyword">return</span> tags.<span class="hljs-title function_">map</span>(<span class="hljs-title function_">buildTag</span>(tagContent)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);\n};\n</code></pre>\n<p>Here we:</p>\n<ul>\n<li>get the tag template path</li>\n<li>get the tag template content</li>\n<li>map through the <code>tags</code> and build the final tag HTML based on the tag template</li>\n</ul>\n<p>The <code>buildTag</code> is a function that returns another function.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">buildTag</span> =\n  (<span class="hljs-params">tagContent: <span class="hljs-built_in">string</span></span>) =&gt;\n  (<span class="hljs-attr">tag</span>: <span class="hljs-built_in">string</span>): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span>\n    tagContent.<span class="hljs-title function_">replace</span>(<span class="hljs-title function_">getPattern</span>(<span class="hljs-string">&#x27;tag&#x27;</span>), tag);\n</code></pre>\n<p>It receives the <code>tagContent</code> - it is the tag template content - and returns a function that receives a tag an build the final tag HTML. And now we call it to get the article tags.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">articleTags</span>: <span class="hljs-built_in">string</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getArticleTags</span>(articleConfig);\n</code></pre>\n<p>About the article now. It looks like this:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> getArticleBody = <span class="hljs-keyword">async</span> ({\n  articleFile,\n}: {\n  <span class="hljs-attr">articleFile</span>: <span class="hljs-built_in">string</span>;\n}): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">string</span>&gt; =&gt; {\n  <span class="hljs-keyword">const</span> articleMarkdownPath = <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">`../examples/<span class="hljs-subst">${articleFile}</span>`</span>);\n  <span class="hljs-keyword">const</span> articleMarkdown = <span class="hljs-keyword">await</span> <span class="hljs-title function_">readFile</span>(articleMarkdownPath, <span class="hljs-string">&#x27;utf8&#x27;</span>);\n  <span class="hljs-keyword">return</span> <span class="hljs-title function_">fromMarkdownToHTML</span>(articleMarkdown);\n};\n</code></pre>\n<p>It receives the <code>articleFile</code>, we try to get the path, read the file, and get the markdown content. Then pass this content to <code>fromMarkdownToHTML</code> function to transform the markdown into an HTML.</p>\n<p>This part I&#39;m using an external library called <code>showdown</code>. It handles every little corner case to transform markdown into HTML.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">import</span> showdown <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;showdown&#x27;</span>;\n\n<span class="hljs-keyword">const</span> fromMarkdownToHTML = (<span class="hljs-attr">articleMarkdown</span>: <span class="hljs-built_in">string</span>): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> converter = <span class="hljs-keyword">new</span> showdown.<span class="hljs-title class_">Converter</span>();\n  <span class="hljs-keyword">return</span> converter.<span class="hljs-title function_">makeHtml</span>(articleMarkdown);\n};\n</code></pre>\n<p>And now I have the tags and the article HTML:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">templateContent</span>: <span class="hljs-built_in">string</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getTemplateContent</span>();\n<span class="hljs-keyword">const</span> <span class="hljs-attr">articleConfig</span>: <span class="hljs-title class_">ArticleConfig</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getArticleConfig</span>();\n<span class="hljs-keyword">const</span> <span class="hljs-attr">articleTags</span>: <span class="hljs-built_in">string</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getArticleTags</span>(articleConfig);\n<span class="hljs-keyword">const</span> <span class="hljs-attr">articleBody</span>: <span class="hljs-built_in">string</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getArticleBody</span>(articleConfig);\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">article</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title function_">buildArticle</span>(templateContent).<span class="hljs-title function_">with</span>({\n  ...articleConfig,\n  articleTags,\n  articleBody,\n});\n</code></pre>\n<p>I missed one more thing! Before, I expected that I always needed to add the image cover path into the article config file. Something like this:</p>\n<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;imageCover&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;an-image.png&quot;</span>\n<span class="hljs-punctuation">}</span>\n</code></pre>\n<p>But we could assume that the image name will be <code>cover</code>. The challenge was the extension. It can be <code>.png</code>, <code>.jpg</code>, <code>.jpeg</code>, or <code>.gif</code>.</p>\n<p>So I built a function to get the right image extension. The idea is to search for the image in the folder. If it exists in the folder, return the extension.</p>\n<p>I started with the &quot;existing&quot; part.</p>\n<pre><code class="hljs language-ts">fs.<span class="hljs-title function_">existsSync</span>(<span class="hljs-string">`<span class="hljs-subst">${folder}</span>/<span class="hljs-subst">${fileName}</span>.<span class="hljs-subst">${extension}</span>`</span>);\n</code></pre>\n<p>Here I&#39;m using the <code>existsSync</code> function to find the file. If it exists in the folder, it returns true. Otherwise, false.</p>\n<p>I added this code into a function:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">existsFile</span> =\n  (<span class="hljs-params">folder: <span class="hljs-built_in">string</span>, fileName: <span class="hljs-built_in">string</span></span>) =&gt;\n  (<span class="hljs-attr">extension</span>: <span class="hljs-built_in">string</span>): <span class="hljs-function"><span class="hljs-params">boolean</span> =&gt;</span>\n    fs.<span class="hljs-title function_">existsSync</span>(<span class="hljs-string">`<span class="hljs-subst">${folder}</span>/<span class="hljs-subst">${fileName}</span>.<span class="hljs-subst">${extension}</span>`</span>);\n</code></pre>\n<p>Why did I do this way?</p>\n<p>Using this function, I need to pass the <code>folder</code>, the <code>filename</code>, and the <code>extension</code>. The <code>folder</code> and the <code>filename</code> are always the same. The difference is the <code>extension</code>.</p>\n<p>So I could build a function using curry. That way, I can build different functions for the same <code>folder</code> and <code>filename</code>. Like this:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> hasFileWithExtension = <span class="hljs-title function_">existsFile</span>(examplesFolder, imageName);\n\n<span class="hljs-title function_">hasFileWithExtension</span>(<span class="hljs-string">&#x27;jpeg&#x27;</span>); <span class="hljs-comment">// true or false</span>\n<span class="hljs-title function_">hasFileWithExtension</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>); <span class="hljs-comment">// true or false</span>\n<span class="hljs-title function_">hasFileWithExtension</span>(<span class="hljs-string">&#x27;png&#x27;</span>); <span class="hljs-comment">// true or false</span>\n<span class="hljs-title function_">hasFileWithExtension</span>(<span class="hljs-string">&#x27;gif&#x27;</span>); <span class="hljs-comment">// true or false</span>\n</code></pre>\n<p>The whole function would look like this:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> getImageExtension = (): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">examplesFolder</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">`../examples`</span>);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">imageName</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;cover&#x27;</span>;\n  <span class="hljs-keyword">const</span> hasFileWithExtension = <span class="hljs-title function_">existsFile</span>(examplesFolder, imageName);\n\n  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasFileWithExtension</span>(<span class="hljs-string">&#x27;jpeg&#x27;</span>)) {\n    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;jpeg&#x27;</span>;\n  }\n\n  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasFileWithExtension</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>)) {\n    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;jpg&#x27;</span>;\n  }\n\n  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasFileWithExtension</span>(<span class="hljs-string">&#x27;png&#x27;</span>)) {\n    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;png&#x27;</span>;\n  }\n\n  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;gif&#x27;</span>;\n};\n</code></pre>\n<p>But I didn&#39;t like this hardcoded string to represent the image extension. <code>enum</code> is really cool!</p>\n<pre><code class="hljs language-ts"><span class="hljs-built_in">enum</span> <span class="hljs-title class_">ImageExtension</span> {\n  <span class="hljs-variable constant_">JPEG</span> = <span class="hljs-string">&#x27;jpeg&#x27;</span>,\n  <span class="hljs-variable constant_">JPG</span> = <span class="hljs-string">&#x27;jpg&#x27;</span>,\n  <span class="hljs-variable constant_">PNG</span> = <span class="hljs-string">&#x27;png&#x27;</span>,\n  <span class="hljs-variable constant_">GIF</span> = <span class="hljs-string">&#x27;gif&#x27;</span>,\n}\n</code></pre>\n<p>And the function now using our new enum <code>ImageExtension</code>:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> getImageExtension = (): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">examplesFolder</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">`../examples`</span>);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">imageName</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;cover&#x27;</span>;\n  <span class="hljs-keyword">const</span> hasFileWithExtension = <span class="hljs-title function_">existsFile</span>(examplesFolder, imageName);\n\n  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasFileWithExtension</span>(<span class="hljs-title class_">ImageExtension</span>.<span class="hljs-property">JPEG</span>)) {\n    <span class="hljs-keyword">return</span> <span class="hljs-title class_">ImageExtension</span>.<span class="hljs-property">JPEG</span>;\n  }\n\n  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasFileWithExtension</span>(<span class="hljs-title class_">ImageExtension</span>.<span class="hljs-property">JPG</span>)) {\n    <span class="hljs-keyword">return</span> <span class="hljs-title class_">ImageExtension</span>.<span class="hljs-property">JPG</span>;\n  }\n\n  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasFileWithExtension</span>(<span class="hljs-title class_">ImageExtension</span>.<span class="hljs-property">PNG</span>)) {\n    <span class="hljs-keyword">return</span> <span class="hljs-title class_">ImageExtension</span>.<span class="hljs-property">PNG</span>;\n  }\n\n  <span class="hljs-keyword">return</span> <span class="hljs-title class_">ImageExtension</span>.<span class="hljs-property">GIF</span>;\n};\n</code></pre>\n<p>Now I have all the data to fill the template. Great!</p>\n<p>As the HTML is done, I want to create the real HTML file with this data. I basically need to get the correct path, the HTML, and use the <code>writeFile</code> function to create this file.</p>\n<p>To get the path, I needed to understand the pattern of my blog. It organizes the folder with the year, the month, the title, and the file is named <code>index.html</code>.</p>\n<p>An example would be:</p>\n<pre><code class="hljs language-bash">2020/04/publisher-a-tooling-to-blog-post-publishing/index.html\n</code></pre>\n<p>At first, I thought about adding this data to the article config file. So every time I need to update this attribute from the article config to get the correct path.</p>\n<p>But another interesting idea was to infer the path by some data we already have in the article config file. We have the <code>date</code> (e.g. <code>&quot;2020-04-21&quot;</code>) and the <code>title</code> (e.g. <code>&quot;Publisher: tooling to automate blog post publishing&quot;</code>).</p>\n<p>From the date, I can get the year and the month. From the title, I can generate the article folder. The <code>index.html</code> is always constant.</p>\n<p>The string would like this:</p>\n<pre><code class="hljs language-ts"><span class="hljs-string">`<span class="hljs-subst">${year}</span>/<span class="hljs-subst">${month}</span>/<span class="hljs-subst">${slugifiedTitle}</span>`</span>;\n</code></pre>\n<p>For the date, it is really simple. I can split by <code>-</code> and destructure:</p>\n<pre><code>const [year, month]: string[] = date.split(&#x27;-&#x27;);\n</code></pre>\n<p>For the <code>slugifiedTitle</code>, I built a function:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> slugify = (<span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span>\n  title\n    .<span class="hljs-title function_">trim</span>()\n    .<span class="hljs-title function_">toLowerCase</span>()\n    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[^\\\\w\\\\s]/gi</span>, <span class="hljs-string">&#x27;&#x27;</span>)\n    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[\\\\s]/g</span>, <span class="hljs-string">&#x27;-&#x27;</span>);\n</code></pre>\n<p>It removes the white spaces from the beginning and the end of the string. Then downcase the string. Then remove all special characters (keep only word and whitespace characters). And finally, replace all whitespaces with a <code>-</code>.</p>\n<p>The whole function looks like this:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> buildNewArticleFolderPath = ({\n  title,\n  date,\n}: {\n  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">date</span>: <span class="hljs-built_in">string</span>;\n}): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> [year, month]: <span class="hljs-built_in">string</span>[] = date.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">slugifiedTitle</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title function_">slugify</span>(title);\n\n  <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">`../../<span class="hljs-subst">${year}</span>/<span class="hljs-subst">${month}</span>/<span class="hljs-subst">${slugifiedTitle}</span>`</span>);\n};\n</code></pre>\n<p>This function tries to get the article folder. It doesn&#39;t generate the new file. This is why I didn&#39;t add the <code>/index.html</code> to the end of the final string.</p>\n<p>Why did it do that? Because, before writing the new file, we always need to create the folder. I used <code>mkdir</code> with this folder path to create it.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">newArticleFolderPath</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title function_">buildNewArticleFolderPath</span>(articleConfig);\n<span class="hljs-keyword">await</span> <span class="hljs-title function_">mkdir</span>(newArticleFolderPath, { <span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span> });\n</code></pre>\n<p>And now I could use the folder the create the new article file in it.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">newArticlePath</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`<span class="hljs-subst">${newArticleFolderPath}</span>/index.html`</span>;\n<span class="hljs-keyword">await</span> <span class="hljs-title function_">writeFile</span>(newArticlePath, article);\n</code></pre>\n<p>One thing we are missing here: as I added the image cover in the article config folder, I needed to copy it and paste it into the right place.</p>\n<p>For the <code>2020/04/publisher-a-tooling-to-blog-post-publishing/index.html</code> example, the image cover would be in the assets folder:</p>\n<pre><code class="hljs language-bash">2020/04/publisher-a-tooling-to-blog-post-publishing/assets/cover.png\n</code></pre>\n<p>To do this, I need two things:</p>\n<ul>\n<li>create a new <code>assets</code> folder with <code>mkdir</code></li>\n<li>copy the image file and paste it into the new folder with <code>copyFile</code></li>\n</ul>\n<p>To create the new folder, I just need the folder path. To copy and paste the image file, I need the current image path and the article image path.</p>\n<p>For the folder, as I have the <code>newArticleFolderPath</code>, I just need to concatenate this path to the assets folder.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">assetsFolder</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`<span class="hljs-subst">${newArticleFolderPath}</span>/assets`</span>;\n</code></pre>\n<p>For the current image path, I have the <code>imageCoverFileName</code> with the correct extension. I just need to get the image cover path:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">imageCoverExamplePath</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title function_">resolve</span>(\n  __dirname,\n  <span class="hljs-string">`../examples/<span class="hljs-subst">${imageCoverFileName}</span>`</span>,\n);\n</code></pre>\n<p>To get the future image path, I need to concatenate the image cover path and the image file name:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">imageCoverPath</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`<span class="hljs-subst">${assetsFolder}</span>/<span class="hljs-subst">${imageCoverFileName}</span>`</span>;\n</code></pre>\n<p>With all these data, I can create the new folder:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">await</span> <span class="hljs-title function_">mkdir</span>(assetsFolder, { <span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span> });\n</code></pre>\n<p>And copy and paste the image cover file:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">await</span> <span class="hljs-title function_">copyFile</span>(imageCoverExamplePath, imageCoverPath);\n</code></pre>\n<p>As I was implementing this <code>paths</code> part, I saw I could group them all into a function <code>buildPaths</code>.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> buildPaths = (<span class="hljs-attr">newArticleFolderPath</span>: <span class="hljs-built_in">string</span>): <span class="hljs-function"><span class="hljs-params">ArticlePaths</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">imageExtension</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title function_">getImageExtension</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">imageCoverFileName</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`cover.<span class="hljs-subst">${imageExtension}</span>`</span>;\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">newArticlePath</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`<span class="hljs-subst">${newArticleFolderPath}</span>/index.html`</span>;\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">imageCoverExamplePath</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title function_">resolve</span>(\n    __dirname,\n    <span class="hljs-string">`../examples/<span class="hljs-subst">${imageCoverFileName}</span>`</span>,\n  );\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">assetsFolder</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`<span class="hljs-subst">${newArticleFolderPath}</span>/assets`</span>;\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">imageCoverPath</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`<span class="hljs-subst">${assetsFolder}</span>/<span class="hljs-subst">${imageCoverFileName}</span>`</span>;\n\n  <span class="hljs-keyword">return</span> {\n    newArticlePath,\n    imageCoverExamplePath,\n    imageCoverPath,\n    assetsFolder,\n    imageCoverFileName,\n  };\n};\n</code></pre>\n<p>I also created the <code>ArticlePaths</code> type:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ArticlePaths</span> = {\n  <span class="hljs-attr">newArticlePath</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">imageCoverExamplePath</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">imageCoverPath</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">assetsFolder</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">imageCoverFileName</span>: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<p>And I could use the function to get all the path data I needed:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> {\n  newArticlePath,\n  imageCoverExamplePath,\n  imageCoverPath,\n  assetsFolder,\n  imageCoverFileName,\n}: <span class="hljs-title class_">ArticlePaths</span> = <span class="hljs-title function_">buildPaths</span>(newArticleFolderPath);\n</code></pre>\n<p>The last part of the algorithm now! I wanted to quickly validate the created post. So what if I could open the created post in a browser tab? That would be amazing!</p>\n<p>So I did it:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">await</span> <span class="hljs-title function_">open</span>(newArticlePath);\n</code></pre>\n<p>Here I&#39;m using the <code>open</code> library to simulate the terminal open command.</p>\n<p>And that was it!</p>\n<h2 id="learnings">Learnings</h2>\n<p>This project was a lot of fun! I learned some cool things through this process. I want to list them here:</p>\n<ul>\n<li>As I&#39;m <a href="/series/typescript-learnings">learning Typescript</a>, I wanted to quickly validate the code I was writing. So I configured <code>nodemon</code> to compile and run the code on every file save. It is cool to make the development process so dynamic.</li>\n<li>I tried to use the new node <code>fs</code>&#39;s <code>promises</code>: <code>readFile</code>, <code>mkdir</code>, <code>writeFile</code>, and <code>copyFile</code>. It is on <code>Stability: 2</code>.</li>\n<li>I did a lot of <a href="/closure-currying-and-cool-abstractions">currying</a> for some function to make it reusable.</li>\n<li>Enums and <a href="/series/typescript-learnings/type-system">Types</a> are good ways to make the state consistent in Typescript, but also make a good representation and documentation of all the project&#39;s data. <a href="/thinking-in-data-contracts">Data contracts</a> is a really nice thing.</li>\n<li>The tooling mindset. This is one of the things I really love about programming. Build toolings to automate repetitive tasks and make life easier.</li>\n</ul>\n<p>I hope it was good reading! Keep learning and coding!</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="/thinking-in-data-contracts">Thinking in data contracts</a></li>\n<li><a href="/series/typescript-learnings">Typescript Learnings</a></li>\n<li><a href="/closure-currying-and-cool-abstractions">Closures, Currying, and Cool Abstractions</a></li>\n</ul>\n',
  },
  {
    title: 'React Hooks, Context API, and Pokemons',
    content:
      '<p>After 7 years of full stack development using Ruby, Python, and vanilla JavaScript, I&#39;m now working mostly with JavaScript, Typescript, React, and Redux. The JavaScript community is great.. and fast. Tons of things are created &quot;overnight&quot;, figuratively, but sometimes literally. And it is really difficult to keep up to date.</p>\n<blockquote>\n<p>Mental note: I always feel I&#39;m late at the JavaScript party. And I want to be there. Even though I don&#39;t really like parties.</p>\n</blockquote>\n<p>1 year working with React and Redux and I feel I need to learn new things like Hooks and the Context API to manage state. After reading some articles about it, I wanted to try these concepts, so I created a simple project as a laboratory to experiment with those things.</p>\n<p>Since I was a little boy, I&#39;m passionate about Pokemon. It was a fun time playing Game Boy and conquering all the Leagues. Now, as a developer, I want to play around with the <a href="https://pokeapi.co/">Pokemon API</a>.</p>\n<p>So basically I wanted to build a simple web page that I could share data among pieces of this page. I thought: what if I build a page with three boxes:</p>\n<ul>\n<li>A box with the list of all existent pokemons</li>\n<li>A box with the list of all captured pokemons</li>\n<li>A box with input to add new pokemons to the list</li>\n</ul>\n<p>And I can build behavior or actions to each box:</p>\n<ul>\n<li>For each pokemon in the first box, I can capture them and send to the second box</li>\n<li>For each pokemon in the second box, I can release them and send to the first box</li>\n<li>As a game god, I&#39;m able to create pokemons by filling the input and send them to the first box</li>\n</ul>\n<p>Ok, it is clear to me all the features we need to implement here. Lists &amp; Actions. Let&#39;s begin!</p>\n<h2 id="listing-pokemons">Listing Pokemons</h2>\n<p>The basic feature I wanted to build first was listing pokemons. So for an array of objects, I want to list and show the <code>name</code> attribute of each one. And that&#39;s it.</p>\n<p>I&#39;ll start with the first box: the existent Pokemons. At first, I thought, I don&#39;t need the Pokemon API, Let&#39;s just mock the list and see if it works. With <code>useState</code>, I can declare my component state and use it.</p>\n<p>We define it with a default value of a mock of Pokemons, just to test it.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> [pokemons] = <span class="hljs-title function_">useState</span>([\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bulbasaur&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Charmander&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Squirtle&#x27;</span> },\n]);\n</code></pre>\n<p>Here we a list of three Pokemon objects. The <code>useState</code> hook provides a pair of items: the current state and a function to let you update this created state.</p>\n<p>Now with the pokemons state, we can map it and render the name of each one.</p>\n<pre><code class="hljs language-javascript">{\n  pokemons.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">pokemon</span>) =&gt;</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{pokemon.name}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>);\n}\n</code></pre>\n<p>It is just a map returning each Pokemon&#39;s name in a paragraph tag.</p>\n<p>This is the whole component implemented:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">PokemonsList</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">const</span> [pokemons] = <span class="hljs-title function_">useState</span>([\n    { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bulbasaur&#x27;</span> },\n    { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Charmander&#x27;</span> },\n    { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Squirtle&#x27;</span> },\n  ]);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;pokemons-list&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Pokemons List<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n      {pokemons.map((pokemon) =&gt; (\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{</span>`${<span class="hljs-attr">pokemon.id</span>}<span class="hljs-attr">-</span>${<span class="hljs-attr">pokemon.name</span>}`}&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{pokemon.id}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{pokemon.name}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      ))}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">PokemonsList</span>;\n</code></pre>\n<p>Just a little tweak here:</p>\n<ul>\n<li>Added the <code>key</code> in a combination of the pokemon&#39;s <code>id</code> and <code>name</code></li>\n<li>And render a paragraph for the <code>id</code> attribute (I was just testing it. But we will remove it later)</li>\n</ul>\n<p>Great! Now we have the first list up and running.</p>\n<p>I want to make this same implementation but now for the captured pokemons. But for the captured pokemons, I want to make them as an empty list. Because when the &quot;game&quot; starts, I don&#39;t have any captured Pokemons, right? Right!</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> [pokemons] = <span class="hljs-title function_">useState</span>([]);\n</code></pre>\n<p>That&#39;s it, really simple!</p>\n<p>The whole component looks similar to the other:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">CapturedPokemons</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">const</span> [pokemons] = <span class="hljs-title function_">useState</span>([]);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;pokedex&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Captured Pokemons<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n      {pokemons.map((pokemon) =&gt; (\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{</span>`${<span class="hljs-attr">pokemon.id</span>}<span class="hljs-attr">-</span>${<span class="hljs-attr">pokemon.name</span>}`}&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{pokemon.id}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{pokemon.name}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      ))}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">CapturedPokemons</span>;\n</code></pre>\n<p>Here we map, but as the array is empty, it doesn&#39;t render anything.</p>\n<p>Now that I have the two main components, I can get them together in the <code>App</code> component:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./App.css&#x27;</span>;\n\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">PokemonsList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./PokemonsList&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Pokedex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Pokedex&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">PokemonsList</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Pokedex</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n);\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;\n</code></pre>\n<h2 id="capturing--releasing">Capturing &amp; Releasing</h2>\n<p>This is the second part of our app. We will capture and release Pokemons. So let&#39;s think of the expected behavior.</p>\n<p>For each Pokemon in the list of available Pokemons, I want to enable an action to capture them. The capture action will remove them from the list they were and add them to the list of captured Pokemons.</p>\n<p>The release action will have similar behavior. But instead of moving from the available list to the captured list, it will be the reverse. We will move them from the captured list to the available list.</p>\n<p>So both boxes need to share data to be able to add the Pokemon to the other list. How we do this as they are different components in the app? Let&#39;s talk about the React Context API.</p>\n<p>The Context API was designed to make global data for a defined tree of React components. As the data is global, we can share it among components in this defined tree. So let&#39;s use it to share our simple Pokemon data between the two boxes.</p>\n<blockquote>\n<p>Mental Note: &quot;Context is primarily used when some data needs to be accessible by many components at different nesting levels.&quot; - React Docs.</p>\n</blockquote>\n<p>Using the API, we simply create a new context like that:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { createContext } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">PokemonContext</span> = <span class="hljs-title function_">createContext</span>();\n</code></pre>\n<p>Now, with the <code>PokemonContext</code>, we can use its provider. It will work as a component wrapper of a tree of components. It provides global data to these components and enables them to subscribe to any changes related to this context. It looks like this:</p>\n<pre><code class="hljs language-javascript">&lt;<span class="hljs-title class_">PokemonContext</span>.<span class="hljs-property">Provider</span> value={<span class="hljs-comment">/* some value */</span>}&gt;\n</code></pre>\n<p>The <code>value</code> prop is just a value that this context provides the wrapped components. What should we provide to the available and the captured lists?</p>\n<ul>\n<li><code>pokemons</code>: to list in the available list</li>\n<li><code>capturedPokemons</code>: to list in the captured list</li>\n<li><code>setPokemons</code>: to be able to update the available list</li>\n<li><code>setCapturedPokemons</code>: to be able to update the captured list</li>\n</ul>\n<p>As I mentioned before in the <code>useState</code> part, this hook always provides a pair: the state and a function to update this state. This function handles and updates the context state. In other words, they are the <code>setPokemons</code> and <code>setCapturedPokemons</code>. How?</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> [pokemons, setPokemons] = <span class="hljs-title function_">useState</span>([\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bulbasaur&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Charmander&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Squirtle&#x27;</span> },\n]);\n</code></pre>\n<p>Now we have the <code>setPokemons</code>.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> [capturedPokemons, setCapturedPokemons] = <span class="hljs-title function_">useState</span>([]);\n</code></pre>\n<p>And now we also have the <code>setCapturedPokemons</code>.</p>\n<p>With all these values in hand, we can now pass them to the provider&#39;s <code>value</code> prop.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { createContext, useState } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">PokemonContext</span> = <span class="hljs-title function_">createContext</span>();\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">PokemonProvider</span> = (<span class="hljs-params">props</span>) =&gt; {\n  <span class="hljs-keyword">const</span> [pokemons, setPokemons] = <span class="hljs-title function_">useState</span>([\n    { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bulbasaur&#x27;</span> },\n    { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Charmander&#x27;</span> },\n    { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Squirtle&#x27;</span> },\n  ]);\n\n  <span class="hljs-keyword">const</span> [capturedPokemons, setCapturedPokemons] = <span class="hljs-title function_">useState</span>([]);\n\n  <span class="hljs-keyword">const</span> providerValue = {\n    pokemons,\n    setPokemons,\n    capturedPokemons,\n    setCapturedPokemons,\n  };\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PokemonContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">{providerValue}</span>&gt;</span>\n      {props.children}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">PokemonContext.Provider</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<p>I created a <code>PokemonProvider</code> to wrap all these data and APIs to create the context and return the context provider with the defined value.</p>\n<p>But how do we provide these data and APIs to the component? We need to do two main things:</p>\n<ul>\n<li>Wrap the components into this context provider</li>\n<li>Use the context in each component</li>\n</ul>\n<p>Let&#39;s wrap them first:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PokemonProvider</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">PokemonsList</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Pokedex</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">PokemonProvider</span>&gt;</span></span>\n);\n</code></pre>\n<p>And we use the context by using the <code>useContext</code> and passing the created <code>PokemonContext</code>. Like this:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { useContext } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">PokemonContext</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./PokemonContext&#x27;</span>;\n\n<span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">PokemonContext</span>); <span class="hljs-comment">// returns the context provider value we created</span>\n</code></pre>\n<p>For the available pokemons, we want to capture them, so it would be useful to have the <code>setCapturedPokemons</code> function API to update the captured pokemons. As the pokemon is captured, we need to remove it from the available list. <code>setPokemons</code> is also needed here. And to update each list, we need the current data. So basically we need everything from the context provider.</p>\n<p>We need to build a button with an action to capture the pokemon:</p>\n<ul>\n<li><code>&lt;button&gt;</code> tag with an <code>onClick</code> calling the <code>capture</code> function and passing the Pokemon</li>\n</ul>\n<pre><code class="hljs language-javascript">&lt;button onClick={<span class="hljs-title function_">capture</span>(pokemon)}&gt;+&lt;/button&gt;\n</code></pre>\n<ul>\n<li>The <code>capture</code> function will update the <code>pokemons</code> and the <code>capturedPokemons</code> lists</li>\n</ul>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">capture</span> = (<span class="hljs-params">pokemon</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {\n  <span class="hljs-comment">// update captured pokemons list</span>\n  <span class="hljs-comment">// update available pokemons list</span>\n};\n</code></pre>\n<p>To update the <code>capturedPokemons</code>, we can just call the <code>setCapturedPokemons</code> function with the current <code>capturedPokemons</code> and the pokemon to be captured.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title function_">setCapturedPokemons</span>([...capturedPokemons, pokemon]);\n</code></pre>\n<p>And to update the <code>pokemons</code> list, just filter the pokemon that will be captured.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title function_">setPokemons</span>(<span class="hljs-title function_">removePokemonFromList</span>(pokemon));\n</code></pre>\n<p><code>removePokemonFromList</code> is just a simple function to filter the pokemons by removing the captured pokemon.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">removePokemonFromList</span> = (<span class="hljs-params">removedPokemon</span>) =&gt;\n  pokemons.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">pokemon</span>) =&gt;</span> pokemon !== removedPokemon);\n</code></pre>\n<p>How does the component look like now?</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useContext } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">PokemonContext</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./PokemonContext&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">PokemonsList</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">const</span> { pokemons, setPokemons, capturedPokemons, setCapturedPokemons } =\n    <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">PokemonContext</span>);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">removePokemonFromList</span> = (<span class="hljs-params">removedPokemon</span>) =&gt;\n    pokemons.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">pokemon</span>) =&gt;</span> pokemon !== removedPokemon);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">capture</span> = (<span class="hljs-params">pokemon</span>) =&gt; <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">setCapturedPokemons</span>([...capturedPokemons, pokemon]);\n    <span class="hljs-title function_">setPokemons</span>(<span class="hljs-title function_">removePokemonFromList</span>(pokemon));\n  };\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;pokemons-list&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Pokemons List<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n      {pokemons.map((pokemon) =&gt; (\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{</span>`${<span class="hljs-attr">pokemon.id</span>}<span class="hljs-attr">-</span>${<span class="hljs-attr">pokemon.name</span>}`}&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{pokemon.name}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{capture(pokemon)}</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      ))}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">PokemonsList</span>;\n</code></pre>\n<p>It will look very similar for the captured pokemons component. Instead of <code>capture</code>, it will be a <code>release</code> function:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useContext } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">PokemonContext</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./PokemonContext&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">CapturedPokemons</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">const</span> { pokemons, setPokemons, capturedPokemons, setCapturedPokemons } =\n    <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">PokemonContext</span>);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">releasePokemon</span> = (<span class="hljs-params">releasedPokemon</span>) =&gt;\n    capturedPokemons.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">pokemon</span>) =&gt;</span> pokemon !== releasedPokemon);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">release</span> = (<span class="hljs-params">pokemon</span>) =&gt; <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">setCapturedPokemons</span>(<span class="hljs-title function_">releasePokemon</span>(pokemon));\n    <span class="hljs-title function_">setPokemons</span>([...pokemons, pokemon]);\n  };\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;captured-pokemons&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>CapturedPokemons<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n      {capturedPokemons.map((pokemon) =&gt; (\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{</span>`${<span class="hljs-attr">pokemon.id</span>}<span class="hljs-attr">-</span>${<span class="hljs-attr">pokemon.name</span>}`}&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{pokemon.name}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{release(pokemon)}</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      ))}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">CapturedPokemons</span>;\n</code></pre>\n<h2 id="reducing-the-complexity">Reducing the complexity</h2>\n<p>Now we use the <code>useState</code>, the Context API, context provider, the <code>useContext</code>. And more importantly, we can share data between Pokemon boxes.</p>\n<p>Another way to manage the state is by using <code>useReducer</code> as an alternative for <code>useState</code>.</p>\n<p>The reducer lifecycle works like this: the <code>useReducer</code> provides a <code>dispatch</code> function. With this function, we can dispatch an <code>action</code> inside a component. The <code>reducer</code> receives the action and the state. It understands the type of action, handles the data, and return a new state. Now, the new state can be used in the component.</p>\n<p>As an exercise and to have a better understanding of this hook, I tried to replace the <code>useState</code> with it.</p>\n<p>The <code>useState</code> was inside the <code>PokemonProvider</code>. We can redefine the initial state for the available and the captured pokemons in this data structure:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> defaultState = {\n  <span class="hljs-attr">pokemons</span>: [\n    { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bulbasaur&#x27;</span> },\n    { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Charmander&#x27;</span> },\n    { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Squirtle&#x27;</span> },\n  ],\n  <span class="hljs-attr">capturedPokemons</span>: [],\n};\n</code></pre>\n<p>And pass this value to the <code>useReducer</code>:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(pokemonReducer, defaultState);\n</code></pre>\n<p>The <code>useReducer</code> receives two parameters: the reducer and the initial state. Let&#39;s build the <code>pokemonReducer</code> now.</p>\n<p>The reducer receives the current state and the action that was dispatched.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">pokemonReducer</span> = (<span class="hljs-params">state, action</span>) =&gt; <span class="hljs-comment">// returns the new state based on the action type</span>\n</code></pre>\n<p>Here we get the action type and return a new state. The action is an object. It looks like this:</p>\n<pre><code class="hljs language-javascript">{\n  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;AN_ACTION_TYPE&#x27;</span>;\n}\n</code></pre>\n<p>But could also be bigger:</p>\n<pre><code class="hljs language-javascript">{\n  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;AN_ACTION_TYPE&#x27;</span>,\n  <span class="hljs-attr">pokemon</span>: {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Pikachu&#x27;</span>\n  }\n}\n</code></pre>\n<p>This is the case, we pass a Pokemon to the action object. Let&#39;s pause for a minute and think about what we want to do inside the reducer.</p>\n<p>Here, we usually update data and handle actions. Actions are dispatched. So actions are behavior. And the behavior from our app are: capture and release! These are the action we need to handle here.</p>\n<p>This is what our reducer will look like:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">pokemonReducer</span> = (<span class="hljs-params">state, action</span>) =&gt; {\n  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;CAPTURE&#x27;</span>:\n    <span class="hljs-comment">// handle capture and return new state</span>\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;RELEASE&#x27;</span>:\n    <span class="hljs-comment">// handle release and return new state</span>\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> state;\n  }\n};\n</code></pre>\n<p>If our action has a type <code>CAPTURE</code>, we handle it in one way. If our action type is the <code>RELEASE</code>, we handle it in another way. If the action type doesn&#39;t match any of these types, just return the current state.</p>\n<p>When we capture the pokemon, we need to update both lists: remove the pokemon from the available list and add it to the captured list. This state is what we need to return from the reducer.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getPokemonsList</span> = (<span class="hljs-params">pokemons, capturedPokemon</span>) =&gt;\n  pokemons.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">pokemon</span>) =&gt;</span> pokemon !== capturedPokemon);\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">capturePokemon</span> = (<span class="hljs-params">pokemon, state</span>) =&gt; ({\n  <span class="hljs-attr">pokemons</span>: <span class="hljs-title function_">getPokemonsList</span>(state.<span class="hljs-property">pokemons</span>, pokemon),\n  <span class="hljs-attr">capturedPokemons</span>: [...state.<span class="hljs-property">capturedPokemons</span>, pokemon],\n});\n</code></pre>\n<p>The <code>capturePokemon</code> function just returns the updated lists. The <code>getPokemonsList</code> removes the captured pokemon from the available list.</p>\n<p>And we use this new function in the reducer:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">pokemonReducer</span> = (<span class="hljs-params">state, action</span>) =&gt; {\n  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;CAPTURE&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">capturePokemon</span>(action.<span class="hljs-property">pokemon</span>, state);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;RELEASE&#x27;</span>:\n    <span class="hljs-comment">// handle release and return new state</span>\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> state;\n  }\n};\n</code></pre>\n<p>Now the <code>release</code> function!</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getCapturedPokemons</span> = (<span class="hljs-params">capturedPokemons, releasedPokemon</span>) =&gt;\n  capturedPokemons.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">pokemon</span>) =&gt;</span> pokemon !== releasedPokemon);\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">releasePokemon</span> = (<span class="hljs-params">releasedPokemon, state</span>) =&gt; ({\n  <span class="hljs-attr">pokemons</span>: [...state.<span class="hljs-property">pokemons</span>, releasedPokemon],\n  <span class="hljs-attr">capturedPokemons</span>: <span class="hljs-title function_">getCapturedPokemons</span>(\n    state.<span class="hljs-property">capturedPokemons</span>,\n    releasedPokemon,\n  ),\n});\n</code></pre>\n<p>The <code>getCapturedPokemons</code> remove the released pokemon from the captured list. The <code>releasePokemon</code> function returns the updated lists.</p>\n<p>Our reducer looks like this now:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">pokemonReducer</span> = (<span class="hljs-params">state, action</span>) =&gt; {\n  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;CAPTURE&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">capturePokemon</span>(action.<span class="hljs-property">pokemon</span>, state);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;RELEASE&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">releasePokemon</span>(action.<span class="hljs-property">pokemon</span>, state);\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> state;\n  }\n};\n</code></pre>\n<p>Just one minor refactor: action types! These are strings and we can extract them into a constant and provide for the dispatcher.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CAPTURE</span> = <span class="hljs-string">&#x27;CAPTURE&#x27;</span>;\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">RELEASE</span> = <span class="hljs-string">&#x27;RELEASE&#x27;</span>;\n</code></pre>\n<p>And the reducer:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">pokemonReducer</span> = (<span class="hljs-params">state, action</span>) =&gt; {\n  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {\n    <span class="hljs-keyword">case</span> <span class="hljs-attr">CAPTURE</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">capturePokemon</span>(action.<span class="hljs-property">pokemon</span>, state);\n    <span class="hljs-keyword">case</span> <span class="hljs-attr">RELEASE</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">releasePokemon</span>(action.<span class="hljs-property">pokemon</span>, state);\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> state;\n  }\n};\n</code></pre>\n<p>The entire reducer file looks like this:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CAPTURE</span> = <span class="hljs-string">&#x27;CAPTURE&#x27;</span>;\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">RELEASE</span> = <span class="hljs-string">&#x27;RELEASE&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">getCapturedPokemons</span> = (<span class="hljs-params">capturedPokemons, releasedPokemon</span>) =&gt;\n  capturedPokemons.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">pokemon</span>) =&gt;</span> pokemon !== releasedPokemon);\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">releasePokemon</span> = (<span class="hljs-params">releasedPokemon, state</span>) =&gt; ({\n  <span class="hljs-attr">pokemons</span>: [...state.<span class="hljs-property">pokemons</span>, releasedPokemon],\n  <span class="hljs-attr">capturedPokemons</span>: <span class="hljs-title function_">getCapturedPokemons</span>(\n    state.<span class="hljs-property">capturedPokemons</span>,\n    releasedPokemon,\n  ),\n});\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">getPokemonsList</span> = (<span class="hljs-params">pokemons, capturedPokemon</span>) =&gt;\n  pokemons.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">pokemon</span>) =&gt;</span> pokemon !== capturedPokemon);\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">capturePokemon</span> = (<span class="hljs-params">pokemon, state</span>) =&gt; ({\n  <span class="hljs-attr">pokemons</span>: <span class="hljs-title function_">getPokemonsList</span>(state.<span class="hljs-property">pokemons</span>, pokemon),\n  <span class="hljs-attr">capturedPokemons</span>: [...state.<span class="hljs-property">capturedPokemons</span>, pokemon],\n});\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">pokemonReducer</span> = (<span class="hljs-params">state, action</span>) =&gt; {\n  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {\n    <span class="hljs-keyword">case</span> <span class="hljs-attr">CAPTURE</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">capturePokemon</span>(action.<span class="hljs-property">pokemon</span>, state);\n    <span class="hljs-keyword">case</span> <span class="hljs-attr">RELEASE</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">releasePokemon</span>(action.<span class="hljs-property">pokemon</span>, state);\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> state;\n  }\n};\n</code></pre>\n<p>As the reducer is now implemented, we can import it into our provider and use it in the <code>useReducer</code> hook.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(pokemonReducer, defaultState);\n</code></pre>\n<p>As we are inside the <code>PokemonProvider</code>, we want to provide some value to the consuming components: the capture and release actions.</p>\n<p>These functions just need to dispatch the correct action type and pass the pokemon to the reducer.</p>\n<ul>\n<li>The <code>capture</code> function: it receives the pokemon and returns a new function that dispatches an action with the type <code>CAPTURE</code> and the captured pokemon.</li>\n</ul>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">capture</span> = (<span class="hljs-params">pokemon</span>) =&gt; <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">dispatch</span>({ <span class="hljs-attr">type</span>: <span class="hljs-variable constant_">CAPTURE</span>, pokemon });\n};\n</code></pre>\n<ul>\n<li>The <code>release</code> function: it receives the pokemon and returns a new function that dispatches an action with the type <code>RELEASE</code> and the release pokemon.</li>\n</ul>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">release</span> = (<span class="hljs-params">pokemon</span>) =&gt; <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">dispatch</span>({ <span class="hljs-attr">type</span>: <span class="hljs-variable constant_">RELEASE</span>, pokemon });\n};\n</code></pre>\n<p>Now with the state and the actions implemented, we can provide these values to the consuming components. Just update the provider value prop.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> { pokemons, capturedPokemons } = state;\n\n<span class="hljs-keyword">const</span> providerValue = {\n  pokemons,\n  capturedPokemons,\n  release,\n  capture,\n};\n\n<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PokemonContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">{providerValue}</span>&gt;</span>\n  {props.children}\n<span class="hljs-tag">&lt;/<span class="hljs-name">PokemonContext.Provider</span>&gt;</span></span>;\n</code></pre>\n<p>Great! Now back to the component. Let&#39;s use these new actions. All the capture and release logics are encapsulated in our provider and reducer. Our component is pretty clean now. The <code>useContext</code> will look like this:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> { pokemons, capture } = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">PokemonContext</span>);\n</code></pre>\n<p>And the whole component:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useContext } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">PokemonContext</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./PokemonContext&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">PokemonsList</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">const</span> { pokemons, capture } = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">PokemonContext</span>);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;pokemons-list&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Pokemons List<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n      {pokemons.map((pokemon) =&gt; (\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{</span>`${<span class="hljs-attr">pokemon.id</span>}<span class="hljs-attr">-</span>${<span class="hljs-attr">pokemon.name</span>}`}&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{pokemon.name}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{capture(pokemon)}</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      ))}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">PokemonsList</span>;\n</code></pre>\n<p>For the captured pokemons component, it will look the very similar. The <code>useContext</code>:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> { capturedPokemons, release } = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">PokemonContext</span>);\n</code></pre>\n<p>And the whole component:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useContext } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">PokemonContext</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./PokemonContext&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Pokedex</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">const</span> { capturedPokemons, release } = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">PokemonContext</span>);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;pokedex&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Pokedex<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n      {capturedPokemons.map((pokemon) =&gt; (\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{</span>`${<span class="hljs-attr">pokemon.id</span>}<span class="hljs-attr">-</span>${<span class="hljs-attr">pokemon.name</span>}`}&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{pokemon.name}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{release(pokemon)}</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      ))}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Pokedex</span>;\n</code></pre>\n<p>No logic. Just UI. Very clean.</p>\n<h2 id="pokemon-god-the-creator">Pokemon God: The Creator</h2>\n<p>Now that we have the communication between the two lists, I want to build a third box. This will how we create new Pokemons. But it is just a simple input and submit button. When we add a pokemon name into the input and press the button, it will dispatch an action to add this pokemon to the available list.</p>\n<p>As we need to access the available list to update it, we need to share the state. So our component will be wrapped by our <code>PokemonProvider</code> together with the other components.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PokemonProvider</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">PokemonsList</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Pokedex</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">PokemonForm</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">PokemonProvider</span>&gt;</span></span>\n);\n</code></pre>\n<p>Let&#39;s build the <code>PokemonForm</code> component now. The form is pretty straightforward:</p>\n<pre><code class="hljs language-javascript">&lt;form onSubmit={handleFormSubmit}&gt;\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;pokemon name&quot;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">{handleNameOnChange}</span> /&gt;</span></span>\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Add&quot;</span> /&gt;</span></span>\n&lt;/form&gt;\n</code></pre>\n<p>We have a form, an input, and a button. To sum up, we also have a function to handle the form submit and another function to handle the input on change.</p>\n<p>The <code>handleNameOnChange</code> will be called every time the user type or remove a character. I wanted to build a local state, a representation of the pokemon name. With this state, we can use it to dispatch when submitting the form.</p>\n<p>As we want to try hooks, we will use <code>useState</code> to handle this local state.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> [pokemonName, setPokemonName] = <span class="hljs-title function_">useState</span>();\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">handleNameOnChange</span> = (<span class="hljs-params">e</span>) =&gt; <span class="hljs-title function_">setPokemonName</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);\n</code></pre>\n<p>We use the <code>setPokemonName</code> to update the <code>pokemonName</code> every time the user interacts with the input.</p>\n<p>And the <code>handleFormSubmit</code> is a function to dispatch the new pokemon to be added to the available list.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleFormSubmit</span> = (<span class="hljs-params">e</span>) =&gt; {\n  e.<span class="hljs-title function_">preventDefault</span>();\n  <span class="hljs-title function_">addPokemon</span>({\n    <span class="hljs-attr">id</span>: <span class="hljs-title function_">generateID</span>(),\n    <span class="hljs-attr">name</span>: pokemonName,\n  });\n};\n</code></pre>\n<p>The <code>addPokemon</code> is the API we will build later. It receives the pokemon: id and name. The name is the local state we defined: <code>pokemonName</code>.</p>\n<p>The <code>generateID</code> is just a simple function I built to generate a random number. It looks like this:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">generateID</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">const</span> a = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>, <span class="hljs-number">15</span>);\n\n  <span class="hljs-keyword">const</span> b = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>, <span class="hljs-number">15</span>);\n\n  <span class="hljs-keyword">return</span> a + b;\n};\n</code></pre>\n<p>The <code>addPokemon</code> will be provided by the context api we build. That way, this function can receive the new Pokemon and add to the available list. It looks like this:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">addPokemon</span> = (<span class="hljs-params">pokemon</span>) =&gt; {\n  <span class="hljs-title function_">dispatch</span>({ <span class="hljs-attr">type</span>: <span class="hljs-variable constant_">ADD_POKEMON</span>, pokemon });\n};\n</code></pre>\n<p>It will dispatch this action type <code>ADD_POKEMON</code> and also pass the Pokemon.</p>\n<p>In our reducer, we add the case for the <code>ADD_POKEMON</code> and handle the state to add the new pokemon to state.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">pokemonReducer</span> = (<span class="hljs-params">state, action</span>) =&gt; {\n  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {\n    <span class="hljs-keyword">case</span> <span class="hljs-attr">CAPTURE</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">capturePokemon</span>(action.<span class="hljs-property">pokemon</span>, state);\n    <span class="hljs-keyword">case</span> <span class="hljs-attr">RELEASE</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">releasePokemon</span>(action.<span class="hljs-property">pokemon</span>, state);\n    <span class="hljs-keyword">case</span> <span class="hljs-attr">ADD_POKEMON</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">addPokemon</span>(action.<span class="hljs-property">pokemon</span>, state);\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> state;\n  }\n};\n</code></pre>\n<p>And the <code>addPokemon</code> function will be:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">addPokemon</span> = (<span class="hljs-params">pokemon, state</span>) =&gt; ({\n  <span class="hljs-attr">pokemons</span>: [...state.<span class="hljs-property">pokemons</span>, pokemon],\n  <span class="hljs-attr">capturedPokemons</span>: state.<span class="hljs-property">capturedPokemons</span>,\n});\n</code></pre>\n<p>Another approach is to destructure the state and change only the pokemons attribute. Like this:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">addPokemon</span> = (<span class="hljs-params">pokemon, state</span>) =&gt; ({\n  ...state,\n  <span class="hljs-attr">pokemons</span>: [...state.<span class="hljs-property">pokemons</span>, pokemon],\n});\n</code></pre>\n<p>Back to our component, we just need to make the <code>useContext</code> provides the <code>addPokemon</code> dispatch API based on the <code>PokemonContext</code>:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> { addPokemon } = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">PokemonContext</span>);\n</code></pre>\n<p>And the whole component looks like this:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useContext, useState } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">PokemonContext</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./PokemonContext&#x27;</span>;\n<span class="hljs-keyword">import</span> { generateID } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./utils&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">PokemonForm</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">const</span> [pokemonName, setPokemonName] = <span class="hljs-title function_">useState</span>();\n  <span class="hljs-keyword">const</span> { addPokemon } = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">PokemonContext</span>);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleNameOnChange</span> = (<span class="hljs-params">e</span>) =&gt; <span class="hljs-title function_">setPokemonName</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleFormSubmit</span> = (<span class="hljs-params">e</span>) =&gt; {\n    e.<span class="hljs-title function_">preventDefault</span>();\n    <span class="hljs-title function_">addPokemon</span>({\n      <span class="hljs-attr">id</span>: <span class="hljs-title function_">generateID</span>(),\n      <span class="hljs-attr">name</span>: pokemonName,\n    });\n  };\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">{handleFormSubmit}</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">input</span>\n        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>\n        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;pokemon name&quot;</span>\n        <span class="hljs-attr">onChange</span>=<span class="hljs-string">{handleNameOnChange}</span>\n      /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Add&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span>\n  );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">PokemonForm</span>;\n</code></pre>\n<p>Now we have the available pokemons list, the captured pokemons list, and the third box to create new pokemons.</p>\n<h2 id="pokemon-effects">Pokemon Effects</h2>\n<p>Now that we have our app almost complete, we can replace the mocked pokemons with a list of pokemons from the PokeAPI.</p>\n<p>So, inside the function component, we can&#39;t do side effects like logging or subscriptions. This is why the <code>useEffect</code> hook exists. With this hook, we can fetch pokemons (a side-effect), and add to the list.</p>\n<p>Fetching the PokeAPI will look like this:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;https://pokeapi.co/api/v2/pokemon&#x27;</span>;\n<span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url);\n<span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();\ndata.<span class="hljs-property">results</span>; <span class="hljs-comment">// [{ name: &#x27;bulbasaur&#x27;, url: &#x27;https://pokeapi.co/api/v2/pokemon/1/&#x27; }, ...]</span>\n</code></pre>\n<p>The <code>results</code> attribute is the list of fetched pokemons. With this data, we will be able to add to the pokemons list.</p>\n<p>Let&#39;s get the request code inside the <code>useEffect</code>:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">const</span> fetchPokemons = <span class="hljs-keyword">async</span> () =&gt; {\n    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url);\n    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();\n    data.<span class="hljs-property">results</span>; <span class="hljs-comment">// update the pokemons list with this data</span>\n  };\n\n  <span class="hljs-title function_">fetchPokemons</span>();\n}, []);\n</code></pre>\n<p>To be able to the <code>async-await</code>, we need to create a function and call it later. The empty array is a parameter to make the <code>useEffect</code> knows the dependencies it will look up to re-run.</p>\n<p>The default behavior is to run the effect of every completed render. If we add a dependency to this list, the <code>useEffect</code> will only re-run when the dependency changes, instead of running in all completed renders.</p>\n<p>Now, that we fetched the pokemons, we need to update the list. It&#39;s an action, a new behavior. We need to use the dispatch again, implement a new type in the reducer, and update the state in the context provider.</p>\n<p>In the <code>PokemonContext</code>, we create the <code>addPokemons</code> function to provide an API to the consuming component uses it.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">addPokemons</span> = (<span class="hljs-params">pokemons</span>) =&gt; {\n  <span class="hljs-title function_">dispatch</span>({ <span class="hljs-attr">type</span>: <span class="hljs-variable constant_">ADD_POKEMONS</span>, pokemons });\n};\n</code></pre>\n<p>It receives pokemons and dispatches a new action: <code>ADD_POKEMONS</code>.</p>\n<p>At the reducer, we add this new type, expect the pokemons, and call a function to add the pokemons to the available list state.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">pokemonReducer</span> = (<span class="hljs-params">state, action</span>) =&gt; {\n  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {\n    <span class="hljs-keyword">case</span> <span class="hljs-attr">CAPTURE</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">capturePokemon</span>(action.<span class="hljs-property">pokemon</span>, state);\n    <span class="hljs-keyword">case</span> <span class="hljs-attr">RELEASE</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">releasePokemon</span>(action.<span class="hljs-property">pokemon</span>, state);\n    <span class="hljs-keyword">case</span> <span class="hljs-attr">ADD_POKEMON</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">addPokemon</span>(action.<span class="hljs-property">pokemon</span>, state);\n    <span class="hljs-keyword">case</span> <span class="hljs-attr">ADD_POKEMONS</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-title function_">addPokemons</span>(action.<span class="hljs-property">pokemons</span>, state);\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> state;\n  }\n};\n</code></pre>\n<p>The <code>addPokemons</code> function just add the pokemons to the list:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">addPokemons</span> = (<span class="hljs-params">pokemons, state</span>) =&gt; ({\n  <span class="hljs-attr">pokemons</span>: pokemons,\n  <span class="hljs-attr">capturedPokemons</span>: state.<span class="hljs-property">capturedPokemons</span>,\n});\n</code></pre>\n<p>We can refactor this by doing a state destructuring and the object property value shorthand:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">addPokemons</span> = (<span class="hljs-params">pokemons, state</span>) =&gt; ({\n  ...state,\n  pokemons,\n});\n</code></pre>\n<p>As we provide this function API to the consuming component now, we can use the <code>useContext</code> to get it.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> { addPokemons } = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">PokemonContext</span>);\n</code></pre>\n<p>The whole component looks like this:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useContext, useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">PokemonContext</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./PokemonContext&#x27;</span>;\n\n<span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;https://pokeapi.co/api/v2/pokemon&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">PokemonsList</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">const</span> { state, capture, addPokemons } = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">PokemonContext</span>);\n\n  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> fetchPokemons = <span class="hljs-keyword">async</span> () =&gt; {\n      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url);\n      <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();\n      <span class="hljs-title function_">addPokemons</span>(data.<span class="hljs-property">results</span>);\n    };\n\n    <span class="hljs-title function_">fetchPokemons</span>();\n  }, [addPokemons]);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;pokemons-list&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Pokemons List<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n      {state.pokemons.map((pokemon) =&gt; (\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{pokemon.name}</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{pokemon.name}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{capture(pokemon)}</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      ))}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">PokemonsList</span>;\n</code></pre>\n<h2 id="wrapping-up">Wrapping up</h2>\n<p>This was my attempt to share my learnings and experience while trying hooks in a mini side-project. We learned how to handle local state with <code>useState</code>, building a global state with the <code>Context API</code>, how to rewrite and replace the <code>useState</code> with <code>useReducer</code>, and doing side-effects within the <code>useEffect</code>.</p>\n<blockquote>\n<p>Disclaimer: it was just an experimental project. Just for learning purposes. I don&#39;t have the answer about Hooks&#39;s good practices or how to make it scalable in big projects.</p>\n</blockquote>\n<p>I hope it was good reading! Keep learning and coding!</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://reactjs.org/docs/context.html">React Docs: Context</a></li>\n<li><a href="https://reactjs.org/docs/hooks-reference.html">React Docs: Hooks</a></li>\n<li><a href="https://github.com/imteekay/pokehooks-labs">Pokemon Hooks side-project: source code</a></li>\n<li><a href="https://BeginnerJavaScript.com/friend/LEANDRO">Beginner JavaScript Course</a></li>\n<li><a href="https://ReactForBeginners.com/friend/LEANDRO">React for Beginners Course</a></li>\n<li><a href="https://AdvancedReact.com/friend/LEANDRO">Advanced React Course</a></li>\n<li><a href="https://ES6.io/friend/LEANDRO">ES6 Course</a></li>\n<li><a href="https://mbsy.co/lFtbC">JavaScript Course by OneMonth</a></li>\n<li><a href="https://www.educative.io/courses/the-road-to-learn-react?aff=x8bV">The Road to learn React</a></li>\n<li><a href="https://www.educative.io/courses/javascript-fundamentals-before-learning-react?aff=x8bV">JavaScript Fundamentals Before Learning React</a></li>\n<li><a href="https://www.educative.io/courses/reintroducing-react-v16-beyond?aff=x8bV">Reintroducing React: V16 and Beyond</a></li>\n<li><a href="https://www.educative.io/courses/advanced-react-patterns-with-hooks?aff=x8bV">Advanced React Patterns With Hooks</a></li>\n<li><a href="https://www.educative.io/courses/practical-redux?aff=x8bV">Practical Redux</a></li>\n<li><a href="https://alterclass.io/?ref=5ec57f513c1321001703dcd2">Learn React by building an App</a></li>\n</ul>\n',
  },
  {
    title: 'react-query: complex dependent queries',
    content:
      '<p>A few months ago I wrote a blog post about my latest project working on <a href="/dx-and-software-maintainability-in-frontend-engineering">developer experience and software maintainability in frontend engineering</a>. I started exploring many problems and opportunities in our current frontend application and one of my focuses was how we currently build the frontend and improve the foundation. Things like error handling, data fetching, state management, web performance, and so on.</p>\n<p>Among all these topics, I started <a href="/data-fetching-in-react-with-react-query">exploring data fetching solutions</a> and got to build PoCs (Proofs-of-Concept) for react-query to test various use cases in our application. Together with a colleague, we wrote an ADR (Architecture Design Record) to spread the adoption idea and how it would change our current architecture (our apps heavily use Redux for client state management and server cache).</p>\n<p>After the adoption, we are now in a phase that different use cases are showing up. The idea is to help architect solutions for these different challenges and write down documents to guide the entire organization.</p>\n<h2 id="a-simple-dependent-query">A simple Dependent Query</h2>\n<p>react-query has a simple declarative way to handle dependent queries: a parameter called <code>enabled</code>. The react-query doc shows an example:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-comment">// Get the user</span>\n<span class="hljs-keyword">const</span> { <span class="hljs-attr">data</span>: user } = <span class="hljs-title function_">useQuery</span>([<span class="hljs-string">&#x27;user&#x27;</span>, email], getUserByEmail);\n<span class="hljs-keyword">const</span> userId = user?.<span class="hljs-property">id</span>;\n\n<span class="hljs-comment">// Then get the user&#x27;s projects</span>\n<span class="hljs-keyword">const</span> { <span class="hljs-attr">data</span>: projects } = <span class="hljs-title function_">useQuery</span>([<span class="hljs-string">&#x27;projects&#x27;</span>, userId], getProjectsByUser, {\n  <span class="hljs-comment">// The query will not execute until the userId exists</span>\n  <span class="hljs-attr">enabled</span>: !!userId,\n});\n</code></pre>\n<p>The first query requests the user based on the email. And the query that requests the projects depends on the user id, got from the previous request. The query will only request if the <code>userId</code> exists.</p>\n<p>We can use these two hooks in the same component and make the later triggers only if the first succeeds and return the user data to be used later on.</p>\n<h2 id="a-more-complex-dependent-query">A more complex Dependent Query</h2>\n<p>The Landlord Landing Page has a complex form and it requires dependent queries for its requests. It looks like this:</p>\n<img src="/react-query-complex-dependent-queries/diagram.png">\n\n<p>When the user fills the CEP/Zipcode, it requests the CEP data in the BFF (Backend For Frontend) service to get the address-related data and use it to request the GooglePlace API.</p>\n<p>The GooglePlace API requests more data related to the address, specifically the latitude and longitude to query the region&#39;s data in the BFF&#39;s API.</p>\n<p>The form fields component declares all these three queries:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> { data } = <span class="hljs-title function_">useCEP</span>(cep);\n<span class="hljs-keyword">const</span> { <span class="hljs-attr">data</span>: googleData } = <span class="hljs-title function_">useGooglePlaceAPI</span>(data);\n\n<span class="hljs-title function_">useRegion</span>({\n  <span class="hljs-attr">lat</span>: googleData?.<span class="hljs-property">latitude</span>,\n  <span class="hljs-attr">lng</span>: googleData?.<span class="hljs-property">longitude</span>,\n});\n</code></pre>\n<p>We first query the CEP data and pass it to the <code>useGooglePlaceAPI</code> hook and there you can enable or disable the google place API query:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">requestGoogleAPI</span> =\n  (<span class="hljs-params">completeAddress, { language, GOOGLE_LIBRARIES }</span>) =&gt;\n  <span class="hljs-keyword">async</span> () =&gt; {\n    <span class="hljs-keyword">const</span> googleAPI = <span class="hljs-keyword">await</span> <span class="hljs-title function_">loadGoogleApi</span>(\n      <span class="hljs-variable constant_">GOOGLE_API_KEY</span>,\n      language,\n      <span class="hljs-variable constant_">GOOGLE_LIBRARIES</span>,\n    );\n\n    <span class="hljs-keyword">return</span> <span class="hljs-title function_">parseAddress</span>(<span class="hljs-keyword">await</span> googleAPI.<span class="hljs-title function_">getPlaceFromAddress</span>(completeAddress));\n  };\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">isGoogleQueryEnabled</span> = (<span class="hljs-params">completeAddress = <span class="hljs-string">&#x27;&#x27;</span></span>) =&gt;\n  completeAddress.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useGooglePlaceAPI</span> = (<span class="hljs-params">\n  data = { completeAddress: <span class="hljs-string">&#x27;&#x27;</span> },\n  { language, googleLibraries: GOOGLE_LIBRARIES } = defaultGoogleAPIConfig,\n</span>) =&gt;\n  <span class="hljs-title function_">useQuery</span>(\n    [<span class="hljs-variable constant_">QUERY_KEY</span>, <span class="hljs-variable constant_">PLACE_KEY</span>, data.<span class="hljs-property">completeAddress</span>],\n    <span class="hljs-title function_">requestGoogleAPI</span>(data.<span class="hljs-property">completeAddress</span>, { language, <span class="hljs-variable constant_">GOOGLE_LIBRARIES</span> }),\n    {\n      <span class="hljs-attr">enabled</span>: <span class="hljs-title function_">isGoogleQueryEnabled</span>(data.<span class="hljs-property">completeAddress</span>),\n    },\n  );\n</code></pre>\n<p>The google place API request only triggers if it has the <code>completeAddress</code>.</p>\n<p>After getting the latitude and longitude, we can request the region API:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchRegion</span> = (<span class="hljs-params">lat, lng</span>) =&gt; <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">getRegion</span>(lat, lng);\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">isRegionFetchEnabled</span> = (<span class="hljs-params">lat, lng</span>) =&gt;\n  lat !== <span class="hljs-literal">undefined</span> &amp;&amp; lng !== <span class="hljs-literal">undefined</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useRegion</span> = (<span class="hljs-params">{ lat, lng }</span>) =&gt;\n  <span class="hljs-title function_">useQuery</span>([<span class="hljs-variable constant_">REGION_KEY</span>, lat, lng], <span class="hljs-title function_">fetchRegion</span>(lat, lng), {\n    <span class="hljs-attr">enabled</span>: <span class="hljs-title function_">isRegionFetchEnabled</span>(lat, lng),\n  });\n</code></pre>\n<p>It works very similarly to the previous hook. To trigger the <code>fetchRegion</code> request, it needs to have the <code>lat</code> and <code>lng</code> parameters. We verify them to enable the query.</p>\n<h2 id="final-words">Final words</h2>\n<p>react-query solves data fetching in a very simple way with a nice API. It makes complex topics live revalidation, server cache, and dependent queries easier to implement.</p>\n<p>It has been the obvious solution for me when it comes to this specific data fetching challenge.</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://react-query.tanstack.com/guides/dependent-queries">Doc: Dependent Queries</a></li>\n<li><a href="/dx-and-software-maintainability-in-frontend-engineering">DX &amp; Software Maintainability in Frontend Engineering</a></li>\n<li><a href="/data-fetching-in-react-with-react-query">Data Fetching in React with react-query</a></li>\n</ul>\n',
  },
  {
    title: 'Slow Living',
    content:
      '<blockquote>\n<p>&quot;Now I&#39;m shaking, drinking all this coffee. These last few weeks have been exhausting. I&#39;m lost in my imagination.&quot;</p>\n</blockquote>\n<p>In these 8 years I&#39;ve been doing software engineering, sometimes we had to experience a rush to finish some projects, mostly at the end of a quarter or the end of the year.</p>\n<p>These are not good experiences at all and I always get myself reflecting on these moments. What could we have done better? Is it the planning, the process, the strategy, or maybe the team?</p>\n<p>It&#39;s always good to reflect on these topics to not repeat it as a team or as a company. But I myself started to think that this is not the kind of life I plan to have. Not for now. Not for my future.</p>\n<p>Wake up, get a cup of coffee, not enjoying the morning, the breakfast, and be so mentally accelerated. No good. At least for me.</p>\n<p>I want to be able to be mentally healthy, do things properly, be present, enjoy moments. I don&#39;t want to be a productivity machine. The 20 years old TK would love to be as much productive as possible. But the current TK doesn&#39;t really enjoy the rush and doing things without quality. I don&#39;t need to live like playing Tetris, where I would fill every time in my calendar with a thing to do, just for the sake of being productive.</p>\n<p>I want to be productive, achieve my goals, but I also want to enjoy all the processes behind it. Making it sustainable for the long run is something I carefully think about.</p>\n<p>So I started learning about <code>Slow Living</code> and made a list of things I&#39;m applying in my daily life. It&#39;s nothing new or out of this world. It&#39;s pretty simple actually. Just applying some concepts on a daily basis is helping me reflect on my lifestyle, my actions, my habits, and how I truly want to live my life.</p>\n<p>I always preferred to be intentional about my life choices instead of just being reactive or letting life decide for me.</p>\n<p>This is what I&#39;m learning and applying:</p>\n<h2 id="expectation-vs-reality">Expectation vs Reality</h2>\n<p>The idea here is super simple: be able to set the real expectations instead of thinking you can do everything. Be realistic. Instead of adding 100 things to do to my daily ToDo list, think reasonably about the work I want to do in the day.</p>\n<p><code>Learn to say no</code>. This is truly important! As a curious person, I want to learn everything, embrace the world, and just do things.. from photography to computer science. from book reading to running. and so on. Learning to say no is pretty hard but very necessary.</p>\n<p><code>Constantly prioritize</code> to do only the things that really matter to you. I try to prioritize the things that truly give me happiness. There are things that I love to do, there are things I like to do. And it&#39;s a fine line between these two boxes. We have moments in life and these boxes will always change over time, so to re-prioritize this list of things will always be an important daily task for me.</p>\n<p><code>Be patient</code>. Good things take time. When we are not patient, we tend to do everything faster, sometimes - or most of the time - without any quality, only to accomplish the goal as fast as possible. Now I prefer the balance and constantly trying to apply the &quot;life is not a sprint, it&#39;s a marathon&quot; kind of rule.</p>\n<p>And finally, we are able to be productive without being productivity machines. Slow living is not about doing things slowly but experiencing life to the fullest.</p>\n<h2 id="be-present">Be present</h2>\n<p>As I wrote above, the idea of slow living is about being present and experiencing life to the fullest. In our current world where we are bombarded by information, to simplify my life, I want to keep only the health habits and cut the attention seekers like social media, so I uninstalled all the social media like Twitter, Instagram, Facebook, Linkedin from my phone (I also deactivated Facebook and Instagram). For the web version, I added the <code>Work Mode</code> browser extension to block all these social media.</p>\n<p>The other thing I&#39;m trying to apply in my life is the idea of deep work, to get my attention in that one thing and get most of it. Multitasking is a real problem for me, so I&#39;m always paying attention to this when I&#39;m doing that one thing. I don&#39;t want to rush and get many things done just to check all the things on my list, quality is important for me.</p>\n<p>To be present is for everything in my life: be present with people I love, at work, just appreciating life and nature.</p>\n<h2 id="take-time-to-recharge">Take time to recharge</h2>\n<p>I&#39;m always trying to do things, be active, and I don&#39;t take seriously &quot;sleep and rest&quot; (I should and I&#39;m working on it!), so the first thing is to give the permission to pause and slow down. I don&#39;t need to be &quot;productive&quot; every single minute. To relax and recharge is really important to do great work.</p>\n<p>Self-awareness is also very important. As far as I know myself, I was always an introverted person, so taking time for myself is very important. I like to be social, meet interesting people, but I also need time for myself. This is one way - one of the best - that makes me relax and recharge.</p>\n<p>Meditation and stretching are habits I&#39;m trying to build along the way. I believe in mindfulness and it&#39;s helping me relieve stress. I feel that stretching is relaxing for my body in the same way meditation is relaxing for my mind.</p>\n<hr>\n<p>We live in a world with so much information and attention seekers that I wanted to pause everything and rethink how I really want to live my life. I don&#39;t want to follow what people say. I want to experiment myself tools, ideas, concepts, and lifestyle and see if it fits well for me.</p>\n<p>Time to reflect about life is so damn important but so rare in these days where we are constantly doing, watching, listening, but not pausing to rethink ideas or reflect on how the system works.</p>\n<p>I hope this post can be the starting point to reflect on your own life the same way I started on my own.</p>\n<h2 id="inspirations">Inspirations</h2>\n<ul>\n<li><a href="https://www.youtube.com/channel/UCDn5zbDIhRG97O2rqia9Gag">Malama Life</a></li>\n<li><a href="https://www.youtube.com/channel/UCqPwe2Y-GIDr81qnke0qy4A">Halle Burns</a></li>\n<li><a href="https://www.youtube.com/channel/UCZqVfLvSXSGnVT_awp9WBMw">simply by christine</a></li>\n</ul>\n',
  },
  {
    title: 'TDD, simple functions, and React components',
    content:
      '<p>This is part of my studies on how to build sustainable and consistent software. In this post, we will talk about the thinking behind the testing driven development and how to apply this knowledge to simple functions, web accessibility, and React components, mostly with Jest and React Testing Library.</p>\n<p>Automated tests are a big part of software development. It gives us, developers, confidence to ship code to\nbe there, but we increase the confidence that the software will be up and running and working appropriately.</p>\n<p>I began my software career in the Ruby community writing tests from the first day I learned the language. The Ruby (and Rails) community was always strong in the testing automation area. It helped shape my mindset on how to write good software.</p>\n<p>So using Ruby and Rails, I did a lot of backend stuff like background jobs, data structure modeling, API building, and so on. In this scope, the user is always one: the developer user. If building an API, the user would be the developer that&#39;s consuming the API. If building the models, the user would be the developer that will use this model.</p>\n<p>Now doing a lof of frontend stuff too, after 1 intense year of building PWAs using mostly React and Redux, at first some thoughts came to my mind:</p>\n<ul>\n<li>TDD is impossible when building UI stuff. How do I know if it is a div or span?</li>\n<li>Testing can be &quot;complex&quot;. Should I shallow or should I mount? Test everything? Ensure every div should be the right place?</li>\n</ul>\n<p>So I started re-thinking about these testing practices and how to make it productive.</p>\n<p>TDD is possible. If I&#39;m wondering if I should expect a div or a span, I&#39;m probably testing the wrong thing. Remember: tests should give us the confidence to ship, not necessarily to cover every bit or implementation details. We will dive into this topic later!</p>\n<p>I want to build tests that:</p>\n<ul>\n<li>Ensure the software works appropriately</li>\n<li>Give the confidence to ship code to production</li>\n<li>Make us think about software design</li>\n</ul>\n<p>And tests that make software:</p>\n<ul>\n<li>Easy to maintain</li>\n<li>Easy to refactor</li>\n</ul>\n<h2 id="testing-driven-development">Testing Driven Development</h2>\n<p>TDD shouldn&#39;t be complex. It is just a process of 3 steps:</p>\n<ul>\n<li>Make a test</li>\n<li>Make it run</li>\n<li>Make it right</li>\n</ul>\n<p>We start writing a simple test to cover how we expect the software works. Then we make the first implementation of the code (class, function, script, etc). Now the software is behaving. It works as expected. Time to make it right. Time to make it better.</p>\n<p>The goal is a clean code that works. We solve the &quot;that works&quot; problem first and then make the code clean.</p>\n<p>It is pretty simple. And it should be. I didn&#39;t say it is easy. But it is simple, straightforward, just 3 steps. Every time you exercise this process of writing tests first, code after, and then refactoring, you feel more confident.</p>\n<p>One good technique when writing your tests first is to think about use cases and simulate how it should be used (as a function, component, or used by a real user).</p>\n<h2 id="functions">Functions</h2>\n<p>Let&#39;s apply this TDD thing into simple functions.</p>\n<p>Some time ago I was implementing a draft feature for a real estate registration flow. Part of the feature was to show a modal if the user had a not finished real estate. The function we will implement is the one that answers if the user has at least one real estate draft.</p>\n<p>So first step: writing the test! Let&#39;s think of the use cases of this function. It always responds a boolean: true or false.</p>\n<ul>\n<li>Has no unsaved real estate draft: <code>false</code></li>\n<li>Has at least one unsaved real estate draft: <code>true</code></li>\n</ul>\n<p>Let&#39;s write the tests that represent this behavior:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;hasRealEstateDraft&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;with real estate drafts&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns true&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> realEstateDrafts = [\n        {\n          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;São Paulo&#x27;</span>,\n          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;UNSAVED&#x27;</span>,\n        },\n      ];\n\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">hasRealEstateDraft</span>(realEstateDrafts)).<span class="hljs-title function_">toBeTruthy</span>();\n    });\n  });\n\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;with not drafts&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns false&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">hasRealEstateDraft</span>([])).<span class="hljs-title function_">toBeFalsy</span>();\n    });\n  });\n});\n</code></pre>\n<p>We wrote the tests. But when running it, it shows go red: 2 broken tests because we do not have the function implemented yet.</p>\n<p>Second step: make it run! In this case, it is pretty simple. We need to receive this array object and return if it has or hasn&#39;t at least one real estate draft.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">hasRealEstateDraft</span> = (<span class="hljs-params">realEstateDrafts</span>) =&gt; realEstateDrafts.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>;\n</code></pre>\n<p>Great! Simple function. Simple tests. We could go to step 3: make it right! But in this case, our function is really simple and we&#39;ve already got it right.</p>\n<p>But now we need the function to get the real estate drafts and pass it to the <code>hasRealEstateDraft</code>.</p>\n<p>Which use case we can think of?</p>\n<ul>\n<li>An empty list of real estates</li>\n<li>Only saved real estates</li>\n<li>Only unsaved real estates</li>\n<li>Mixed: save and unsaved real estates</li>\n</ul>\n<p>Let&#39;s write the tests to represent it:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;getRealEstateDrafts&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;with an empty list&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns an empty list&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> realEstates = [];\n\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getRealEstateDrafts</span>(realEstates)).<span class="hljs-title function_">toMatchObject</span>([]);\n    });\n  });\n\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;with only unsaved real estates&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns the drafts&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> realEstates = [\n        {\n          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;São Paulo&#x27;</span>,\n          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;UNSAVED&#x27;</span>,\n        },\n        {\n          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;Tokyo&#x27;</span>,\n          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;UNSAVED&#x27;</span>,\n        },\n      ];\n\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getRealEstateDrafts</span>(realEstates)).<span class="hljs-title function_">toMatchObject</span>(realEstates);\n    });\n  });\n\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;with only saved real estates&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns an empty list&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> realEstates = [\n        {\n          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;São Paulo&#x27;</span>,\n          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;SAVED&#x27;</span>,\n        },\n        {\n          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;Tokyo&#x27;</span>,\n          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;SAVED&#x27;</span>,\n        },\n      ];\n\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getRealEstateDrafts</span>(realEstates)).<span class="hljs-title function_">toMatchObject</span>([]);\n    });\n  });\n\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;with saved and unsaved real estates&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns the drafts&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> realEstates = [\n        {\n          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;São Paulo&#x27;</span>,\n          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;SAVED&#x27;</span>,\n        },\n        {\n          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;Tokyo&#x27;</span>,\n          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;UNSAVED&#x27;</span>,\n        },\n      ];\n\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getRealEstateDrafts</span>(realEstates)).<span class="hljs-title function_">toMatchObject</span>([\n        {\n          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;Tokyo&#x27;</span>,\n          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;UNSAVED&#x27;</span>,\n        },\n      ]);\n    });\n  });\n});\n</code></pre>\n<p>Great! We run the tests. It doesn&#39;t work.. yet! Now implement the function.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getRealEstatesDrafts</span> = (<span class="hljs-params">realEstates</span>) =&gt; {\n  <span class="hljs-keyword">const</span> unsavedRealEstates = realEstates.<span class="hljs-title function_">filter</span>(\n    <span class="hljs-function">(<span class="hljs-params">realEstate</span>) =&gt;</span> realEstate.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;UNSAVED&#x27;</span>,\n  );\n  <span class="hljs-keyword">return</span> unsavedRealEstates;\n};\n</code></pre>\n<p>We simply filter by the real estate status and return it. Great, the tests are passing, the bar is green! And the software is behaving, but we can make it better: step 3!</p>\n<p>What about extracting the anonymous function within the <code>filter</code> function and make the <code>&#39;UNSAVED&#39;</code> be represented by an enum?</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STATUS</span> = {\n  <span class="hljs-attr">UNSAVED</span>: <span class="hljs-string">&#x27;UNSAVED&#x27;</span>,\n  <span class="hljs-attr">SAVED</span>: <span class="hljs-string">&#x27;SAVED&#x27;</span>,\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">byUnsaved</span> = (<span class="hljs-params">realEstate</span>) =&gt; realEstate.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">STATUS</span>.<span class="hljs-property">UNSAVED</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">getRealEstatesDrafts</span> = (<span class="hljs-params">realEstates</span>) =&gt; realEstates.<span class="hljs-title function_">filter</span>(byUnsaved);\n</code></pre>\n<p>The tests are still passing and we have a better solution.</p>\n<p>One thing to have in mind here: I isolated the data source from the logic. What does it mean? We get the data from local storage (data source), but we test only the functions responsible to the logic to get drafts and see if it has at least one draft. The functions with the logic, we ensure that it works and it is clean code.</p>\n<p>If we get the <code>localStorage</code> inside our functions, it becomes hard to test. So we separate the responsibility and make the tests easy to write. Pure functions are easier to maintain and simpler to write tests.</p>\n<h2 id="react-components">React Components</h2>\n<p>Now let&#39;s talk about React components. Back to the introduction, we talked about writing tests that test implementation details. And now we will see how we can make it better, more sustainable, and have more confidence.</p>\n<p>A couple of days ago I was planning to build the new onboarding information for the real estate owner. It is basically a bunch of pages with the same design, but it changes the icon, title, and description of the pages.</p>\n<img src="/tdd-functions-and-react-components/ui.png">\n\n<p>I wanted to build just one component: <code>Content</code> and pass the information needed to render the correct icon, title, and description. I would pass <code>businessContext</code> and <code>step</code> as props and it would render the correct content to the onboarding page.</p>\n<p>We don&#39;t want to know if we will render a div or paragraph tag. Our test needs to ensure that for a given business context and step, the correct content will be there. So I came with these use cases:</p>\n<ul>\n<li>The first step of the rental business context</li>\n<li>Last step of the rental business context</li>\n<li>The first step of the sales business context</li>\n<li>Last step of the sales business context</li>\n</ul>\n<p>Let&#39;s see the tests:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Content&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;in the rental context&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> defaultProps = {\n      <span class="hljs-attr">businessContext</span>: <span class="hljs-variable constant_">BUSINESS_CONTEXT</span>.<span class="hljs-property">RENTAL</span>,\n    };\n\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the title and description for the first step&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> step = <span class="hljs-number">0</span>;\n      <span class="hljs-keyword">const</span> { getByText } = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Content</span> {<span class="hljs-attr">...defaultProps</span>} <span class="hljs-attr">step</span>=<span class="hljs-string">{step}</span> /&gt;</span></span>);\n\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;the first step title&#x27;</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;the first step description&#x27;</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n    });\n\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the title and description for the forth step&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> step = <span class="hljs-number">3</span>;\n      <span class="hljs-keyword">const</span> { getByText } = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Content</span> {<span class="hljs-attr">...defaultProps</span>} <span class="hljs-attr">step</span>=<span class="hljs-string">{step}</span> /&gt;</span></span>);\n\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;the last step title&#x27;</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;the last step description&#x27;</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n    });\n  });\n\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;in the sales context&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> defaultProps = {\n      <span class="hljs-attr">businessContext</span>: <span class="hljs-variable constant_">BUSINESS_CONTEXT</span>.<span class="hljs-property">SALE</span>,\n    };\n\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the title and description for the first step&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> step = <span class="hljs-number">0</span>;\n      <span class="hljs-keyword">const</span> { getByText } = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Content</span> {<span class="hljs-attr">...defaultProps</span>} <span class="hljs-attr">step</span>=<span class="hljs-string">{step}</span> /&gt;</span></span>);\n\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;the first step title&#x27;</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;the first step description&#x27;</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n    });\n\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the title and description for the last step&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> step = <span class="hljs-number">6</span>;\n      <span class="hljs-keyword">const</span> { getByText } = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Content</span> {<span class="hljs-attr">...defaultProps</span>} <span class="hljs-attr">step</span>=<span class="hljs-string">{step}</span> /&gt;</span></span>);\n\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;the last step title&#x27;</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;the last step description&#x27;</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n    });\n  });\n});\n</code></pre>\n<p>We have one <code>describe</code> block for each business context and an <code>it</code> block for each step. I also created an accessibility test to ensure the component we are building is accessible.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;has not accessibility violations&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n  <span class="hljs-keyword">const</span> props = {\n    <span class="hljs-attr">businessContext</span>: <span class="hljs-variable constant_">BUSINESS_CONTEXT</span>.<span class="hljs-property">SALE</span>,\n    <span class="hljs-attr">step</span>: <span class="hljs-number">0</span>,\n  };\n\n  <span class="hljs-keyword">const</span> { container } = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Content</span> {<span class="hljs-attr">...props</span>} /&gt;</span></span>);\n  <span class="hljs-keyword">const</span> results = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axe</span>(container);\n\n  <span class="hljs-title function_">expect</span>(results).<span class="hljs-title function_">toHaveNoViolations</span>();\n});\n</code></pre>\n<p>Now we need to make it run! Basically, the UI part of this component is just the icon, the title, and the description. Something like:</p>\n<pre><code class="hljs language-javascript">&lt;<span class="hljs-title class_">Fragment</span>&gt;\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> /&gt;</span></span>\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{title}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{description}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>\n&lt;/<span class="hljs-title class_">Fragment</span>&gt;\n</code></pre>\n<p>We just need to build the logic to get all these correct data. As I have the <code>businessContext</code> and the <code>step</code> in this component, I wanted to just do something like</p>\n<pre><code class="hljs language-javascript">content[businessContext][step];\n</code></pre>\n<p>And it gets the correct content. So I built a data structure to work that way.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> onboardingStepsContent = {\n  <span class="hljs-attr">alugar</span>: {\n    <span class="hljs-number">0</span>: {\n      <span class="hljs-title class_">Icon</span>: <span class="hljs-title class_">Home</span>,\n      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;first step title&#x27;</span>,\n      <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;first step description&#x27;</span>,\n    },\n    <span class="hljs-comment">// ...</span>\n  },\n  <span class="hljs-attr">vender</span>: {\n    <span class="hljs-number">0</span>: {\n      <span class="hljs-title class_">Icon</span>: <span class="hljs-title class_">Home</span>,\n      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;first step title&#x27;</span>,\n      <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;first step description&#x27;</span>,\n    },\n    <span class="hljs-comment">// ...</span>\n  },\n};\n</code></pre>\n<p>It&#39;s just an object with the first keys as the business context data and for each business context, it has keys that represent each step of the onboarding. And our component would be:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Content</span> = (<span class="hljs-params">{ businessContext, step }</span>) =&gt; {\n  <span class="hljs-keyword">const</span> onboardingStepsContent = {\n    <span class="hljs-attr">alugar</span>: {\n      <span class="hljs-number">0</span>: {\n        <span class="hljs-title class_">Icon</span>: <span class="hljs-title class_">Home</span>,\n        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;first step title&#x27;</span>,\n        <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;first step description&#x27;</span>,\n      },\n      <span class="hljs-comment">// ...</span>\n    },\n    <span class="hljs-attr">vender</span>: {\n      <span class="hljs-number">0</span>: {\n        <span class="hljs-title class_">Icon</span>: <span class="hljs-title class_">Home</span>,\n        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;first step title&#x27;</span>,\n        <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;first step description&#x27;</span>,\n      },\n      <span class="hljs-comment">// ...</span>\n    },\n  };\n\n  <span class="hljs-keyword">const</span> { <span class="hljs-title class_">Icon</span>, title, description } =\n    onboardingStepsContent[businessContext][step];\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{title}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{description}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Fragment</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<p>It works! Now let&#39;s make it better. I wanted to make the get content more resilient. What if it receives a step that doesn&#39;t exist for example? These are the use cases:</p>\n<ul>\n<li>The first step of the rental business context</li>\n<li>Last step of the rental business context</li>\n<li>The first step of the sales business context</li>\n<li>Last step of the sales business context</li>\n<li>Inexistent step of the rental business context</li>\n<li>Inexistent step of the sales business context</li>\n</ul>\n<p>Let&#39;s see the tests:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;getOnboardingStepContent&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;when it receives existent businessContext and step&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns the correct content for the step in &quot;alugar&quot; businessContext&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> businessContext = <span class="hljs-string">&#x27;alugar&#x27;</span>;\n      <span class="hljs-keyword">const</span> step = <span class="hljs-number">0</span>;\n\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getOnboardingStepContent</span>({ businessContext, step })).<span class="hljs-title function_">toMatchObject</span>(\n        {\n          <span class="hljs-title class_">Icon</span>: <span class="hljs-title class_">Home</span>,\n          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;first step title&#x27;</span>,\n          <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;first step description&#x27;</span>,\n        },\n      );\n    });\n\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns the correct content for the step in &quot;vender&quot; businessContext&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> businessContext = <span class="hljs-string">&#x27;vender&#x27;</span>;\n      <span class="hljs-keyword">const</span> step = <span class="hljs-number">5</span>;\n\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getOnboardingStepContent</span>({ businessContext, step })).<span class="hljs-title function_">toMatchObject</span>(\n        {\n          <span class="hljs-title class_">Icon</span>: <span class="hljs-title class_">ContractSign</span>,\n          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;last step title&#x27;</span>,\n          <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;last step description&#x27;</span>,\n        },\n      );\n    });\n  });\n\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;when it receives inexistent step for a given businessContext&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns the first step of &quot;alugar&quot; businessContext&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> businessContext = <span class="hljs-string">&#x27;alugar&#x27;</span>;\n      <span class="hljs-keyword">const</span> step = <span class="hljs-number">7</span>;\n\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getOnboardingStepContent</span>({ businessContext, step })).<span class="hljs-title function_">toMatchObject</span>(\n        {\n          <span class="hljs-title class_">Icon</span>: <span class="hljs-title class_">Home</span>,\n          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;first step title&#x27;</span>,\n          <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;first step description&#x27;</span>,\n        },\n      );\n    });\n\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns the first step of &quot;vender&quot; businessContext&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> businessContext = <span class="hljs-string">&#x27;vender&#x27;</span>;\n      <span class="hljs-keyword">const</span> step = <span class="hljs-number">10</span>;\n\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getOnboardingStepContent</span>({ businessContext, step })).<span class="hljs-title function_">toMatchObject</span>(\n        {\n          <span class="hljs-title class_">Icon</span>: <span class="hljs-title class_">Home</span>,\n          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;first step title&#x27;</span>,\n          <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;first step description&#x27;</span>,\n        },\n      );\n    });\n  });\n});\n</code></pre>\n<p>Great! Now let&#39;s build our <code>getOnboardingStepContent</code> function to handle this logic.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getOnboardingStepContent</span> = (<span class="hljs-params">{ businessContext, step }</span>) =&gt; {\n  <span class="hljs-keyword">const</span> content = onboardingStepsContent[businessContext][step];\n\n  <span class="hljs-keyword">return</span> content ? content : onboardingStepsContent[businessContext][<span class="hljs-number">0</span>];\n};\n</code></pre>\n<p>We try to get content. If we have it, just return it. If we don&#39;t have it, return the first step of the onboarding.</p>\n<p>Neat! But we can improve it. What about using the <code>||</code> operator? No need to assign to a variable, no need to use a ternary.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getOnboardingStepContent</span> = (<span class="hljs-params">{ businessContext, step }</span>) =&gt;\n  onboardingStepsContent[businessContext][step] ||\n  onboardingStepsContent[businessContext][<span class="hljs-number">0</span>];\n</code></pre>\n<p>If it finds the content, just return it. If it didn&#39;t find, return the first step of the given business context.</p>\n<p>Now our component is only UI.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Content</span> = (<span class="hljs-params">{ businessContext, step }</span>) =&gt; {\n  <span class="hljs-keyword">const</span> { <span class="hljs-title class_">Icon</span>, title, description } = <span class="hljs-title function_">getOnboardingStepContent</span>({\n    businessContext,\n    step,\n  });\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{title}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{description}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Fragment</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<hr>\n<h2 id="final-thoughts">Final thoughts</h2>\n<p>I like to think deeply about the tests I&#39;m writing. And I think all developers should too. It does need to give us the confidence to ship more code and have a bigger impact on the market we are working on.</p>\n<p>Like all code, when we write smelly and bad tests, it influences other developers to follow the &quot;pattern&quot;. It gets worse in bigger companies. It scales badly. But we are always able to stop, reflect on the status quo, and take action to make it better.</p>\n<p>I shared some resources I found interesting reading and learning. If you want to get a great introduction to TDD, I really recommend TDD by example, a book from Kent Beck.</p>\n<p>I will write more about tests, TDD, and React. And how we can make our software more consistent and feel safe when shipping code to production.</p>\n<hr>\n<h2 id="dependencies">Dependencies</h2>\n<ul>\n<li><a href="https://github.com/nickcolley/jest-axe">jest-axe</a>: jest matchers for testing accessibility</li>\n<li><a href="https://github.com/testing-library/react-testing-library">testing-library/react-testing-library</a>: testing utilities to help test react</li>\n<li><a href="https://github.com/testing-library/jest-dom">testing-library/jest-dom</a>: jest matchers to test the state of the DOM</li>\n</ul>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://BeginnerJavaScript.com/friend/LEANDRO">Beginner JavaScript Course</a></li>\n<li><a href="https://ReactForBeginners.com/friend/LEANDRO">React for Beginners Course</a></li>\n<li><a href="https://AdvancedReact.com/friend/LEANDRO">Advanced React Course</a></li>\n<li><a href="https://ES6.io/friend/LEANDRO">ES6 Course</a></li>\n<li><a href="https://www.educative.io/courses/the-road-to-learn-react?aff=x8bV">The Road to learn React</a></li>\n<li><a href="https://www.educative.io/courses/javascript-fundamentals-before-learning-react?aff=x8bV">JavaScript Fundamentals Before Learning React</a></li>\n<li><a href="https://www.educative.io/courses/reintroducing-react-v16-beyond?aff=x8bV">Reintroducing React: V16 and Beyond</a></li>\n<li><a href="https://www.educative.io/courses/advanced-react-patterns-with-hooks?aff=x8bV">Advanced React Patterns With Hooks</a></li>\n<li><a href="https://www.educative.io/courses/practical-redux?aff=x8bV">Practical Redux</a></li>\n<li><a href="https://mbsy.co/lFtbC">JavaScript Course by OneMonth</a></li>\n<li><a href="https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530">Test Driven Development by example book by Kent Beck</a></li>\n<li><a href="https://www.amazon.com/Testable-JavaScript-Ensuring-Reliable-Code/dp/1449323391/ref=sr_1_8?dchild=1&amp;keywords=testing+javascript&amp;qid=1585274935&amp;s=books&amp;sr=1-8">Testable Javascript book by Mark Ethan Trostler</a></li>\n<li><a href="https://github.com/tk-notes/blog/tree/master/tdd-functions-and-react-components">Blog post source code</a></li>\n<li><a href="https://medium.com/hackernoon/testing-react-with-jest-axe-and-react-testing-library-accessibility-34b952240f53">Testing React applications with jest, jest-axe, and react-testing-library</a></li>\n<li><a href="https://blog.sapegin.me/all/react-testing-3-jest-and-react-testing-library/">Modern React testing, part 3: Jest and React Testing Library</a></li>\n<li><a href="https://accessibility.blog.gov.uk/2017/02/24/what-we-found-when-we-tested-tools-on-the-worlds-least-accessible-webpage/">What we found when we tested tools on the world’s least-accessible webpage</a></li>\n<li><a href="https://kentcdodds.com/blog/testing-implementation-details">Testing Implementation Details</a></li>\n<li><a href="https://alterclass.io/?ref=5ec57f513c1321001703dcd2">Learn React by building an App</a></li>\n</ul>\n',
  },
  {
    title: 'Thinking in data contracts',
    content:
      '<p>In frontend development, it is common to consume API data and use it to render user interfaces. But sometimes, the API data is not exactly how we want to work with. So we manage to map the API data into the App state.</p>\n<p>But it doesn&#39;t need to be complex. It can be just a simple mapper function, an API data contract, and the App state contract.</p>\n<p>I&#39;ll show an example in the context of a Redux app and how we can make the state consistent.</p>\n<p>We start with the initial state contract.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Person</span> = {\n  <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<p>And use the contract type in the initial state definition:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">initialState</span>: <span class="hljs-title class_">Person</span> = {\n  <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>,\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>,\n  <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;tk@mail.com&#x27;</span>,\n};\n</code></pre>\n<p>After the app state definition, we can think of the API contract. We can just implement a type <code>PersonAPI</code> with all the types needed for the data.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Person</span>API = {\n  <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<p>Now that we have our contract defined, we can work with the data mapping. it doesn&#39;t need to be a super complex class. It can be a simple pure function, receiving <code>PersonAPI</code> data and transforming it into a <code>Person</code> data.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> fromAPI = (<span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span>API): <span class="hljs-function"><span class="hljs-params">Person</span> =&gt;</span> ({\n  <span class="hljs-attr">id</span>: person.<span class="hljs-property">id</span>,\n  <span class="hljs-attr">name</span>: person.<span class="hljs-property">name</span>,\n  <span class="hljs-attr">email</span>: person.<span class="hljs-property">email</span>,\n});\n</code></pre>\n<p>That&#39;s pretty simple! And how do we use it?</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> payloadAPI = {\n  <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>,\n  <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;tk@mail.com&#x27;</span>,\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span> = <span class="hljs-title function_">fromAPI</span>(payloadAPI); <span class="hljs-comment">// { id: 1, name: &#x27;TK&#x27;, email: &#x27;tk@mail.com&#x27; }</span>\n</code></pre>\n<p>Data comes in. Data comes out. Everything pure.</p>\n<p>Here we have a very simple mapping, no involved logic. But what if the API data we receive has no <code>name</code>, but <code>firstName</code> and <code>lastName</code>? We want to transform the <code>firstName</code> and <code>lastName</code> into a <code>name</code> attribute in the <code>Person</code> contract.</p>\n<p>The <code>PersonAPI</code> type:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Person</span>API = {\n  <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">firstName</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">lastname</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<p>The <code>Person</code> type:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Person</span> = {\n  <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<p>In our <code>name</code>, we need to join strings. Basically doing string interpolation:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-string">`<span class="hljs-subst">${person.firstName}</span> <span class="hljs-subst">${person.lastName}</span>`</span>;\n</code></pre>\n<p>So our mapping function would be something like:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> fromAPI = (<span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span>API): <span class="hljs-function"><span class="hljs-params">Person</span> =&gt;</span> ({\n  <span class="hljs-attr">id</span>: person.<span class="hljs-property">id</span>,\n  <span class="hljs-attr">name</span>: <span class="hljs-string">`<span class="hljs-subst">${person.firstName}</span> <span class="hljs-subst">${person.lastName}</span>`</span>,\n  <span class="hljs-attr">email</span>: person.<span class="hljs-property">email</span>,\n});\n</code></pre>\n<p>Great! Transforming data for UI rendering.</p>\n<p>Next step: imagine our <code>lastName</code> is an optional database column. So the API endpoint can return it... or not!</p>\n<p>We can use the Typescript <code>Optional Property</code>. It tells us: &quot;It is an optional property, it has this type, but the data can be here... or not!&quot;</p>\n<p>So we use it in our API contract:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Person</span>API = {\n  <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">firstName</span>: <span class="hljs-built_in">string</span>;\n  lastName?: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<p>Nice! Now we know that we need to do some kind of logic to build the <code>name</code> attribute.</p>\n<ul>\n<li>It has the <code>lastName</code> property: concat <code>firstName</code> and <code>lastName</code></li>\n<li>It hasn&#39;t the <code>lastName</code>: just return the <code>firstName</code> value</li>\n</ul>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> fromAPI = (<span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span>API): <span class="hljs-function"><span class="hljs-params">Person</span> =&gt;</span> {\n  <span class="hljs-keyword">let</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-keyword">if</span> (person.<span class="hljs-property">lastName</span>) {\n    name = <span class="hljs-string">`<span class="hljs-subst">${person.firstName}</span> <span class="hljs-subst">${person.lastName}</span>`</span>;\n  } <span class="hljs-keyword">else</span> {\n    person.<span class="hljs-property">firstName</span>;\n  }\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">id</span>: person.<span class="hljs-property">id</span>,\n    name,\n    <span class="hljs-attr">email</span>: person.<span class="hljs-property">email</span>,\n  };\n};\n</code></pre>\n<p>But we can also transform this <code>let</code> statement into a <code>const</code> by doing a ternary operation:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> fromAPI = (<span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span>API): <span class="hljs-function"><span class="hljs-params">Person</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = person.<span class="hljs-property">lastName</span>\n    ? <span class="hljs-string">`<span class="hljs-subst">${person.firstName}</span> <span class="hljs-subst">${person.lastName}</span>`</span>\n    : person.<span class="hljs-property">firstName</span>;\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">id</span>: person.<span class="hljs-property">id</span>,\n    name,\n    <span class="hljs-attr">email</span>: person.<span class="hljs-property">email</span>,\n  };\n};\n</code></pre>\n<p>Or better: separate its responsibility into a function that builds the name!</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> buildPersonName = (<span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span>API): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span>\n  person.<span class="hljs-property">lastName</span> ? <span class="hljs-string">`<span class="hljs-subst">${person.firstName}</span> <span class="hljs-subst">${person.lastName}</span>`</span> : person.<span class="hljs-property">firstName</span>;\n<span class="hljs-keyword">const</span> fromAPI = (<span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span>API): <span class="hljs-function"><span class="hljs-params">Person</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title function_">buildPersonName</span>(person);\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">id</span>: person.<span class="hljs-property">id</span>,\n    name,\n    <span class="hljs-attr">email</span>: person.<span class="hljs-property">email</span>,\n  };\n};\n</code></pre>\n<p>We separate the responsibility of each function. Great! It is easier to test our functions now.</p>\n<p>Next phase: using the API data to build a new app state. Imagine we want to know if the person is active. The business rule is: the person status should be <code>active</code> and the last visit should be within this week (in the last 7 days).</p>\n<p>Our API contract first:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Person</span>API = {\n  <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">firstName</span>: <span class="hljs-built_in">string</span>;\n  lastName?: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">status</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">lastVisit</span>: <span class="hljs-title class_">Date</span>;\n};\n</code></pre>\n<p>We will use these properties: <code>status</code> and <code>lastVisit</code>.</p>\n<p>Our app state contract second:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Person</span> = {\n  <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">active</span>: <span class="hljs-built_in">boolean</span>;\n};\n</code></pre>\n<p>The business rule now:</p>\n<ul>\n<li>Person status should be <code>active</code></li>\n</ul>\n<pre><code class="hljs language-typescript">person.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;active&#x27;</span>;\n</code></pre>\n<ul>\n<li>Person last visit should be in the last 7 days</li>\n</ul>\n<pre><code class="hljs language-typescript">person.<span class="hljs-property">lastVisit</span> &gt;= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - <span class="hljs-number">7</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>);\n</code></pre>\n<p>Now our mapping function:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> fromAPI = (<span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span>API): <span class="hljs-function"><span class="hljs-params">Person</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title function_">buildPersonName</span>(person);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">active</span>: <span class="hljs-built_in">boolean</span> =\n    person.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;active&#x27;</span> &amp;&amp;\n    person.<span class="hljs-property">lastVisit</span> &gt;= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - <span class="hljs-number">7</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>);\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">id</span>: person.<span class="hljs-property">id</span>,\n    name,\n    <span class="hljs-attr">email</span>: person.<span class="hljs-property">email</span>,\n    active,\n  };\n};\n</code></pre>\n<p>Let&#39;s refactor it! We will start with the <code>status</code> thing. <code>&#39;active&#39;</code> is a string. To define it in a data structure and enable reusability, we can use Typescript&#39;s Enum.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-built_in">enum</span> <span class="hljs-title class_">PersonStatus</span> {\n  <span class="hljs-title class_">Active</span> = <span class="hljs-string">&#x27;active&#x27;</span>,\n  <span class="hljs-title class_">Inactive</span> = <span class="hljs-string">&#x27;inactive&#x27;</span>,\n}\n</code></pre>\n<p>We use it like:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-title class_">PersonStatus</span>.<span class="hljs-property">Active</span>; <span class="hljs-comment">// &#x27;active&#x27;</span>\n<span class="hljs-title class_">PersonStatus</span>.<span class="hljs-property">Inactive</span>; <span class="hljs-comment">// &#x27;inactive&#x27;</span>\n</code></pre>\n<p>The person status logic comes easy with this feature:</p>\n<pre><code class="hljs language-typescript">person.<span class="hljs-property">status</span> === <span class="hljs-title class_">PersonStatus</span>.<span class="hljs-property">Active</span>;\n</code></pre>\n<p>Now the last visit thing. Instead of random numbers, what about making it a little bit more descriptive? This is 1 day in milliseconds:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">oneDayInMilliseconds</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">24</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>;\n</code></pre>\n<p>This is 7 days in milliseconds:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">sevenDaysInMilliseconds</span>: <span class="hljs-built_in">number</span> = oneDayInMilliseconds * <span class="hljs-number">7</span>;\n</code></pre>\n<p>And this is a week ago:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">weekAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - sevenDaysInMilliseconds);\n</code></pre>\n<p>Now our logic comes easy:</p>\n<pre><code class="hljs language-typescript">person.<span class="hljs-property">lastVisit</span> &gt;= weekAgo;\n</code></pre>\n<p>We can now join all together in a function called <code>isActive</code> that returns a boolean?</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> isActive = (<span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span>API): <span class="hljs-function"><span class="hljs-params">boolean</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">oneDayInMilliseconds</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">24</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>;\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">sevenDaysInMilliseconds</span>: <span class="hljs-built_in">number</span> = oneDayInMilliseconds * <span class="hljs-number">7</span>;\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">weekAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - sevenDaysInMilliseconds);\n  <span class="hljs-keyword">return</span> person.<span class="hljs-property">status</span> === <span class="hljs-title class_">PersonStatus</span>.<span class="hljs-property">Active</span> &amp;&amp; person.<span class="hljs-property">lastVisit</span> &gt;= weekAgo;\n};\n</code></pre>\n<p>I really want to separate the <code>weekAgo</code> &quot;logic&quot; into a new function. And I also want to name the statements.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> getWeekAgo = (): <span class="hljs-function"><span class="hljs-params">Date</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">oneDayInMilliseconds</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">24</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>;\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">sevenDaysInMilliseconds</span>: <span class="hljs-built_in">number</span> = oneDayInMilliseconds * <span class="hljs-number">7</span>;\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - sevenDaysInMilliseconds);\n};\n<span class="hljs-keyword">const</span> <span class="hljs-attr">weekAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-title function_">getWeekAgo</span>();\n</code></pre>\n<p>Naming our statements, it looks like:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">hasActiveStatus</span>: <span class="hljs-built_in">boolean</span> = person.<span class="hljs-property">status</span> === <span class="hljs-title class_">PersonStatus</span>.<span class="hljs-property">Active</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-attr">lastVisitInSevenDays</span>: <span class="hljs-built_in">boolean</span> = person.<span class="hljs-property">lastVisit</span> &gt;= weekAgo;\n</code></pre>\n<p>So our final <code>isActive</code> function looks beautiful:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> isActive = (<span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span>API): <span class="hljs-function"><span class="hljs-params">boolean</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">weekAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-title function_">getWeekAgo</span>();\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">hasActiveStatus</span>: <span class="hljs-built_in">boolean</span> = person.<span class="hljs-property">status</span> === <span class="hljs-title class_">PersonStatus</span>.<span class="hljs-property">Active</span>;\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">lastVisitInSevenDays</span>: <span class="hljs-built_in">boolean</span> = person.<span class="hljs-property">lastVisit</span> &gt;= weekAgo;\n  <span class="hljs-keyword">return</span> hasActiveStatus &amp;&amp; lastVisitInSevenDays;\n};\n</code></pre>\n<p>And our mapping function keeps simple:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> fromAPI = (<span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span>API): <span class="hljs-function"><span class="hljs-params">Person</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title function_">buildPersonName</span>(person);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">active</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-title function_">isActive</span>(person);\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">id</span>: person.<span class="hljs-property">id</span>,\n    name,\n    <span class="hljs-attr">email</span>: person.<span class="hljs-property">email</span>,\n    active,\n  };\n};\n</code></pre>\n<p>Just a few tweaks: Object Property Value Shorthand for <code>id</code> and <code>email</code>.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> fromAPI = (<span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span>API): <span class="hljs-function"><span class="hljs-params">Person</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> { id, email }: <span class="hljs-title class_">Person</span>API = person;\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title function_">buildPersonName</span>(person);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">active</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-title function_">isActive</span>(person);\n  <span class="hljs-keyword">return</span> {\n    id,\n    name,\n    email,\n    active,\n  };\n};\n</code></pre>\n<h2 id="learnings">Learnings</h2>\n<p>So what have we learned here?</p>\n<ul>\n<li>Data contracts help us better define our data structures, the state we want in our frontend to render UI properly.</li>\n<li>It also serves as good documentation: a better understanding of our API response and the app state we need to deal with.</li>\n<li>Another cool benefit is when we define the data types and use it in the initial state. <a href="/consistent-state-management-in-react-and-redux">We make our system really consistent</a> if we preserve the state contract across the application.</li>\n<li>It doesn&#39;t need to be complex. Simple &amp; pure functions only. Separate the responsibility of each function and we are good to go. It also helps us when testing.</li>\n</ul>\n<p>I hope I could show a good overview of the data contracts, simples functions, and the single responsibility principle. In software engineering, it is really easy to make everything complex and mess it up. But if we think carefully about our data, the data structures we are using, and how we manage complexity and logic, I think we have a good chance of building good software.</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://BeginnerJavaScript.com/friend/LEANDRO">Beginner JavaScript Course</a></li>\n<li><a href="https://ReactForBeginners.com/friend/LEANDRO">React for Beginners Course</a></li>\n<li><a href="https://AdvancedReact.com/friend/LEANDRO">Advanced React Course</a></li>\n<li><a href="https://ES6.io/friend/LEANDRO">ES6 Course</a></li>\n<li><a href="https://mbsy.co/lFtbC">JavaScript Course by OneMonth</a></li>\n</ul>\n',
  },
  {
    title: 'Thoughts on my productivity',
    content:
      '<p><em><strong>TLDR</strong></em>: Think about my energy. Think about prioritization. Think about tasks planning. Think about removing distractions.</p>\n<h2 id="energy">Energy</h2>\n<p>Productivity is about the energy I put into tasks. Strive to think about quality, instead of only quantity of thing you get done in the end of the day.</p>\n<p>Strive to be physically and mentally well. Eat healthy. Do exercises. Sleep well. De-stress.</p>\n<h2 id="task-planning--prioritization">Task Planning &amp; Prioritization</h2>\n<p>Realise you won&#39;t get done a thousand things in a single day.</p>\n<p>Prioritization is so important. Design your tasks to get done the most important and impactful things.</p>\n<p>Plan to get things done. It is easy to do other things not related to things you really need to get done. Planning your day, or the things you want to do is a way to be productive and not procrastinating all day.</p>\n<h2 id="focus--distractions">Focus &amp; Distractions</h2>\n<p>Design your environment to be focused on your tasks: get a good headphone, stay away from loud places with too many people, silence the phone.</p>\n',
  },
  {
    title: 'Understanding the basics of Ruby on Rails: HTTP, MVC, and Routes',
    content:
      '<p>After learning your <a href="https://medium.freecodecamp.org/learning-ruby-from-zero-to-hero-90ad4eecc82d">first programming language</a>, you may ask what can you do with programming: AI/Machine Learning? Hardware development? Mobile apps? Or maybe you want to start developing web applications! :)</p>\n<p>Here we’ll understand the basics of how the web, the routes, and the MVC architecture work using the Ruby on Rails web framework. Let’s dive into the web world.</p>\n<p>Before learning web development with Rails, I really recommend learning about <a href="https://medium.freecodecamp.org/learning-ruby-from-zero-to-hero-90ad4eecc82d">Ruby first</a>.</p>\n<h3 id="how-does-the-web-work">How does the web work?</h3>\n<p>The web has a bunch of layers (<a href="https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm">Application, TCP, Internet, Hardware layers</a>) that are all connected. But basically, it works through <strong>HTTP</strong> (Hypertext Transfer Protocol).</p>\n<blockquote>\n<p>The Hypertext Transfer Protocol (HTTP) is an application protocol for distributed, collaborative, hypermedia information systems. — Wikipedia</p>\n</blockquote>\n<p>The <strong>HTTP</strong> works like a request — response cycle in the client — server model.</p>\n<p>We have a web browser (Google Chrome, for example). So we type the <code>www.google.com</code> URL, and the client submits the HTTP request (request message) to the server. The server returns the HTTP response (response message — in that case, the response is the HTML from Google’s website).</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*0HsqvxES_m9Serhg8xW2Xg.png" alt=""></p>\n<p>The client does the request and receives the response from the server. The client handles the UI and user interactions. On the server, we can store and retrieve data (on databases), process logic on the background (workers/jobs), and a lot of other things.</p>\n<p>If you want to deeply understand it, I’ll suggest some resources. I am a big fan of <a href="https://medium.com/@preethikasireddy">Preethi</a>’s posts. Here a series of <strong>3 parts</strong>:</p>\n<ul>\n<li><p><a href="https://medium.freecodecamp.org/how-the-web-works-a-primer-for-newcomers-to-web-development-or-anyone-really-b4584e63585c">A Primer for Newcomers to Web Development</a></p>\n</li>\n<li><p><a href="https://medium.freecodecamp.org/how-the-web-works-part-ii-client-server-model-the-structure-of-a-web-application-735b4b6d76e3">Client-Server Model &amp; the Structure of a Web Application</a></p>\n</li>\n<li><p><a href="https://medium.freecodecamp.org/how-the-web-works-part-iii-http-rest-e61bc50fa0a">HTTP &amp; REST</a></p>\n</li>\n</ul>\n<h3 id="the-mvc-architecture-and-rails-routes">The MVC architecture and Rails Routes</h3>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*eDPWR3lYGm1ogbef2beyHA.png" alt=""></p>\n<p>Now that we understand how the Web works, we’ll study the MVC architecture and Rails Routes.</p>\n<p>MVC stands for Model, View, and Controller.</p>\n<p>On this architecture, we have the “separation of the concerns” among Models, Views and, Controllers. Each part has its own responsibility. Let’s dive into each part.</p>\n<h4 id="model">Model</h4>\n<blockquote>\n<p>“Maintains the relationship between Object and Database and handles validation, association, transactions”</p>\n</blockquote>\n<p>This means that the model will maintain an extreme relation with the Database. Each model (can) represent a database table (in case of SQL databases). This model object gains capabilities (inherited from ActiveRecord — Rails class) to retrieve, save, edit, and delete data from database table. We use model objects as a layer between our application and the database.</p>\n<p>Besides that relation with the database, the model can create <strong>validations</strong>and <strong>associations</strong> between models.</p>\n<h4 id="view">View</h4>\n<blockquote>\n<p>“A presentation of data in a particular format, triggered by a controller’s decision to present the data.”</p>\n</blockquote>\n<p>This is the presentation of the request’s response. This presentation can be in a bunch of format types: PDF, HTML, JSON, etc. The final result of a view will likely be the user interface (UI) — Part of the “Client.”</p>\n<p>For most pages on the web, the views will be an HTML styled with CSS and JS. But we can implement PDFs of user behavior on a <a href="https://www.worldpackers.com/">Travel digital product</a> to show all employees how people use their website, too.</p>\n<h4 id="controller">Controller</h4>\n<blockquote>\n<p>“The facility within the application that directs traffic, on the one hand querying the models for specific data, and on the other hand organizing that data (searching, sorting) into a form that fits the needs of a given view.”</p>\n</blockquote>\n<p>The controller is the “Maestro.” It takes care of the flow: uses models to do queries, parses data, and make decisions about in which format you’ll present the data.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*KK61kGXrkaFBDfY7uWukyQ.png" alt=""></p>\n<h3 id="mvc--routes-cycle-on-a-rails-application">MVC &amp; Routes cycle on a Rails application</h3>\n<p>So imagine that we work at a <a href="https://www.worldpackers.com">Travel Startup</a>. Part of the product is to present a <a href="https://www.worldpackers.com/articles">list of great articles about travel stories and tips</a> to travelers.</p>\n<p>Just think from the traveler’s perspective. You go to <code>www.worldpackers.com/articles</code> and you see a beautiful page listing a bunch of great articles.</p>\n<p>When you type this URL in the browser, it makes a request to the server. In the server, we have the Rails web application. The Rails Router verifies if there is an entry matching the requested URL.</p>\n<p>We just need to configure the routes for this line:</p>\n<pre><code class="hljs language-ruby">resources <span class="hljs-symbol">:articles</span>\n</code></pre>\n<p>This will create RESTful routes for articles. If we run <code>bundle exec rake routes</code>, it will show the list of paths created.</p>\n<pre><code class="hljs language-shell">HTTP VERB   PATH                          Controller#Action\nGET         /articles(.:format)           articles#index\nPOST        /articles(.:format)           articles#create\nGET         /articles/new(.:format)       articles#new\nGET         /articles/:id/edit(.:format)  articles#edit\nGET         /articles/:id(.:format)       articles#show\nPATCH       /articles/:id(.:format)       articles#update\nPUT         /articles/:id(.:format)       articles#update\nDELETE      /articles/:id(.:format)       articles#destroy\n</code></pre>\n<p>The HTTP verb can be <code>GET</code>, <code>POST</code>, <code>PATCH</code>, <code>PUT</code>, or <code>DELETE</code>. And we know how Rails maps each <code>PATH</code> to the right <code>controller</code> and <code>action</code>. Read more <a href="http://guides.rubyonrails.org/routing.html">here</a>.</p>\n<p>In our case, the server will receive <code>/articles</code> path and <code>GET</code> as the HTTP verb. It will map to <code>ArticlesController</code> and <code>index</code> action.</p>\n<p>In the <strong>controller</strong><code>ArticlesController</code> we use the <strong>model</strong> <code>Article</code> to get all articles in the database and render the <strong>view</strong> <code>index.html.erb</code> as the server response (the UI).</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArticlesController</span> &lt; ApplicationController</span>\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span></span>\n    <span class="hljs-variable">@articles</span> = Article.all\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>By convention, this controller will render the view in <code>views/articles/index.html.erb</code>. Basically, it’s a plain HTML file powered by Ruby.</p>\n<p>The Rails request-response cycle is one of the first concepts you need to understand when you start learning web development.</p>\n<p>The user does stuff (request to the server), the the Rails application has the router to map the URL path to the right controller. In the controller, we can do all things with a model (or more than one model) — meaning getting, saving, editing, deleting data — and render a view to the user.</p>\n<h3 id="thats-all">That’s all!</h3>\n<p>We learned a lot here. I hope you guys appreciate the content and learn more about how the MVC architecture and routing work on Rails.</p>\n<p>This is one more step forward in my journey to learning and mastering Rails and web development. You can see the documentation of my complete journey here on my <a href="https://medium.com/the-renaissance-developer">Renaissance Developer publication</a>.</p>\n<p>If you want a complete <a href="https://onemonth.com/courses/ruby?mbsy=lG6tt&amp;mbsy_source=97541b09-e3ab-45d7-a9b1-dbc77028e008&amp;campaignid=33446&amp;discount_code=TKRuby1">Ruby</a> and <a href="https://onemonth.com/courses/rails?mbsy=lG6tz&amp;mbsy_source=d2442db6-e764-401a-a394-a9c081468830&amp;discount_code=TKRuby1&amp;campaignid=33448">Rails</a> course, learn real-world coding skills and build projects, try <a href="https://onemonth.com/courses/ruby?mbsy=lG6tt&amp;mbsy_source=97541b09-e3ab-45d7-a9b1-dbc77028e008&amp;campaignid=33446&amp;discount_code=TKRuby1">One Month Ruby Bootcamp</a> and <a href="https://onemonth.com/courses/rails?mbsy=lG6tz&amp;mbsy_source=d2442db6-e764-401a-a394-a9c081468830&amp;discount_code=TKRuby1&amp;campaignid=33448">Rails Bootcamp</a>. See you there ☺</p>\n<p>Have fun, and keep learning and coding.</p>\n',
  },
  {
    title:
      'Understanding the basics of Ruby on Rails: SQL Databases and how they work',
    content:
      '<p>After <a href="https://medium.freecodecamp.org/learning-ruby-from-zero-to-hero-90ad4eecc82d">learning about Ruby</a>, the first step we took was to understand how the <a href="https://medium.com/the-renaissance-developer/ruby-on-rails-http-mvc-and-routes-f02215a46a84">web and the Ruby on Rails request-response cycle</a> work.</p>\n<p>Now it’s time to learn about databases and how they connect with Ruby on Rails. Basically, the answer is the Model: the <code>M</code> from <code>MVC</code> , as we learned <a href="https://medium.com/the-renaissance-developer/ruby-on-rails-http-mvc-and-routes-f02215a46a84">here</a>.</p>\n<p>Before learning web development with Rails, I really recommend learning about <a href="https://medium.freecodecamp.org/learning-ruby-from-zero-to-hero-90ad4eecc82d">Ruby first</a>.</p>\n<p>Let’s begin!</p>\n<h3 id="what-is-a-database">What is a database?</h3>\n<p>Hmmm… The first thought that comes to my mind is something that stores data.</p>\n<p>But this definition is quite imprecise! An array, a hash, a linked list, or any data structure can be something that is able to store data.</p>\n<p>When you turn off the computer, you lose all data values that were stored in that array (the same as all data structures). So it’s not a good idea to store all my <code>precious data</code>.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*p1Yw2imC4HhUPaEfssliXw.gif" alt=""></p>\n<p>We need to solve two problems here:</p>\n<ol>\n<li><p>Store data and get it anytime we want.</p>\n</li>\n<li><p>Store data in an organized and structured way, so we can get it easily.</p>\n</li>\n</ol>\n<p>Should I store all the data in a notepad? Just put all the information inside it separated by commas, save the <code>txt file</code>, and done. Now I can open it and get all the data I want. We can store data and get it anytime… problem solved!</p>\n<p>We solved this problem, but we missed the other. Now all the data is stored and we won’t lose it. But it’s not well-structured in the file. We need the rule to store and get data in an organized and well-structured form.</p>\n<p>Let’s think about how can we organize the data in a well-structured way.</p>\n<p><strong>What about organizing all the data in tables?</strong></p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*QzMTJf39jdsi_alIWlGxig.jpeg" alt=""></p>\n<p>So, here’s we have: the table’s header (columns name: First Name, Last Name, Address, etc) containing values that we’ll store. For example, if we want to store the <strong>string “Mickey”</strong> (the value), it’ll be stored in the <strong>“First Name”</strong> column.</p>\n<ul>\n<li><p><strong>Table</strong>: let’s say <strong>People</strong></p>\n</li>\n<li><p><strong>Columns</strong>: <strong>First name</strong>, <strong>Last Name</strong>, <strong>Address</strong>, etc</p>\n</li>\n<li><p><strong>Rows</strong>: in this case, we can say that a row can be a <strong>person</strong> with, for example, first name “Mickey” and last name “Mouse,” address “123 Fantasy Way,” etc.</p>\n</li>\n<li><p><strong>Fields</strong>: all data stored in the database.</p>\n</li>\n</ul>\n<p>And now we have a well-structured way to store data**: in a Table!**</p>\n<h3 id="how-about-get-delete-insert-and-update-data">How about get, delete, insert, and update data?</h3>\n<p>We’ll use SQL language (I’ll not mention NoSQL world!) to manipulate the data. Let’s get the basics.</p>\n<ol>\n<li><strong>GET:</strong> if we want to get all data (<strong>person</strong>) from <strong>People</strong> table, we need to select it from that table.</li>\n</ol>\n<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> People;\n</code></pre>\n<p>The (<strong>*)</strong> symbol means that it will select all columns from <strong>People</strong> table. If we can get all columns, we can specify which columns we need for this select.</p>\n<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> firstname, lastname, age <span class="hljs-keyword">FROM</span> People;\n</code></pre>\n<ol start="2">\n<li><strong>DELETE:</strong> we want to delete all data from our <strong>People</strong> table.</li>\n</ol>\n<pre><code class="hljs language-sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> People;\n</code></pre>\n<p>But it’s not common to delete all data from a table. We usually use a condition to delete, like “I want to delete all people under 21 years old.” We will learn how later in this post!</p>\n<ol start="3">\n<li><strong>INSERT:</strong> we will insert/store data into the table.</li>\n</ol>\n<pre><code class="hljs language-sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> People <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;Leandro&#x27;</span>, <span class="hljs-string">&#x27;Tk&#x27;</span>, <span class="hljs-string">&#x27;My Address 123&#x27;</span>, <span class="hljs-string">&#x27;São Paulo&#x27;</span>, <span class="hljs-number">23</span>);\n</code></pre>\n<p>or we can specify into which columns we want to insert data.</p>\n<pre><code class="hljs language-sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> People (firstname, lastname, age) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;Leandro&#x27;</span>, <span class="hljs-string">&#x27;Tk&#x27;</span>, <span class="hljs-number">23</span>);\n</code></pre>\n<ol start="4">\n<li><strong>UPDATE:</strong> we have stored the data, but we want to update it.</li>\n</ol>\n<pre><code class="hljs language-sql"><span class="hljs-keyword">UPDATE</span> People <span class="hljs-keyword">SET</span> firstname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Gennady&#x27;</span>, lastname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;korotkevich&#x27;</span>;\n</code></pre>\n<h3 id="using-conditions-in-our-queries">Using conditions in our queries</h3>\n<p>Now we can use SQL language to query (select, delete, insert, update) data.</p>\n<ul>\n<li><p>But what if we want to delete just records with the last name <strong>Kinoshita</strong>?</p>\n</li>\n<li><p>Or if we want to update a specific person with first name <strong>Leandro</strong>and last name <strong>Kinoshita</strong>?</p>\n</li>\n<li><p>Or just select all data from the people table and sort it by age from younger to older?</p>\n</li>\n</ul>\n<p>Yeah, we use conditions like <strong>where</strong>and **order by,**and operators like <strong>or</strong>and <strong>and</strong>. Let’s see some examples:</p>\n<ul>\n<li>Deleting all records from the people table with last name <strong>Kinoshita</strong>.</li>\n</ul>\n<pre><code class="hljs language-sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">From</span> People <span class="hljs-keyword">WHERE</span> lastname<span class="hljs-operator">=</span>&quot;Kinoshita&quot;;\n</code></pre>\n<ul>\n<li>Updating all records from the people table with first name <strong>Leandro</strong> and last name <strong>Kinoshita</strong>.</li>\n</ul>\n<pre><code class="hljs language-sql"><span class="hljs-keyword">UPDATE</span> People <span class="hljs-keyword">SET</span> firstname<span class="hljs-operator">=</span>&quot;Gennady&quot; <span class="hljs-keyword">WHERE</span> firstname<span class="hljs-operator">=</span>&quot;Leandro&quot; <span class="hljs-keyword">AND</span> lastname<span class="hljs-operator">=</span>&quot;Kinoshita&quot;;\n</code></pre>\n<ul>\n<li>Selecting all records from the people table but ordering them by age (in ascending order → ASC).</li>\n</ul>\n<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> People <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age;\n</code></pre>\n<h4 id="relationship-between-tables">Relationship between tables</h4>\n<p>We know how to execute queries (with or without conditions). Let’s understand how the tables’ relationships work.</p>\n<ul>\n<li><p><strong>One to One (1–1)</strong>: it’s about a relationship between two tables in which one can only belong with the other. <strong>e.g.</strong> A person has one passport and that passport belongs to that specific person. So in this example, we have table People, table Passports and a 1–1 relationship.</p>\n</li>\n<li><p><strong>One to Many (1-n)</strong>: it’s about a relationship between two tables in which a record from one table can reference many records from another. <strong>e.g.</strong> Imagine an e-commerce platform: users, orders, products, payments, etc. A user can have many orders, and each order belongs to that specific user. So in this example, we have table Users, table Orders, and a 1-n relationship.</p>\n</li>\n<li><p><strong>Many to Many (n-n)</strong>: it’s about a relationship between two tables in which a record from one table can reference many records from another. And a record from another can also reference many records from the one. <strong>e.g.</strong> We have again the e-commerce platform: we divide products into categories. A category has many products (category Technology has many products like cell phones, notebooks, etc) and a product can belong to many categories (product Cellphone belongs to the Technology and Electronics Categories). So in this example, we have table Products, table Categories, and an n-n relationship.</p>\n</li>\n</ul>\n<h3 id="rails-mode-on">Rails Mode ON</h3>\n<p>We now understand the meaning of databases, we’ve tried some basic queries, and have talked about the relationship between tables. But how can we use that knowledge in the <strong>Ruby on Rails and web development World</strong>?</p>\n<p>First of all: <strong>Rails</strong> is <strong>Rails</strong>. The <strong>Database</strong> is <strong>Database</strong>. Is it obvious? But people usually get confused about that.</p>\n<p>A User model <strong>can</strong> represent a Users table. But the model isn’t the table.</p>\n<ul>\n<li><p>In the <strong>database</strong>, we have tables and rows.</p>\n</li>\n<li><p>On <strong>rails</strong>, we have models (classes) and objects.</p>\n</li>\n</ul>\n<p>Imagine a blog site. The blog needs an author for each post. So we create an <strong>Authors</strong> table with some columns (first_name, last_name, etc):</p>\n<pre><code>rails g migration CreateAuthors\n</code></pre>\n<p>In the migration, we add columns <code>first_name</code>, <code>last_name</code>, <code>email</code>, <code>birthday</code>, <code>created_at</code>, and <code>updated_at</code>. (<code>created_at</code> and <code>updated_at</code> are created by the <code>t.timestamps</code> code).</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateAuthors</span> &lt; ActiveRecord::Migration[5.0]</span>\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change</span></span>\n    create_table <span class="hljs-symbol">:authors</span> <span class="hljs-keyword">do</span> <span class="hljs-params">|t|</span>\n      t.string <span class="hljs-symbol">:first_name</span>\n      t.string <span class="hljs-symbol">:last_name</span>\n      t.string <span class="hljs-symbol">:email</span>\n      t.date <span class="hljs-symbol">:birthday</span>\n      t.timestamps\n    <span class="hljs-keyword">end</span>\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>So we create a migration (Ruby code), run the <code>rake db:migrate</code> command in the terminal, and it generates a table <code>Authors</code> with <code>first_name</code>, <code>last_name</code>, <code>email</code>, <code>birthday</code>, <code>created_at</code>, and <code>updated_at</code> columns.</p>\n<p>Back to Rails — we can create an <code>Author</code> model:</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Author</span> &lt; ActiveRecord::Base</span>\n\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>So now we have an <code>Authors</code> table with some columns and an <code>Author</code> model.</p>\n<h4 id="using-the-rails-console">Using the Rails Console</h4>\n<p>Open the terminal and type <code>bundle exec rails c</code>. Remember, we are in the <strong>RAILS</strong> console, so we have classes, objects, attributes, etc.</p>\n<pre><code class="hljs language-ruby">author = Author.new\n=&gt; #&lt;Author id: nil, first_name: nil, last_name: nil&gt;\nauthor.first_name = <span class="hljs-string">&quot;Leandro&quot;</span>\n=&gt; <span class="hljs-string">&quot;Leandro&quot;</span>\nauthor.last_name = <span class="hljs-string">&quot;Tk&quot;</span>\n=&gt; <span class="hljs-string">&quot;Tk&quot;</span>\nauthor.save\n=&gt; #&lt;Author id: 1, first_name: &quot;Leandro&quot;, last_name: &quot;Tk&quot;&gt;\n</code></pre>\n<h3 id="relationships-on-rails">Relationships on Rails</h3>\n<p>We created an <code>Authors</code> table/model. What we need now is a <code>Posts</code> table/model. An author has many posts and a post belongs to a specific author. The relationship here is <strong>one to many</strong> (<strong>1-n</strong>). Remember?</p>\n<p>So when we create a <code>Posts</code> table, we need to store a reference to the post’s author (column <strong>author_id</strong> in the <strong>Posts</strong> table). It’s known as the <code>Foreign Key</code>.</p>\n<p>And how do we relate the models?</p>\n<h4 id="author-has_many-posts">author has_many posts</h4>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Author</span> &lt; ActiveRecord::Base</span>\n\n  has_many <span class="hljs-symbol">:posts</span>\n\n<span class="hljs-keyword">end</span>\n</code></pre>\n<h4 id="post-belongs_to-an-author">post belongs_to an author</h4>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> &lt; ActiveRecord::Base</span>\n\n  belongs_to <span class="hljs-symbol">:author</span>\n\n<span class="hljs-keyword">end</span>\n</code></pre>\n<h4 id="using-the-rails-console-1">Using the Rails Console</h4>\n<pre><code class="hljs language-ruby">author = Author.new\n=&gt; #&lt;Author id: nil, first_name: nil, last_name: nil&gt;\nauthor.first_name = <span class="hljs-string">&quot;Leandro&quot;</span>\n=&gt; <span class="hljs-string">&quot;Leandro&quot;</span>\nauthor.last_name = <span class="hljs-string">&quot;Tk&quot;</span>\n=&gt; <span class="hljs-string">&quot;Tk&quot;</span>\nauthor.save\n=&gt; #&lt;Author id: 1, first_name: &quot;Leandro&quot;, last_name: &quot;Tk&quot;&gt;\n\npost = Post.new(<span class="hljs-symbol">title:</span> <span class="hljs-string">&quot;Database &amp; Rails&quot;</span>, <span class="hljs-symbol">text:</span> <span class="hljs-string">&quot;Lorem Ipsum...&quot;</span>)\n=&gt; #&lt;Post id: 1, title: &quot;Database &amp; Rails&quot;, text: &quot;Lorem Ipsum...&quot;, author_id: nil&gt;\npost.author\n=&gt; nil\npost.author = author\n=&gt; #&lt;Author id: 1, first_name: &quot;Leandro&quot;, last_name: &quot;Tk&quot;&gt;\npost\n=&gt; #&lt;Post id: 1, title: &quot;Database &amp; Rails&quot;, text: &quot;Lorem Ipsum...&quot;, author_id: 1&gt;\npost.save\n=&gt; #&lt;Post id: 1, title: &quot;Database &amp; Rails&quot;, text: &quot;Lorem Ipsum...&quot;, author_id: 1&gt;\n</code></pre>\n<ul>\n<li>Quick explanation about <code>has_many</code> and <code>belongs_to</code>. Both <code>codes</code> are methods defined on <code>ActiveRecord</code> class. You can see that we create our models inheriting from <code>ActiveRecord::Base</code>.</li>\n</ul>\n<p>Remember in my <a href="https://medium.freecodecamp.org/learning-ruby-from-zero-to-hero-90ad4eecc82d">Ruby Foundation</a> article that we learned about Object Oriented Programming, the Inheritance part? This is why we can use <code>has_many</code> and <code>belongs_to</code> methods without defining it anywhere on our application. Rails handles it for us.</p>\n<p>If you want to understand this concept deeply, clone the <a href="https://github.com/rails/rails">Rails repo</a> or check out the <a href="http://callahan.io/blog/2014/10/08/behind-the-scenes-of-the-has-many-active-record-association/">Behind the Scenes of the ‘Has Many’ Active Record Association</a>.</p>\n<h3 id="queries-on-rails">Queries on Rails</h3>\n<p>We can query using ActiveRecord methods:</p>\n<ul>\n<li><strong>all</strong>: Get all objects from a specific model.</li>\n</ul>\n<pre><code class="hljs language-ruby">Post.all\n=&gt; [#&lt;Post id: 1, title: &quot;Database &amp; Rails&quot;, text: &quot;Lorem Ipsum...&quot;, author_id: 1&gt;]\n</code></pre>\n<p>Behind the scenes, it is executing the <code>SELECT * FROM posts</code> query.</p>\n<ul>\n<li><strong>find</strong>: Using find we can get the object by the id (primary key).</li>\n</ul>\n<pre><code class="hljs language-ruby">Post.find(<span class="hljs-number">1</span>)\n=&gt; #&lt;Post id: 1, title: &quot;Database &amp; Rails&quot;, text: &quot;Lorem Ipsum...&quot;, author_id: 1&gt;\n</code></pre>\n<p>Behind the scenes, it is executing <code>SELECT * FROM posts WHERE id = 1</code> query.</p>\n<ul>\n<li><strong>where</strong>: Get the objects that pass the conditions.</li>\n</ul>\n<pre><code class="hljs language-ruby">Post.where(<span class="hljs-symbol">title:</span> <span class="hljs-string">&quot;Database &amp; Rails&quot;</span>)\n=&gt; [#&lt;Post id: 1, title: &quot;Database &amp; Rails&quot;, text: &quot;Lorem Ipsum...&quot;, author_id: 1&gt;]\nPost.where(<span class="hljs-symbol">title:</span> <span class="hljs-string">&quot;Database &amp; Rails&quot;</span>).first\n=&gt; #&lt;Post id: 1, title: &quot;Database &amp; Rails&quot;, text: &quot;Lorem Ipsum...&quot;, author_id: 1&gt;\n</code></pre>\n<p>Behind the scenes, it is executing <code>SELECT * FROM posts WHERE title = &#39;Database &amp; Rails&#39;</code>query.</p>\n<ul>\n<li><strong>order</strong>: Sort all objects based on a column.</li>\n</ul>\n<pre><code class="hljs language-ruby">Post.all\n=&gt; [#&lt;Post id: 1, title: &quot;Database &amp; Rails&quot;, text: &quot;Lorem Ipsum...&quot;, created_at: &quot;2015-10-13 20:00:00&quot;, author_id: 1&gt;, #&lt;Post id: 2, title: &quot;Ruby on Rails: HTTP, MVC and Routes&quot;, text: &quot;Lorem Ipsum2...&quot;, created_at: &quot;2015-10-13 21:00:00&quot;, author_id: 1&gt;]\nPost.order(<span class="hljs-string">&quot;created_at DESC&quot;</span>)\n=&gt; [#&lt;Post id: 2, title: &quot;Ruby on Rails: HTTP, MVC and Routes&quot;, text: &quot;Lorem Ipsum2...&quot;, created_at: &quot;2015-10-13 20:00:00&quot;, author_id: 1&gt;, #&lt;Post id: 1, title: &quot;Database &amp; Rails&quot;, text: &quot;Lorem Ipsum...&quot;, created_at: &quot;2015-10-13 21:00:00&quot;, author_id: 1&gt;]\n</code></pre>\n<p>Behind the scenes, it is executing <code>SELECT * FROM posts ORDER BY created_at DESC</code> query.</p>\n<h3 id="thats-all">That’s all!</h3>\n<p>We learned a lot here. I hope you guys appreciate the content and learn more about how the Databases and Rails models work.</p>\n<p>This is one more step forward in my journey to learning and mastering Rails and web development. You can see the documentation of my complete journey here on my <a href="https://medium.com/the-renaissance-developer">Renaissance Developer publication</a>.</p>\n<p>If you want a complete <a href="https://onemonth.com/courses/ruby?mbsy=lG6tt&amp;mbsy_source=97541b09-e3ab-45d7-a9b1-dbc77028e008&amp;campaignid=33446&amp;discount_code=TKRuby1">Ruby</a> and <a href="https://onemonth.com/courses/rails?mbsy=lG6tz&amp;mbsy_source=d2442db6-e764-401a-a394-a9c081468830&amp;discount_code=TKRuby1&amp;campaignid=33448">Rails</a> course, learn real-world coding skills and build projects, try <a href="https://onemonth.com/courses/ruby?mbsy=lG6tt&amp;mbsy_source=97541b09-e3ab-45d7-a9b1-dbc77028e008&amp;campaignid=33446&amp;discount_code=TKRuby1">One Month Ruby Bootcamp</a> and <a href="https://onemonth.com/courses/rails?mbsy=lG6tz&amp;mbsy_source=d2442db6-e764-401a-a394-a9c081468830&amp;discount_code=TKRuby1&amp;campaignid=33448">Rails Bootcamp</a>. See you there ☺</p>\n<p>Have fun, and keep learning and coding.</p>\n',
  },
  {
    title: 'UX Studies with React, TypeScript, and Testing Library',
    content:
      '<p>I&#39;m always willing to learn more and more. As a software engineer, the thirst for knowledge increased a lot. We have a lot of things to learn daily. But I wanted to master the foundation. To make me a better developer, I wanted to understand more about how to create great product experiences.</p>\n<p>This post is my attempt to illustrate a Proof of Concept (PoC) I built to try some ideas as experiments.</p>\n<p>I had some topics in mind to build this. It needs to strive for:</p>\n<ul>\n<li>High-quality software</li>\n<li>User Experience</li>\n</ul>\n<p>When I say high-quality software, it can have so many different meanings. But I want to focus on three parts:</p>\n<ul>\n<li>Clean Code: Strive to write human-readable code, that is easy to read and simple to maintain. Separate responsibility for functions and components.</li>\n<li>Good test coverage: It&#39;s actually not about coverage. It&#39;s about tests that cover important parts of components&#39; behavior without knowing too much about implementation details.</li>\n<li>Consistent state management: I want to build with software that enables the app to have consistent data. Predictability is important.</li>\n</ul>\n<p>And user experience is the main focus of this PoC. The software and techniques are the foundation to enable good experience for users.</p>\n<p>To make the state consistent, I wanted a type system. So I chose Typescript. This was the first time I&#39;m using Typescript with React. This project also allowed me to build custom hooks and test it properly.</p>\n<h2 id="setting-up-the-project">Setting up the project</h2>\n<p>I came across this library called <a href="https://github.com/jaredpalmer/tsdx">tsdx</a> that sets up all the Typescript configuration for you. It&#39;s mainly used to build packages. As this was a simple side project, I didn&#39;t mind giving it a try.</p>\n<p>After installing it, I chose the react template and I was ready to code. But before the fun part, I wanted to set up the test configuration too. <a href="https://github.com/testing-library/react-testing-library">React Testing Library</a> as the main library together with <a href="https://github.com/testing-library/jest-dom">jest-dom</a> to provide some awesome custom methods (I really like the <code>toBeInTheDocument</code> matcher).</p>\n<p>With all installed, I overwrote the jest config by adding a new <code>jest.config.js</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {\n  <span class="hljs-attr">verbose</span>: <span class="hljs-literal">true</span>,\n  <span class="hljs-attr">setupFilesAfterEnv</span>: [<span class="hljs-string">&#x27;./setupTests.ts&#x27;</span>],\n};\n</code></pre>\n<p>And a <code>setupTests.ts</code> to import everything I need.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@testing-library/jest-dom&#x27;</span>;\n</code></pre>\n<p>In this case, I just had the <code>jest-dom</code> library to import. This way, I don&#39;t need to import this package in my test files. Now it works out of the box.</p>\n<p>To test this installation and configuration, I built a simple component:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Thing</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>I&#x27;m TK<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;\n</code></pre>\n<p>In my test, I wanted to render it and see if it was in the DOM.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { render } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@testing-library/react&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Thing</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../index&#x27;</span>;\n\n<span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Thing&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the correct text in the document&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> { getByText } = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Thing</span> /&gt;</span></span>);\n\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&quot;I&#x27;m TK&quot;</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<p>And we are ready for the next step now!</p>\n<h2 id="configuring-routes">Configuring routes</h2>\n<p>Here I&#39;ll have only two routes for now. The home page and the search page - even though I&#39;ll do nothing about the home page.</p>\n<p>For this project, I&#39;m using the <code>react-router-dom</code> library to handle all things router. It&#39;s simple, easy, and fun to work with.</p>\n<p>After installing it, I added the router components in the <code>app.tsx</code>.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">BrowserRouter</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Router</span>, <span class="hljs-title class_">Switch</span>, <span class="hljs-title class_">Route</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/search&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>It&#x27;s the search!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>It&#x27;s Home<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">Router</span>&gt;</span></span>\n);\n</code></pre>\n<p>Now if we enter the <code>localhost:1234</code>, we see the title <code>It&#39;s Home</code>. Go to the <code>localhost:1234/search</code>, we see the text <code>It&#39;s the search!</code>.</p>\n<p>Before we continue to start implementing our search page, I wanted to build a simple menu to switch between home and search pages without manipulating the URL. For this project, I&#39;m using <a href="https://material-ui.com/">Material UI</a> to build the UI foundation.</p>\n<p>For now, we are just installing the <code>@material-ui/core</code>.</p>\n<p>To build the menu, we have the button to open the menu options. In this case &quot;home&quot; and &quot;search&quot; options. But to build a better component abstraction, I prefer to hide the content (link and label) for the menu items and make the <code>Menu</code> component receive this data as a prop. This way, the menu doesn&#39;t know about the items, it will just iterate through the items list and render them.</p>\n<p>It looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { <span class="hljs-title class_">Fragment</span>, useState, <span class="hljs-title class_">MouseEvent</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Link</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@material-ui/core/Button&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">MuiMenu</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@material-ui/core/Menu&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">MuiMenuItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@material-ui/core/MenuItem&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MenuItem</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types/MenuItem&#x27;</span>;\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">MenuPropsType</span> = { <span class="hljs-attr">menuItems</span>: <span class="hljs-title class_">MenuItem</span>[] };\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Menu</span> = (<span class="hljs-params">{ menuItems }: MenuPropsType</span>) =&gt; {\n  <span class="hljs-keyword">const</span> [anchorEl, setAnchorEl] = useState&lt;<span class="hljs-literal">null</span> | <span class="hljs-title class_">HTMLElement</span>&gt;(<span class="hljs-literal">null</span>);\n\n  <span class="hljs-keyword">const</span> handleClick = (<span class="hljs-attr">event</span>: <span class="hljs-title class_">MouseEvent</span>&lt;<span class="hljs-title class_">HTMLButtonElement</span>&gt;): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> {\n    <span class="hljs-title function_">setAnchorEl</span>(event.<span class="hljs-property">currentTarget</span>);\n  };\n\n  <span class="hljs-keyword">const</span> handleClose = (): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> {\n    <span class="hljs-title function_">setAnchorEl</span>(<span class="hljs-literal">null</span>);\n  };\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">aria-controls</span>=<span class="hljs-string">&quot;menu&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{handleClick}</span>&gt;</span>\n        Open Menu\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">MuiMenu</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;simple-menu&quot;</span>\n        <span class="hljs-attr">anchorEl</span>=<span class="hljs-string">{anchorEl}</span>\n        <span class="hljs-attr">keepMounted</span>\n        <span class="hljs-attr">open</span>=<span class="hljs-string">{Boolean(anchorEl)}</span>\n        <span class="hljs-attr">onClose</span>=<span class="hljs-string">{handleClose}</span>\n      &gt;</span>\n        {menuItems.map((item: MenuItem) =&gt; (\n          <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">{item.linkTo}</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{handleClose}</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{item.key}</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">MuiMenuItem</span>&gt;</span>{item.label}<span class="hljs-tag">&lt;/<span class="hljs-name">MuiMenuItem</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>\n        ))}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">MuiMenu</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Fragment</span>&gt;</span></span>\n  );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Menu</span>;\n</code></pre>\n<p>Don&#39;t panic! I know it is a huge block of code, but it is pretty simple. the <code>Fragment</code> wrap the <code>Button</code> and <code>MuiMenu</code> (<code>Mui</code> stands for Material UI. I needed to rename the component because the component I&#39;m building is also called menu).</p>\n<p>It receives the <code>menuItems</code> as a prop and maps through it to build the menu item wrapped by the <code>Link</code> component. Link is a component from react-router to link to a given URL.</p>\n<p>The menu behavior is also simple: we bind the <code>handleClick</code> function to the button&#39;s <code>onClick</code>. That way, we can change <code>anchorEl</code> when the button is triggered (or clicked if you prefer). The <code>anchorEl</code> is just a component state that represents the Mui menu element to open the menu switch. So it will open the menu items to let the user chooses one of those.</p>\n<p>Now, how do we use this component?</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Menu</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Menu&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MenuItem</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./types/MenuItem&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">menuItems</span>: <span class="hljs-title class_">MenuItem</span>[] = [\n  {\n    <span class="hljs-attr">linkTo</span>: <span class="hljs-string">&#x27;/&#x27;</span>,\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,\n    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;link-to-home&#x27;</span>,\n  },\n  {\n    <span class="hljs-attr">linkTo</span>: <span class="hljs-string">&#x27;/search&#x27;</span>,\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Search&#x27;</span>,\n    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;link-to-search&#x27;</span>,\n  },\n];\n\n<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Menu</span> <span class="hljs-attr">menuItems</span>=<span class="hljs-string">{menuItems}</span> /&gt;</span></span>;\n</code></pre>\n<p>The <code>menuItems</code> is a list of objects. The object has the correct contract expected by the <code>Menu</code> component. The type <code>MenuItem</code> ensures that the contract is correct. It is just a Typescript <code>type</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">MenuItem</span> = {\n  <span class="hljs-attr">linkTo</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">label</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<h2 id="search">Search</h2>\n<p>Now we are ready to build the search page with all the products and a great experience. But before building the list of products, I wanted to create a fetch function to handle the request for products. As I don&#39;t have an API of products yet, I can just mock the fetch request.</p>\n<p>At first, I just built the fetching with <code>useEffect</code> in the <code>Search</code> component. The idea would look like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState, useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> { getProducts } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;api&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Search</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">const</span> [products, setProducts] = <span class="hljs-title function_">useState</span>([]);\n  <span class="hljs-keyword">const</span> [isLoading, setIsLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);\n  <span class="hljs-keyword">const</span> [hasError, setHasError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);\n\n  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> fetchProducts = <span class="hljs-keyword">async</span> () =&gt; {\n      <span class="hljs-keyword">try</span> {\n        <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">true</span>);\n\n        <span class="hljs-keyword">const</span> fetchedProducts = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getProducts</span>();\n\n        <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">false</span>);\n        <span class="hljs-title function_">setProducts</span>(fetchedProducts);\n      } <span class="hljs-keyword">catch</span> (error) {\n        <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">false</span>);\n        <span class="hljs-title function_">setHasError</span>(<span class="hljs-literal">true</span>);\n      }\n    };\n\n    <span class="hljs-title function_">fetchProducts</span>();\n  }, []);\n};\n</code></pre>\n<p>I have:</p>\n<ul>\n<li><code>products</code> initialized as an empty array</li>\n<li><code>isLoading</code> initialized as false</li>\n<li><code>hasError</code> initialized as false</li>\n<li>The <code>fetchProducts</code> is an async function that calls <code>getProducts</code> from the <code>api</code> module. As we don&#39;t have a proper API for products yet, this <code>getProducts</code> would return a mock data.</li>\n<li>When the <code>fetchProducts</code> is executed, we set the <code>isLoading</code> to true, fetch the products, and then set the <code>isLoading</code> to false, because the fetching finished, and the set the fetched products into <code>products</code> to be used in the component.</li>\n<li>If it gets any error in the fetching, we catch them, set the <code>isLoading</code> to false, and the <code>hasError</code> to true. In this context, the component will know that we had an error while fetching and can handle this case.</li>\n<li>Everything is encapsulated into a <code>useEffect</code> because we are doing a side effect here.</li>\n</ul>\n<p>To handle all the state logic (when to update each part for the specific context), we can extract it to a simple reducer.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">State</span>, <span class="hljs-title class_">FetchActionType</span>, <span class="hljs-title class_">FetchAction</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./types&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> fetchReducer = (<span class="hljs-attr">state</span>: <span class="hljs-title class_">State</span>, <span class="hljs-attr">action</span>: <span class="hljs-title class_">FetchAction</span>): <span class="hljs-function"><span class="hljs-params">State</span> =&gt;</span> {\n  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {\n    <span class="hljs-keyword">case</span> <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_INIT</span>:\n      <span class="hljs-keyword">return</span> {\n        ...state,\n        <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span>,\n      };\n    <span class="hljs-keyword">case</span> <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_SUCCESS</span>:\n      <span class="hljs-keyword">return</span> {\n        ...state,\n        <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">data</span>: action.<span class="hljs-property">payload</span>,\n      };\n    <span class="hljs-keyword">case</span> <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_ERROR</span>:\n      <span class="hljs-keyword">return</span> {\n        ...state,\n        <span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,\n      };\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> state;\n  }\n};\n</code></pre>\n<p>The idea here is to separate each action type and handle each state update. So the <code>fetchReducer</code> will receive the state and the action and it will return a new state. This part is interesting because it gets the current state and then returns a new state, but we keep the state contract by using the <code>State</code> type.</p>\n<p>And for each action type, we will update the state the right way.</p>\n<ul>\n<li><code>FETCH_INIT</code>: <code>isLoading</code> is true and <code>hasError</code> is false.</li>\n<li><code>FETCH_SUCCESS</code>: <code>hasError</code> is false, <code>isLoading</code> is false, and the data (products) is updated.</li>\n<li><code>FETCH_ERROR</code>: <code>hasError</code> is true and <code>isLoading</code> is false.</li>\n</ul>\n<p>In case it doesn&#39;t match any action type, just return the current state.</p>\n<p>The <code>FetchActionType</code> is a simple Typescript enum:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-built_in">enum</span> <span class="hljs-title class_">FetchActionType</span> {\n  <span class="hljs-variable constant_">FETCH_INIT</span> = <span class="hljs-string">&#x27;FETCH_INIT&#x27;</span>,\n  <span class="hljs-variable constant_">FETCH_SUCCESS</span> = <span class="hljs-string">&#x27;FETCH_SUCCESS&#x27;</span>,\n  <span class="hljs-variable constant_">FETCH_ERROR</span> = <span class="hljs-string">&#x27;FETCH_ERROR&#x27;</span>,\n}\n</code></pre>\n<p>And the <code>State</code> is just a simple type:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">ProductType</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">imageUrl</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">description</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">isShippingFree</span>: <span class="hljs-built_in">boolean</span>;\n  <span class="hljs-attr">discount</span>: <span class="hljs-built_in">number</span>;\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">Data</span> = <span class="hljs-title class_">ProductType</span>[];\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">State</span> = {\n  <span class="hljs-attr">isLoading</span>: <span class="hljs-built_in">boolean</span>;\n  <span class="hljs-attr">hasError</span>: <span class="hljs-built_in">boolean</span>;\n  <span class="hljs-attr">data</span>: <span class="hljs-title class_">Data</span>;\n};\n</code></pre>\n<p>With this new reducer, now we can <code>useReducer</code> in our fetch. We pass the new reducer and the initial state to it:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">initialState</span>: <span class="hljs-title class_">State</span> = {\n  <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,\n  <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span>,\n  <span class="hljs-attr">data</span>: fakeData,\n};\n\n<span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(fetchReducer, initialState);\n\n<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">const</span> fetchAPI = <span class="hljs-keyword">async</span> () =&gt; {\n    <span class="hljs-title function_">dispatch</span>({ <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_INIT</span> });\n\n    <span class="hljs-keyword">try</span> {\n      <span class="hljs-keyword">const</span> payload = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetchProducts</span>();\n\n      <span class="hljs-title function_">dispatch</span>({\n        <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_SUCCESS</span>,\n        payload,\n      });\n    } <span class="hljs-keyword">catch</span> (error) {\n      <span class="hljs-title function_">dispatch</span>({ <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_ERROR</span> });\n    }\n  };\n\n  <span class="hljs-title function_">fetchAPI</span>();\n}, []);\n</code></pre>\n<p>The <code>initialState</code> has the same contract type. And we pass it to the <code>useReducer</code> together with the <code>fetchReducer</code> we just built. The <code>useReducer</code> provides the state and a function called <code>dispatch</code> to call actions to update our state.</p>\n<ul>\n<li>State fetching: dispatch <code>FETCH_INIT</code></li>\n<li>Finished fetch: dispatch <code>FETCH_SUCCESS</code> with the products payload</li>\n<li>Get an error while fetching: dispatch <code>FETCH_ERROR</code></li>\n</ul>\n<p>This abstraction got very big and can be very verbose in our component. We could extract it as a separate hook called <code>useProductFetchAPI</code>.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useProductFetchAPI = (): <span class="hljs-function"><span class="hljs-params">State</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">initialState</span>: <span class="hljs-title class_">State</span> = {\n    <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,\n    <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span>,\n    <span class="hljs-attr">data</span>: fakeData,\n  };\n\n  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(fetchReducer, initialState);\n\n  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> fetchAPI = <span class="hljs-keyword">async</span> () =&gt; {\n      <span class="hljs-title function_">dispatch</span>({ <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_INIT</span> });\n\n      <span class="hljs-keyword">try</span> {\n        <span class="hljs-keyword">const</span> payload = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetchProducts</span>();\n\n        <span class="hljs-title function_">dispatch</span>({\n          <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_SUCCESS</span>,\n          payload,\n        });\n      } <span class="hljs-keyword">catch</span> (error) {\n        <span class="hljs-title function_">dispatch</span>({ <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_ERROR</span> });\n      }\n    };\n\n    <span class="hljs-title function_">fetchAPI</span>();\n  }, []);\n\n  <span class="hljs-keyword">return</span> state;\n};\n</code></pre>\n<p>It is just a function that wraps our fetch operation. Now, in the <code>Search</code> component, we can import and call it.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Search</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">const</span> { isLoading, hasError, data }: <span class="hljs-title class_">State</span> = <span class="hljs-title function_">useProductFetchAPI</span>();\n};\n</code></pre>\n<p>We have all the API: <code>isLoading</code>, <code>hasError</code>, and <code>data</code> to use in our component. With this API, we can render a loading spinner or a skeleton based on the <code>isLoading</code> data. We can render an error message based on the <code>hasError</code> value. Or just render the list of products using the <code>data</code>.</p>\n<p>Before starting implementing our products list, I want to stop and add tests for our custom hook. We have two parts to test here: the reducer and the custom hook.</p>\n<p>The reducer is easier as it is just a pure function. It receives value, process, and returns a new value. No side-effect. Everything deterministic.</p>\n<p>To cover all the possibilities of this reducer, I created three contexts: <code>FETCH_INIT</code>, <code>FETCH_SUCCESS</code>, and <code>FETCH_ERROR</code> actions.</p>\n<p>Before implementing anything, I set up the initial data to work with.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">initialData</span>: <span class="hljs-title class_">Data</span> = [];\n<span class="hljs-keyword">const</span> <span class="hljs-attr">initialState</span>: <span class="hljs-title class_">State</span> = {\n  <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,\n  <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span>,\n  <span class="hljs-attr">data</span>: initialData,\n};\n</code></pre>\n<p>Now I can pass this initial state for the reducer together with the specific action I want to cover. For this first test, I wanted to cover the <code>FETCH_INIT</code> action:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;when dispatch FETCH_INIT action&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns the isLoading as true without any error&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> <span class="hljs-attr">action</span>: <span class="hljs-title class_">FetchAction</span> = {\n      <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_INIT</span>,\n    };\n\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">fetchReducer</span>(initialState, action)).<span class="hljs-title function_">toEqual</span>({\n      <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">true</span>,\n      <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span>,\n      <span class="hljs-attr">data</span>: initialData,\n    });\n  });\n});\n</code></pre>\n<p>It&#39;s pretty simple. It receives the initial state and the action, and we expect the proper return value: the new state with the <code>isLoading</code> as <code>true</code>.</p>\n<p>The <code>FETCH_ERROR</code> is pretty similar:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;when dispatch FETCH_ERROR action&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns the isLoading as true without any error&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> <span class="hljs-attr">action</span>: <span class="hljs-title class_">FetchAction</span> = {\n      <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_ERROR</span>,\n    };\n\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">fetchReducer</span>(initialState, action)).<span class="hljs-title function_">toEqual</span>({\n      <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,\n      <span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span>,\n      <span class="hljs-attr">data</span>: [],\n    });\n  });\n});\n</code></pre>\n<p>But we pass a different action and expect the <code>hasError</code> to be <code>true</code>.</p>\n<p>The <code>FETCH_SUCCESS</code> is a bit complex as we just need to build a new state and add it to the payload attribute in the action.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;when dispatch FETCH_SUCCESS action&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns the the API data&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> <span class="hljs-attr">product</span>: <span class="hljs-title class_">ProductType</span> = {\n      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;iPhone&#x27;</span>,\n      <span class="hljs-attr">price</span>: <span class="hljs-number">3500</span>,\n      <span class="hljs-attr">imageUrl</span>: <span class="hljs-string">&#x27;image-url.png&#x27;</span>,\n      <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;Apple mobile phone&#x27;</span>,\n      <span class="hljs-attr">isShippingFree</span>: <span class="hljs-literal">true</span>,\n      <span class="hljs-attr">discount</span>: <span class="hljs-number">0</span>,\n    };\n\n    <span class="hljs-keyword">const</span> <span class="hljs-attr">action</span>: <span class="hljs-title class_">FetchAction</span> = {\n      <span class="hljs-attr">type</span>: <span class="hljs-title class_">FetchActionType</span>.<span class="hljs-property">FETCH_SUCCESS</span>,\n      <span class="hljs-attr">payload</span>: [product],\n    };\n\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">fetchReducer</span>(initialState, action)).<span class="hljs-title function_">toEqual</span>({\n      <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,\n      <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span>,\n      <span class="hljs-attr">data</span>: [product],\n    });\n  });\n});\n</code></pre>\n<p>But nothing too complex here. The new data is there. A list of products. In this case, just one, the iPhone product.</p>\n<p>The second test will cover the custom hook we built. In these tests, I wrote three contexts: a time-out request, a failed network request, and a success request.</p>\n<p>Here, as I&#39;m using <code>axios</code> to fetch data (when I have an API to fetch the data, I will use it properly), I&#39;m using <code>axios-mock-adapter</code> to mock each context for our tests.</p>\n<p>The set up first: Initializing our data and set up an axios mock.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">mock</span>: <span class="hljs-title class_">MockAdapter</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockAdapter</span>(axios);\n<span class="hljs-keyword">const</span> <span class="hljs-attr">url</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;/search&#x27;</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-attr">initialData</span>: <span class="hljs-title class_">Data</span> = [];\n</code></pre>\n<p>We start implementing a test for the timeout request:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;handles error on timed-out api request&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n  mock.<span class="hljs-title function_">onGet</span>(url).<span class="hljs-title function_">timeout</span>();\n\n  <span class="hljs-keyword">const</span> { result, waitForNextUpdate } = <span class="hljs-title function_">renderHook</span>(<span class="hljs-function">() =&gt;</span>\n    <span class="hljs-title function_">useProductFetchAPI</span>(url, initialData),\n  );\n\n  <span class="hljs-keyword">await</span> <span class="hljs-title function_">waitForNextUpdate</span>();\n\n  <span class="hljs-keyword">const</span> { isLoading, hasError, data }: <span class="hljs-title class_">State</span> = result.<span class="hljs-property">current</span>;\n\n  <span class="hljs-title function_">expect</span>(isLoading).<span class="hljs-title function_">toEqual</span>(<span class="hljs-literal">false</span>);\n  <span class="hljs-title function_">expect</span>(hasError).<span class="hljs-title function_">toEqual</span>(<span class="hljs-literal">true</span>);\n  <span class="hljs-title function_">expect</span>(data).<span class="hljs-title function_">toEqual</span>(initialData);\n});\n</code></pre>\n<p>We set up the mock to return a timeout. The test calls the <code>useProductFetchAPI</code>, wait for an update, and then we can get the state. The <code>isLoading</code> is false, the <code>data</code> is still the same (an empty list), and the <code>hasError</code> is now true as expected.</p>\n<p>The network request is pretty much the same behavior. The only difference is that the mock will have a network error instead of a timeout.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;handles error on failed network api request&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n  mock.<span class="hljs-title function_">onGet</span>(url).<span class="hljs-title function_">networkError</span>();\n\n  <span class="hljs-keyword">const</span> { result, waitForNextUpdate } = <span class="hljs-title function_">renderHook</span>(<span class="hljs-function">() =&gt;</span>\n    <span class="hljs-title function_">useFetchAPI</span>(url, initialData),\n  );\n\n  <span class="hljs-keyword">await</span> <span class="hljs-title function_">waitForNextUpdate</span>();\n\n  <span class="hljs-keyword">const</span> { isLoading, hasError, data }: <span class="hljs-title class_">State</span> = result.<span class="hljs-property">current</span>;\n\n  <span class="hljs-title function_">expect</span>(isLoading).<span class="hljs-title function_">toEqual</span>(<span class="hljs-literal">false</span>);\n  <span class="hljs-title function_">expect</span>(hasError).<span class="hljs-title function_">toEqual</span>(<span class="hljs-literal">true</span>);\n  <span class="hljs-title function_">expect</span>(data).<span class="hljs-title function_">toEqual</span>(initialData);\n});\n</code></pre>\n<p>And for the success case, we need to create a product object to use it as a request-response data. We also expect the <code>data</code> to be a list of this product object. The <code>hasError</code> and the <code>isLoading</code> are false in this case.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;gets and updates data from the api request&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">product</span>: <span class="hljs-title class_">ProductType</span> = {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;iPhone&#x27;</span>,\n    <span class="hljs-attr">price</span>: <span class="hljs-number">3500</span>,\n    <span class="hljs-attr">imageUrl</span>: <span class="hljs-string">&#x27;image-url.png&#x27;</span>,\n    <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;Apple mobile phone&#x27;</span>,\n    <span class="hljs-attr">isShippingFree</span>: <span class="hljs-literal">true</span>,\n    <span class="hljs-attr">discount</span>: <span class="hljs-number">0</span>,\n  };\n\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">mockedResponseData</span>: <span class="hljs-title class_">Data</span> = [product];\n\n  mock.<span class="hljs-title function_">onGet</span>(url).<span class="hljs-title function_">reply</span>(<span class="hljs-number">200</span>, mockedResponseData);\n\n  <span class="hljs-keyword">const</span> { result, waitForNextUpdate } = <span class="hljs-title function_">renderHook</span>(<span class="hljs-function">() =&gt;</span>\n    <span class="hljs-title function_">useFetchAPI</span>(url, initialData),\n  );\n\n  <span class="hljs-keyword">await</span> <span class="hljs-title function_">waitForNextUpdate</span>();\n\n  <span class="hljs-keyword">const</span> { isLoading, hasError, data }: <span class="hljs-title class_">State</span> = result.<span class="hljs-property">current</span>;\n\n  <span class="hljs-title function_">expect</span>(isLoading).<span class="hljs-title function_">toEqual</span>(<span class="hljs-literal">false</span>);\n  <span class="hljs-title function_">expect</span>(hasError).<span class="hljs-title function_">toEqual</span>(<span class="hljs-literal">false</span>);\n  <span class="hljs-title function_">expect</span>(data).<span class="hljs-title function_">toEqual</span>([product]);\n});\n</code></pre>\n<p>Great. We covered everything we needed for this custom hook and the reducer we created. Now we can focus on building the products list.</p>\n<h2 id="products-list">Products list</h2>\n<p>The idea of the products list is to list products that have some information: title, description, price, discount, and if it has free shipping. The final product card would look like this:</p>\n<img src="/ux-studies-with-react-typescript-and-testing-library/product-card.png">\n\n<p>To build this card, I created the foundation for the product component:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Product</span> = (<span class="hljs-params"></span>) =&gt; (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Box</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">TitleDescription</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Price</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Tag</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span></span>\n);\n</code></pre>\n<p>To build the product, we will need to build each component that is inside it.</p>\n<p>But before start building the product component, I want to show the <code>JSON</code> data that the fake API will return for us.</p>\n<pre><code class="hljs language-tsx">{\n  <span class="hljs-attr">imageUrl</span>: <span class="hljs-string">&#x27;a-url-for-tokyo-tower.png&#x27;</span>,\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Tokyo Tower&#x27;</span>,\n  <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;Some description here&#x27;</span>,\n  <span class="hljs-attr">price</span>: <span class="hljs-number">45</span>,\n  <span class="hljs-attr">discount</span>: <span class="hljs-number">20</span>,\n  <span class="hljs-attr">isShippingFree</span>: <span class="hljs-literal">true</span>,\n}\n</code></pre>\n<p>This data is passed from the <code>Search</code> component to the <code>ProductList</code> component:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Search</span> = (<span class="hljs-params"></span>) =&gt; {\n  <span class="hljs-keyword">const</span> { isLoading, hasError, data }: <span class="hljs-title class_">State</span> = <span class="hljs-title function_">useProductFetchAPI</span>();\n\n  <span class="hljs-keyword">if</span> (hasError) {\n    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Error<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;\n  }\n\n  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ProductList</span> <span class="hljs-attr">products</span>=<span class="hljs-string">{data}</span> <span class="hljs-attr">isLoading</span>=<span class="hljs-string">{isLoading}</span> /&gt;</span></span>;\n};\n</code></pre>\n<p>As I&#39;m using Typescript, I can enforce the static types for the component props. In this case, I have the prop <code>products</code> and the <code>isLoading</code>.</p>\n<p>I built a <code>ProductListPropsType</code> type to handle the product list props.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ProductListPropsType</span> = {\n  <span class="hljs-attr">products</span>: <span class="hljs-title class_">ProductType</span>[];\n  <span class="hljs-attr">isLoading</span>: <span class="hljs-built_in">boolean</span>;\n};\n</code></pre>\n<p>And the <code>ProductType</code> is a simple type representing the product:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">ProductType</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">imageUrl</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">description</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">isShippingFree</span>: <span class="hljs-built_in">boolean</span>;\n  <span class="hljs-attr">discount</span>: <span class="hljs-built_in">number</span>;\n};\n</code></pre>\n<p>To build the ProductList, I&#39;ll use the <code>Grid</code> component from Material UI. First, we have a grid container and then, for each product, we will render a grid item.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">ProductList</span> = (<span class="hljs-params">{ products, isLoading }: ProductListPropsType</span>) =&gt; (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Grid</span> <span class="hljs-attr">container</span> <span class="hljs-attr">spacing</span>=<span class="hljs-string">{3}</span>&gt;</span>\n    {products.map((product) =&gt; (\n      <span class="hljs-tag">&lt;<span class="hljs-name">Grid</span>\n        <span class="hljs-attr">item</span>\n        <span class="hljs-attr">xs</span>=<span class="hljs-string">{6}</span>\n        <span class="hljs-attr">md</span>=<span class="hljs-string">{3}</span>\n        <span class="hljs-attr">key</span>=<span class="hljs-string">{</span>`<span class="hljs-attr">grid-</span>${<span class="hljs-attr">product.name</span>}<span class="hljs-attr">-</span>${<span class="hljs-attr">product.description</span>}<span class="hljs-attr">-</span>${<span class="hljs-attr">product.price</span>}`}\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Product</span>\n          <span class="hljs-attr">key</span>=<span class="hljs-string">{</span>`<span class="hljs-attr">product-</span>${<span class="hljs-attr">product.name</span>}<span class="hljs-attr">-</span>${<span class="hljs-attr">product.description</span>}<span class="hljs-attr">-</span>${<span class="hljs-attr">product.price</span>}`}\n          <span class="hljs-attr">imageUrl</span>=<span class="hljs-string">{product.imageUrl}</span>\n          <span class="hljs-attr">name</span>=<span class="hljs-string">{product.name}</span>\n          <span class="hljs-attr">description</span>=<span class="hljs-string">{product.description}</span>\n          <span class="hljs-attr">price</span>=<span class="hljs-string">{product.price}</span>\n          <span class="hljs-attr">discount</span>=<span class="hljs-string">{product.discount}</span>\n          <span class="hljs-attr">isShippingFree</span>=<span class="hljs-string">{product.isShippingFree}</span>\n          <span class="hljs-attr">isLoading</span>=<span class="hljs-string">{isLoading}</span>\n        /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Grid</span>&gt;</span>\n    ))}\n  <span class="hljs-tag">&lt;/<span class="hljs-name">Grid</span>&gt;</span></span>\n);\n</code></pre>\n<p>The <code>Grid</code> item will display 2 items per row for mobile as we use the value <code>6</code> for each column. And for the desktop version, it will render 4 items per row.</p>\n<p>We iterate through the <code>products</code> list and render the <code>Product</code> component passing all the data it will need.</p>\n<p>Now we can focus on building the <code>Product</code> component.</p>\n<p>Let&#39;s start with the easiest one: the <code>Tag</code>. We will pass three data to this component. <code>label</code>, <code>isVisible</code>, and <code>isLoading</code>. When it is not visible, we just return <code>null</code> to don&#39;t render it. If it is loading, we will render a <code>Skeleton</code> component from Material UI. But after loading it, we render the tag info with the <code>Free Shipping</code> label.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Tag</span> = (<span class="hljs-params">{ label, isVisible, isLoading }: TagProps</span>) =&gt; {\n  <span class="hljs-keyword">if</span> (!isVisible) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;\n  <span class="hljs-keyword">if</span> (isLoading) {\n    <span class="hljs-keyword">return</span> (\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Skeleton</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;110px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;40px&quot;</span> <span class="hljs-attr">data-testid</span>=<span class="hljs-string">&quot;tag-skeleton-loader&quot;</span> /&gt;</span></span>\n    );\n  }\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Box</span> <span class="hljs-attr">mt</span>=<span class="hljs-string">{1}</span> <span class="hljs-attr">data-testid</span>=<span class="hljs-string">&quot;tag-label-wrapper&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{tabStyle}</span>&gt;</span>{label}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<p>The <code>TagProps</code> is a simple type:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">TagProps</span> = {\n  <span class="hljs-attr">label</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">isVisible</span>: <span class="hljs-built_in">boolean</span>;\n  <span class="hljs-attr">isLoading</span>: <span class="hljs-built_in">boolean</span>;\n};\n</code></pre>\n<p>I&#39;m also using an object to style the <code>span</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> tabStyle = {\n  <span class="hljs-attr">padding</span>: <span class="hljs-string">&#x27;4px 8px&#x27;</span>,\n  <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;#f2f3fe&#x27;</span>,\n  <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#87a7ff&#x27;</span>,\n  <span class="hljs-attr">borderRadius</span>: <span class="hljs-string">&#x27;4px&#x27;</span>,\n};\n</code></pre>\n<p>I also wanted to build tests for this component trying to think of its behavior:</p>\n<ul>\n<li>when it&#39;s not visible: the tag will not be in the document.</li>\n</ul>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;when is not visible&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;does not render anything&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> { queryByTestId } = <span class="hljs-title function_">render</span>(\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Tag</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;a label&quot;</span> <span class="hljs-attr">isVisible</span>=<span class="hljs-string">{false}</span> <span class="hljs-attr">isLoading</span>=<span class="hljs-string">{false}</span> /&gt;</span></span>,\n    );\n\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">queryByTestId</span>(<span class="hljs-string">&#x27;tag-label-wrapper&#x27;</span>)).<span class="hljs-property">not</span>.<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<ul>\n<li>when it&#39;s loading: the skeleton will be in the document.</li>\n</ul>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;when is loading&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the tag label&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> { queryByTestId } = <span class="hljs-title function_">render</span>(\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Tag</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;a label&quot;</span> <span class="hljs-attr">isVisible</span> <span class="hljs-attr">isLoading</span> /&gt;</span></span>,\n    );\n\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">queryByTestId</span>(<span class="hljs-string">&#x27;tag-skeleton-loader&#x27;</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<ul>\n<li>when it&#39;s ready to render: the tag will be in the document.</li>\n</ul>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;when is visible and not loading&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the tag label&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Tag</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;a label&quot;</span> <span class="hljs-attr">isVisible</span> <span class="hljs-attr">isLoading</span>=<span class="hljs-string">{false}</span> /&gt;</span></span>);\n\n    <span class="hljs-title function_">expect</span>(screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;a label&#x27;</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<ul>\n<li>bonus point: accessibility. I also built an automated test to cover accessibility violations using <code>jest-axe</code>.</li>\n</ul>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;has no accessibility violations&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n  <span class="hljs-keyword">const</span> { container } = <span class="hljs-title function_">render</span>(\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Tag</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;a label&quot;</span> <span class="hljs-attr">isVisible</span> <span class="hljs-attr">isLoading</span>=<span class="hljs-string">{false}</span> /&gt;</span></span>,\n  );\n\n  <span class="hljs-keyword">const</span> results = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axe</span>(container);\n\n  <span class="hljs-title function_">expect</span>(results).<span class="hljs-title function_">toHaveNoViolations</span>();\n});\n</code></pre>\n<p>We are ready to implement another component: the <code>TitleDescription</code>. It will work almost similar to the <code>Tag</code> component. It receives some props: <code>name</code>, <code>description</code>, and <code>isLoading</code>.</p>\n<p>As we have the <code>Product</code> type with the type definition for the <code>name</code> and the <code>description</code>, I wanted to reuse it. I tried different things - and you can <a href="/series/typescript-learnings/interesting-types">take a look here for more details</a> - and I found the <code>Pick</code> type. With that, I could get the <code>name</code> and the <code>description</code> from the <code>ProductType</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">TitleDescriptionType</span> = <span class="hljs-title class_">Pick</span>&lt;<span class="hljs-title class_">ProductType</span>, <span class="hljs-string">&#x27;name&#x27;</span> | <span class="hljs-string">&#x27;description&#x27;</span>&gt;;\n</code></pre>\n<p>With this new type, I could create the <code>TitleDescriptionPropsType</code> for the component:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">TitleDescriptionPropsType</span> = <span class="hljs-title class_">TitleDescriptionType</span> &amp; {\n  <span class="hljs-attr">isLoading</span>: <span class="hljs-built_in">boolean</span>;\n};\n</code></pre>\n<p>Now working inside the component, If the <code>isLoading</code> is true, the component renders the proper skeleton component before it renders the actual title and description texts.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">if</span> (isLoading) {\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Skeleton</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;60%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;24px&quot;</span> <span class="hljs-attr">data-testid</span>=<span class="hljs-string">&quot;name-skeleton-loader&quot;</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Skeleton</span>\n        <span class="hljs-attr">style</span>=<span class="hljs-string">{descriptionSkeletonStyle}</span>\n        <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;20px&quot;</span>\n        <span class="hljs-attr">data-testid</span>=<span class="hljs-string">&quot;description-skeleton-loader&quot;</span>\n      /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Fragment</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<p>If the component is not loading anymore, we render the title and description texts. Here we use the <code>Typography</code> component.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">return</span> (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Typography</span> <span class="hljs-attr">data-testid</span>=<span class="hljs-string">&quot;product-name&quot;</span>&gt;</span>{name}<span class="hljs-tag">&lt;/<span class="hljs-name">Typography</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Typography</span>\n      <span class="hljs-attr">data-testid</span>=<span class="hljs-string">&quot;product-description&quot;</span>\n      <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;textSecondary&quot;</span>\n      <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;body2&quot;</span>\n      <span class="hljs-attr">style</span>=<span class="hljs-string">{descriptionStyle}</span>\n    &gt;</span>\n      {description}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Typography</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">Fragment</span>&gt;</span></span>\n);\n</code></pre>\n<p>For the tests, we want three things:</p>\n<ul>\n<li>when it is loading, the component renders the skeletons</li>\n<li>when it is not loading anymore, the component renders the texts</li>\n<li>make sure the component doesn&#39;t violate the accessibility</li>\n</ul>\n<p>We will use the same idea we use for the <code>Tag</code> tests: see if it in the document or not based on the state.</p>\n<p>When it is loading, we want to see if the skeleton is in the document, but the title and description texts are not.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;when is loading&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;does not render anything&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> { queryByTestId } = <span class="hljs-title function_">render</span>(\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TitleDescription</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">{product.name}</span>\n        <span class="hljs-attr">description</span>=<span class="hljs-string">{product.description}</span>\n        <span class="hljs-attr">isLoading</span>\n      /&gt;</span></span>,\n    );\n\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">queryByTestId</span>(<span class="hljs-string">&#x27;name-skeleton-loader&#x27;</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">queryByTestId</span>(<span class="hljs-string">&#x27;description-skeleton-loader&#x27;</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">queryByTestId</span>(<span class="hljs-string">&#x27;product-name&#x27;</span>)).<span class="hljs-property">not</span>.<span class="hljs-title function_">toBeInTheDocument</span>();\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">queryByTestId</span>(<span class="hljs-string">&#x27;product-description&#x27;</span>)).<span class="hljs-property">not</span>.<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<p>When it is not loading anymore, it renders the texts in the DOM:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;when finished loading&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the product name and description&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">render</span>(\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TitleDescription</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">{product.name}</span>\n        <span class="hljs-attr">description</span>=<span class="hljs-string">{product.description}</span>\n        <span class="hljs-attr">isLoading</span>=<span class="hljs-string">{false}</span>\n      /&gt;</span></span>,\n    );\n\n    <span class="hljs-title function_">expect</span>(screen.<span class="hljs-title function_">getByText</span>(product.<span class="hljs-property">name</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n    <span class="hljs-title function_">expect</span>(screen.<span class="hljs-title function_">getByText</span>(product.<span class="hljs-property">description</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<p>And a simple test to cover accessibility issues:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;has no accessibility violations&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n  <span class="hljs-keyword">const</span> { container } = <span class="hljs-title function_">render</span>(\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TitleDescription</span>\n      <span class="hljs-attr">name</span>=<span class="hljs-string">{product.name}</span>\n      <span class="hljs-attr">description</span>=<span class="hljs-string">{product.description}</span>\n      <span class="hljs-attr">isLoading</span>=<span class="hljs-string">{false}</span>\n    /&gt;</span></span>,\n  );\n\n  <span class="hljs-keyword">const</span> results = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axe</span>(container);\n\n  <span class="hljs-title function_">expect</span>(results).<span class="hljs-title function_">toHaveNoViolations</span>();\n});\n</code></pre>\n<p>The next component is the <code>Price</code>. In this component we will provide a skeleton when it is still loading as we did in the other component, and add three different components here:</p>\n<ul>\n<li><code>PriceWithDiscount</code>: we apply the discount into the original price and render it</li>\n<li><code>OriginalPrice</code>: it just renders the product price</li>\n<li><code>Discount</code>: it renders the discount percentage when the product has a discount</li>\n</ul>\n<p>But before I start implementing these components, I wanted to structure the data to be used. The <code>price</code> and the <code>discount</code> values are numbers. So let&#39;s build a function called <code>getPriceInfo</code> that receives the <code>price</code> and the <code>discount</code> and it will return this data:</p>\n<pre><code class="hljs language-tsx">{\n  priceWithDiscount,\n  originalPrice,\n  discountOff,\n  hasDiscount,\n};\n</code></pre>\n<p>With this type contract:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">PriceInfoType</span> = {\n  <span class="hljs-attr">priceWithDiscount</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">originalPrice</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">discountOff</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">hasDiscount</span>: <span class="hljs-built_in">boolean</span>;\n};\n</code></pre>\n<p>In this function, it will get the <code>discount</code> and transform it into a <code>boolean</code>, then apply the <code>discount</code> to build the <code>priceWithDiscount</code>, use the <code>hasDiscount</code> to build the discount percentage, and build the <code>originalPrice</code> with the dollar sign:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> applyDiscount = (<span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">discount</span>: <span class="hljs-built_in">number</span>): <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span>\n  price - (price * discount) / <span class="hljs-number">100</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getPriceInfo = (\n  <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>,\n  <span class="hljs-attr">discount</span>: <span class="hljs-built_in">number</span>,\n): <span class="hljs-function"><span class="hljs-params">PriceInfoType</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">hasDiscount</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-title class_">Boolean</span>(discount);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">priceWithDiscount</span>: <span class="hljs-built_in">string</span> = hasDiscount\n    ? <span class="hljs-string">`$<span class="hljs-subst">${applyDiscount(price, discount)}</span>`</span>\n    : <span class="hljs-string">`$<span class="hljs-subst">${price}</span>`</span>;\n\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">originalPrice</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`$<span class="hljs-subst">${price}</span>`</span>;\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">discountOff</span>: <span class="hljs-built_in">string</span> = hasDiscount ? <span class="hljs-string">`<span class="hljs-subst">${discount}</span>% OFF`</span> : <span class="hljs-string">&#x27;&#x27;</span>;\n\n  <span class="hljs-keyword">return</span> {\n    priceWithDiscount,\n    originalPrice,\n    discountOff,\n    hasDiscount,\n  };\n};\n</code></pre>\n<p>Here I also built an <code>applytDiscount</code> function to extract the discount calculation.</p>\n<p>I added some tests to cover these functions. As they are pure functions, we just need to pass some values and expect new data.</p>\n<p>Test for the <code>applyDiscount</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;applyDiscount&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;applies 20% discount in the price&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">applyDiscount</span>(<span class="hljs-number">100</span>, <span class="hljs-number">20</span>)).<span class="hljs-title function_">toEqual</span>(<span class="hljs-number">80</span>);\n  });\n\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;applies 95% discount in the price&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">applyDiscount</span>(<span class="hljs-number">100</span>, <span class="hljs-number">95</span>)).<span class="hljs-title function_">toEqual</span>(<span class="hljs-number">5</span>);\n  });\n});\n</code></pre>\n<p>Test for the <code>getPriceInfo</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;getPriceInfo&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;with discount&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns the correct price info&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getPriceInfo</span>(<span class="hljs-number">100</span>, <span class="hljs-number">20</span>)).<span class="hljs-title function_">toMatchObject</span>({\n        <span class="hljs-attr">priceWithDiscount</span>: <span class="hljs-string">&#x27;$80&#x27;</span>,\n        <span class="hljs-attr">originalPrice</span>: <span class="hljs-string">&#x27;$100&#x27;</span>,\n        <span class="hljs-attr">discountOff</span>: <span class="hljs-string">&#x27;20% OFF&#x27;</span>,\n        <span class="hljs-attr">hasDiscount</span>: <span class="hljs-literal">true</span>,\n      });\n    });\n  });\n\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;without discount&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns the correct price info&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">getPriceInfo</span>(<span class="hljs-number">100</span>, <span class="hljs-number">0</span>)).<span class="hljs-title function_">toMatchObject</span>({\n        <span class="hljs-attr">priceWithDiscount</span>: <span class="hljs-string">&#x27;$100&#x27;</span>,\n        <span class="hljs-attr">originalPrice</span>: <span class="hljs-string">&#x27;$100&#x27;</span>,\n        <span class="hljs-attr">discountOff</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">hasDiscount</span>: <span class="hljs-literal">false</span>,\n      });\n    });\n  });\n});\n</code></pre>\n<p>Now we can use the <code>getPriceInfo</code> in the <code>Price</code> components to get this structure data and pass down for the other components like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Price</span> = (<span class="hljs-params">{ price, discount, isLoading }: PricePropsType</span>) =&gt; {\n  <span class="hljs-keyword">if</span> (isLoading) {\n    <span class="hljs-keyword">return</span> (\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Skeleton</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;80%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;18px&quot;</span> <span class="hljs-attr">data-testid</span>=<span class="hljs-string">&quot;price-skeleton-loader&quot;</span> /&gt;</span></span>\n    );\n  }\n\n  <span class="hljs-keyword">const</span> {\n    priceWithDiscount,\n    originalPrice,\n    discountOff,\n    hasDiscount,\n  }: <span class="hljs-title class_">PriceInfoType</span> = <span class="hljs-title function_">getPriceInfo</span>(price, discount);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">PriceWithDiscount</span> <span class="hljs-attr">price</span>=<span class="hljs-string">{priceWithDiscount}</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">OriginalPrice</span> <span class="hljs-attr">hasDiscount</span>=<span class="hljs-string">{hasDiscount}</span> <span class="hljs-attr">price</span>=<span class="hljs-string">{originalPrice}</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Discount</span> <span class="hljs-attr">hasDiscount</span>=<span class="hljs-string">{hasDiscount}</span> <span class="hljs-attr">discountOff</span>=<span class="hljs-string">{discountOff}</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Fragment</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<p>As we talked earlier, when it is loading, we just render the <code>Skeleton</code> component. When it finishes the loading, it will build the structured data and render the price info. Let&#39;s build each component now!</p>\n<p>Let&#39;s start with the <code>OriginalPrice</code>. We just need to pass the <code>price</code> as a prop and it renders with the <code>Typography</code> component.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">OriginalPricePropsType</span> = {\n  <span class="hljs-attr">price</span>: <span class="hljs-built_in">string</span>;\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">OriginalPrice</span> = (<span class="hljs-params">{ price }: OriginalPricePropsType</span>) =&gt; (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Typography</span> <span class="hljs-attr">display</span>=<span class="hljs-string">&quot;inline&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{originalPriceStyle}</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;textSecondary&quot;</span>&gt;</span>\n    {price}\n  <span class="hljs-tag">&lt;/<span class="hljs-name">Typography</span>&gt;</span></span>\n);\n</code></pre>\n<p>Very simple! Let&#39;s add a test now.</p>\n<p>Just pass a price and see it if was rendered in the DOM:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;shows the price&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">const</span> price = <span class="hljs-string">&#x27;$200&#x27;</span>;\n  <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">OriginalPrice</span> <span class="hljs-attr">price</span>=<span class="hljs-string">{price}</span> /&gt;</span></span>);\n  <span class="hljs-title function_">expect</span>(screen.<span class="hljs-title function_">getByText</span>(price)).<span class="hljs-title function_">toBeInTheDocument</span>();\n});\n</code></pre>\n<p>I also added a test to cover accessibility issues:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;has no accessibility violations&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n  <span class="hljs-keyword">const</span> { container } = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">OriginalPrice</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;$200&quot;</span> /&gt;</span></span>);\n  <span class="hljs-keyword">const</span> results = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axe</span>(container);\n\n  <span class="hljs-title function_">expect</span>(results).<span class="hljs-title function_">toHaveNoViolations</span>();\n});\n</code></pre>\n<p>The <code>PriceWithDiscount</code> component has a very similar implementation, but we pass the <code>hasDiscount</code> boolean to render this price or not. If it has a discount, render the price with the discount. Otherwise, it won&#39;t render anything.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">PricePropsType</span> = {\n  <span class="hljs-attr">hasDiscount</span>: <span class="hljs-built_in">boolean</span>;\n  <span class="hljs-attr">price</span>: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<p>The props type has the <code>hasDiscount</code> and the <code>price</code>. And the component just renders things based on the <code>hasDiscount</code> value.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">PriceWithDiscount</span> = (<span class="hljs-params">{ price, hasDiscount }: PricePropsType</span>) =&gt; {\n  <span class="hljs-keyword">if</span> (!hasDiscount) {\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;\n  }\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Typography</span> <span class="hljs-attr">display</span>=<span class="hljs-string">&quot;inline&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{priceWithDiscountStyle}</span>&gt;</span>\n      {price}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Typography</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<p>The tests will cover this logic when it has or doesn&#39;t have the discount. If it hasn&#39;t the discount, the prices will not be rendered.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;when the product has no discount&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;shows nothing&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> { queryByTestId } = <span class="hljs-title function_">render</span>(\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PriceWithDiscount</span> <span class="hljs-attr">hasDiscount</span>=<span class="hljs-string">{false}</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span>,\n    );\n\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">queryByTestId</span>(<span class="hljs-string">&#x27;discount-off-label&#x27;</span>)).<span class="hljs-property">not</span>.<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<p>If it has the discount, it will be the rendered in the DOM:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;when the product has a discount&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;shows the price&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> price = <span class="hljs-string">&#x27;$200&#x27;</span>;\n    <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PriceWithDiscount</span> <span class="hljs-attr">hasDiscount</span> <span class="hljs-attr">price</span>=<span class="hljs-string">{price}</span> /&gt;</span></span>);\n    <span class="hljs-title function_">expect</span>(screen.<span class="hljs-title function_">getByText</span>(price)).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<p>And as always, a test to cover accessibility violations:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;has no accessibility violations&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n  <span class="hljs-keyword">const</span> { container } = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PriceWithDiscount</span> <span class="hljs-attr">hasDiscount</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;$200&quot;</span> /&gt;</span></span>);\n\n  <span class="hljs-keyword">const</span> results = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axe</span>(container);\n\n  <span class="hljs-title function_">expect</span>(results).<span class="hljs-title function_">toHaveNoViolations</span>();\n});\n</code></pre>\n<p>The <code>Discount</code> component is pretty much the same as the <code>PriceWithDiscount</code>. Render the discount tag if the product has a discount:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">DiscountPropsType</span> = {\n  <span class="hljs-attr">hasDiscount</span>: <span class="hljs-built_in">boolean</span>;\n  <span class="hljs-attr">discountOff</span>: <span class="hljs-built_in">string</span>;\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Discount</span> = (<span class="hljs-params">{ hasDiscount, discountOff }: DiscountPropsType</span>) =&gt; {\n  <span class="hljs-keyword">if</span> (!hasDiscount) {\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;\n  }\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Typography</span>\n      <span class="hljs-attr">display</span>=<span class="hljs-string">&quot;inline&quot;</span>\n      <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;secondary&quot;</span>\n      <span class="hljs-attr">data-testid</span>=<span class="hljs-string">&quot;discount-off-label&quot;</span>\n    &gt;</span>\n      {discountOff}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Typography</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<p>And all the tests we did for the other component, we do the same thing for the <code>Discount</code> component:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Discount&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;when the product has a discount&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;shows the discount label&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> discountOff = <span class="hljs-string">&#x27;20% OFF&#x27;</span>;\n      <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Discount</span> <span class="hljs-attr">hasDiscount</span> <span class="hljs-attr">discountOff</span>=<span class="hljs-string">{discountOff}</span> /&gt;</span></span>);\n      <span class="hljs-title function_">expect</span>(screen.<span class="hljs-title function_">getByText</span>(discountOff)).<span class="hljs-title function_">toBeInTheDocument</span>();\n    });\n  });\n\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;when the product has no discount&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;shows nothing&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> { queryByTestId } = <span class="hljs-title function_">render</span>(\n        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Discount</span> <span class="hljs-attr">hasDiscount</span>=<span class="hljs-string">{false}</span> <span class="hljs-attr">discountOff</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span>,\n      );\n\n      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">queryByTestId</span>(<span class="hljs-string">&#x27;discount-off-label&#x27;</span>)).<span class="hljs-property">not</span>.<span class="hljs-title function_">toBeInTheDocument</span>();\n    });\n  });\n\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;has no accessibility violations&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; {\n    <span class="hljs-keyword">const</span> { container } = <span class="hljs-title function_">render</span>(\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Discount</span> <span class="hljs-attr">hasDiscount</span> <span class="hljs-attr">discountOff</span>=<span class="hljs-string">&quot;20% OFF&quot;</span> /&gt;</span></span>,\n    );\n\n    <span class="hljs-keyword">const</span> results = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axe</span>(container);\n\n    <span class="hljs-title function_">expect</span>(results).<span class="hljs-title function_">toHaveNoViolations</span>();\n  });\n});\n</code></pre>\n<p>Now we will build an <code>Image</code> component. This component has the basic skeleton as any other component we&#39;ve built. If it is loading, wait to render the image source and render the skeleton instead. When it finishes the loading, we will render the image, but only if the component is in the intersection of the browser window.</p>\n<p>What does it mean? When you are on a website on your mobile device, you&#39;ll probably see the first 4 products. They will render the skeleton and then the image. But below these 4 products, as you&#39;re not seeing any of them, it doesn&#39;t matter if we are rendering them or not. And we can choose to not render them. Not for now. But on-demand. When you are scrolling, if the product&#39;s image is at the intersection of the browser window, we start rendering the image source.</p>\n<p>That way we gain performance by speeding up the page load time and reduce the cost by requesting images on demand.</p>\n<p>We will use the Intersection Observer API to download images on demand. But before writing any code about this technology, let&#39;s start building our component with the image and the skeleton view.</p>\n<p>Image props will have this object:</p>\n<pre><code class="hljs language-tsx">{\n  imageUrl,\n  imageAlt,\n  width,\n  isLoading,\n  imageWrapperStyle,\n  imageStyle,\n}\n</code></pre>\n<p>The <code>imageUrl</code>, <code>imageAlt</code>, and the <code>isLoading</code> props are passed by the product component. The <code>width</code> is an attribute for the skeleton and the image tag. The <code>imageWrapperStyle</code> and the <code>imageStyle</code> are props that have a default value in the image component. We&#39;ll talk about this later.</p>\n<p>Let&#39;s add a type for this props:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ImageUrlType</span> = <span class="hljs-title class_">Pick</span>&lt;<span class="hljs-title class_">ProductType</span>, <span class="hljs-string">&#x27;imageUrl&#x27;</span>&gt;;\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">ImageAttrType</span> = { <span class="hljs-attr">imageAlt</span>: <span class="hljs-built_in">string</span>; <span class="hljs-attr">width</span>: <span class="hljs-built_in">string</span> };\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">ImageStateType</span> = { <span class="hljs-attr">isLoading</span>: <span class="hljs-built_in">boolean</span> };\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">ImageStyleType</span> = {\n  <span class="hljs-attr">imageWrapperStyle</span>: <span class="hljs-title class_">CSSProperties</span>;\n  <span class="hljs-attr">imageStyle</span>: <span class="hljs-title class_">CSSProperties</span>;\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">ImagePropsType</span> = <span class="hljs-title class_">ImageUrlType</span> &amp;\n  <span class="hljs-title class_">ImageAttrType</span> &amp;\n  <span class="hljs-title class_">ImageStateType</span> &amp;\n  <span class="hljs-title class_">ImageStyleType</span>;\n</code></pre>\n<p>The idea here is to give meaning for the types and then compose everything. We can get the <code>imageUrl</code> from the <code>ProductType</code>. The attribute type will have the <code>imageAlt</code> and the <code>width</code>. The image state has the <code>isLoading</code> state. And the image style has some <code>CSSProperties</code>.</p>\n<p>At first, the component would like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Image</span> = (<span class="hljs-params">{\n  imageUrl,\n  imageAlt,\n  width,\n  isLoading,\n  imageWrapperStyle,\n  imageStyle,\n}: ImagePropsType</span>) =&gt; {\n  <span class="hljs-keyword">if</span> (isLoading) {\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Skeleton</span>\n      <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;rect&quot;</span>\n      <span class="hljs-attr">width</span>=<span class="hljs-string">{width}</span>\n      <span class="hljs-attr">data-testid</span>=<span class="hljs-string">&quot;image-skeleton-loader&quot;</span>\n    /&gt;</span></span>;\n  }\n\n  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{imageUrl}</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">{imageAlt}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{width}</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{imageStyle}</span> /&gt;</span></span>;\n};\n</code></pre>\n<p>Let&#39;s build the code to make the intersection observer works.</p>\n<p>The idea of the intersection observer is to receive a target to be observed and a callback function that is executed whenever the observed target enters or exits the viewport. So the implementation would be very simple:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">observer</span>: <span class="hljs-title class_">IntersectionObserver</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(\n  onIntersect,\n  options,\n);\n\nobserver.<span class="hljs-title function_">observe</span>(target);\n</code></pre>\n<p>Instantiate the <code>IntersectionObserver</code> class by passing an options object and the callback function. The <code>observer</code> will observe the <code>target</code> element.</p>\n<p>As it is an effect in the DOM, we can wrap this into a <code>useEffect</code>.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">observer</span>: <span class="hljs-title class_">IntersectionObserver</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(\n    onIntersect,\n    options,\n  );\n\n  observer.<span class="hljs-title function_">observe</span>(target);\n\n  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {\n    observer.<span class="hljs-title function_">unobserve</span>(target);\n  };\n}, [target]);\n</code></pre>\n<p>Using <code>useEffect</code>, we have two different things here: the dependency array and the returning function. We pass the <code>target</code> as the dependency function to make sure that we will re-run the effect if the <code>target</code> changes. And the returning function is a cleanup function. React performs the cleanup when the component unmounts, so it will clean up the effect before running another effect for every render.</p>\n<p>In this cleanup function, we just stop observing the <code>target</code> element.</p>\n<p>When the component starts rendering, the <code>target</code> reference is not set yet, so we need to have a guard to not observe an <code>undefined</code> target.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">if</span> (!target) {\n    <span class="hljs-keyword">return</span>;\n  }\n\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">observer</span>: <span class="hljs-title class_">IntersectionObserver</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(\n    onIntersect,\n    options,\n  );\n\n  observer.<span class="hljs-title function_">observe</span>(target);\n\n  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {\n    observer.<span class="hljs-title function_">unobserve</span>(target);\n  };\n}, [target]);\n</code></pre>\n<p>Instead of using this effect in our component, we could build a custom hook to receive the target, some options to customize the configuration, and it would provide a boolean telling if the target is at the intersection of the viewport or not.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">TargetType</span> = <span class="hljs-title class_">Element</span> | <span class="hljs-title class_">HTMLDivElement</span> | <span class="hljs-literal">undefined</span>;\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">IntersectionStatus</span> = {\n  <span class="hljs-attr">isIntersecting</span>: <span class="hljs-built_in">boolean</span>;\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">defaultOptions</span>: <span class="hljs-title class_">IntersectionObserverInit</span> = {\n  <span class="hljs-attr">rootMargin</span>: <span class="hljs-string">&#x27;0px&#x27;</span>,\n  <span class="hljs-attr">threshold</span>: <span class="hljs-number">0.1</span>,\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useIntersectionObserver = (\n  <span class="hljs-attr">target</span>: <span class="hljs-title class_">TargetType</span>,\n  <span class="hljs-attr">options</span>: <span class="hljs-title class_">IntersectionObserverInit</span> = defaultOptions,\n): <span class="hljs-function"><span class="hljs-params">IntersectionStatus</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> [isIntersecting, setIsIntersecting] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);\n\n  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">if</span> (!target) {\n      <span class="hljs-keyword">return</span>;\n    }\n\n    <span class="hljs-keyword">const</span> <span class="hljs-title function_">onIntersect</span> = (<span class="hljs-params">[entry]: IntersectionObserverEntry[]</span>) =&gt; {\n      <span class="hljs-title function_">setIsIntersecting</span>(entry.<span class="hljs-property">isIntersecting</span>);\n\n      <span class="hljs-keyword">if</span> (entry.<span class="hljs-property">isIntersecting</span>) {\n        observer.<span class="hljs-title function_">unobserve</span>(target);\n      }\n    };\n\n    <span class="hljs-keyword">const</span> <span class="hljs-attr">observer</span>: <span class="hljs-title class_">IntersectionObserver</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(\n      onIntersect,\n      options,\n    );\n\n    observer.<span class="hljs-title function_">observe</span>(target);\n\n    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {\n      observer.<span class="hljs-title function_">unobserve</span>(target);\n    };\n  }, [target]);\n\n  <span class="hljs-keyword">return</span> { isIntersecting };\n};\n</code></pre>\n<p>In our callback function, we just set if the entry target is intersecting the viewport or not. The <code>setIsIntersecting</code> is a setter from the <code>useState</code> hook we define at the top of our custom hook.</p>\n<p>It is initialized as <code>false</code> but will update to <code>true</code> if it is intersecting the viewport.</p>\n<p>With this new information in the component, we can render the image or not. If it is intersecting, we can render the image. If not, just render a skeleton until the user gets to the viewport intersection of the product image.</p>\n<p>How does it look in practice?</p>\n<p>First we define the wrapper reference using <code>useState</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> [wrapperRef, setWrapperRef] = useState&lt;<span class="hljs-title class_">HTMLDivElement</span>&gt;();\n</code></pre>\n<p>It start as <code>undefined</code>. Then build a wrapper callback to set the element node:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> wrapperCallback = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> {\n  <span class="hljs-title function_">setWrapperRef</span>(node);\n}, []);\n</code></pre>\n<p>With that, we can use it to get the wrapper reference by using a <code>ref</code> prop in our <code>div</code>.</p>\n<pre><code class="hljs language-tsx">&lt;div ref={wrapperCallback}&gt;\n</code></pre>\n<p>After setting the <code>wrapperRef</code>, we can pass it as the <code>target</code> for our <code>useIntersectionObserver</code> and expect a <code>isIntersecting</code> status as a result:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> { isIntersecting }: <span class="hljs-title class_">IntersectionStatus</span> =\n  <span class="hljs-title function_">useIntersectionObserver</span>(wrapperRef);\n</code></pre>\n<p>With this new value, we can build a boolean value to know if we render the skeleton or the product image.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">showImageSkeleton</span>: <span class="hljs-built_in">boolean</span> = isLoading || !isIntersecting;\n</code></pre>\n<p>So now we can render the appropriate node to the DOM.</p>\n<pre><code class="hljs language-tsx">&lt;div ref={wrapperCallback} style={imageWrapperStyle}&gt;\n  {showImageSkeleton ? (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Skeleton</span>\n      <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;rect&quot;</span>\n      <span class="hljs-attr">width</span>=<span class="hljs-string">{width}</span>\n      <span class="hljs-attr">height</span>=<span class="hljs-string">{imageWrapperStyle.height}</span>\n      <span class="hljs-attr">style</span>=<span class="hljs-string">{skeletonStyle}</span>\n      <span class="hljs-attr">data-testid</span>=<span class="hljs-string">&quot;image-skeleton-loader&quot;</span>\n    /&gt;</span></span>\n  ) : (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{imageUrl}</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">{imageAlt}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{width}</span> /&gt;</span></span>\n  )}\n&lt;/div&gt;\n</code></pre>\n<p>The full component looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Image</span> = (<span class="hljs-params">{\n  imageUrl,\n  imageAlt,\n  width,\n  isLoading,\n  imageWrapperStyle,\n}: ImagePropsType</span>) =&gt; {\n  <span class="hljs-keyword">const</span> [wrapperRef, setWrapperRef] = useState&lt;<span class="hljs-title class_">HTMLDivElement</span>&gt;();\n  <span class="hljs-keyword">const</span> wrapperCallback = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> {\n    <span class="hljs-title function_">setWrapperRef</span>(node);\n  }, []);\n\n  <span class="hljs-keyword">const</span> { isIntersecting }: <span class="hljs-title class_">IntersectionStatus</span> =\n    <span class="hljs-title function_">useIntersectionObserver</span>(wrapperRef);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">showImageSkeleton</span>: <span class="hljs-built_in">boolean</span> = isLoading || !isIntersecting;\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">{wrapperCallback}</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{imageWrapperStyle}</span>&gt;</span>\n      {showImageSkeleton ? (\n        <span class="hljs-tag">&lt;<span class="hljs-name">Skeleton</span>\n          <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;rect&quot;</span>\n          <span class="hljs-attr">width</span>=<span class="hljs-string">{width}</span>\n          <span class="hljs-attr">height</span>=<span class="hljs-string">{imageWrapperStyle.height}</span>\n          <span class="hljs-attr">style</span>=<span class="hljs-string">{skeletonStyle}</span>\n          <span class="hljs-attr">data-testid</span>=<span class="hljs-string">&quot;image-skeleton-loader&quot;</span>\n        /&gt;</span>\n      ) : (\n        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{imageUrl}</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">{imageAlt}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{width}</span> /&gt;</span>\n      )}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<p>Great, now the loading on-demand works well. But I want to build a slightly better experience. The idea here is to have two different sizes of the same image. The low-quality image is requested and we make it visible, but blur while the high-quality image is requested in the background. When the high-quality image finally finishes loading, we transition from the low-quality to the high-quality image with an ease-in/ease-out transition to make it a smooth experience.</p>\n<p>Let&#39;s build this logic. We could build this into the component, but we could also extract this logic into a custom hook.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useImageOnLoad = (): <span class="hljs-function"><span class="hljs-params">ImageOnLoadType</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> [isLoaded, setIsLoaded] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleImageOnLoad</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setIsLoaded</span>(<span class="hljs-literal">true</span>);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">imageVisibility</span>: <span class="hljs-title class_">CSSProperties</span> = {\n    <span class="hljs-attr">visibility</span>: isLoaded ? <span class="hljs-string">&#x27;hidden&#x27;</span> : <span class="hljs-string">&#x27;visible&#x27;</span>,\n    <span class="hljs-attr">filter</span>: <span class="hljs-string">&#x27;blur(10px)&#x27;</span>,\n    <span class="hljs-attr">transition</span>: <span class="hljs-string">&#x27;visibility 0ms ease-out 500ms&#x27;</span>,\n  };\n\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">imageOpactity</span>: <span class="hljs-title class_">CSSProperties</span> = {\n    <span class="hljs-attr">opacity</span>: isLoaded ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>,\n    <span class="hljs-attr">transition</span>: <span class="hljs-string">&#x27;opacity 500ms ease-in 0ms&#x27;</span>,\n  };\n\n  <span class="hljs-keyword">return</span> { handleImageOnLoad, imageVisibility, imageOpactity };\n};\n</code></pre>\n<p>This hook just provides some data and behavior for the component. The <code>handleImageOnLoad</code> we talked earlier, the <code>imageVisibility</code> to make the low-quality image visible or not, and the <code>imageOpactity</code> to make the transition from transparent to opaque, that way we make it visible after loading it.</p>\n<p>The <code>isLoaded</code> is a simple boolean to handle the visibility of the images. Another small detail is the <code>filter: &#39;blur(10px)&#39;</code> to make the low-quality-image blur and then slowly focusing while transitioning from the low-quality image to the high-quality image.</p>\n<p>With this new hook, we just import it, and call inside the component:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> { handleImageOnLoad, imageVisibility, imageOpactity }: <span class="hljs-title class_">ImageOnLoadType</span> =\n  <span class="hljs-title function_">useImageOnLoad</span>();\n</code></pre>\n<p>And start using the data and behavior we built.</p>\n<pre><code class="hljs language-tsx">&lt;<span class="hljs-title class_">Fragment</span>&gt;\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span>\n    <span class="hljs-attr">src</span>=<span class="hljs-string">{thumbUrl}</span>\n    <span class="hljs-attr">alt</span>=<span class="hljs-string">{imageAlt}</span>\n    <span class="hljs-attr">width</span>=<span class="hljs-string">{width}</span>\n    <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">...imageStyle</span>, <span class="hljs-attr">...imageVisibility</span> }}\n  /&gt;</span></span>\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span>\n    <span class="hljs-attr">onLoad</span>=<span class="hljs-string">{handleImageOnLoad}</span>\n    <span class="hljs-attr">src</span>=<span class="hljs-string">{imageUrl}</span>\n    <span class="hljs-attr">alt</span>=<span class="hljs-string">{imageAlt}</span>\n    <span class="hljs-attr">width</span>=<span class="hljs-string">{width}</span>\n    <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">...imageStyle</span>, <span class="hljs-attr">...imageOpactity</span> }}\n  /&gt;</span></span>\n&lt;/<span class="hljs-title class_">Fragment</span>&gt;\n</code></pre>\n<p>The first one has a low-quality image, the <code>thumbUrl</code>. The second has the original high-quality image, the <code>imageUrl</code>. When the high-quality image is loaded, it calls the <code>handleImageOnLoad</code> function. This function will make the transition between one image to the other.</p>\n<h2 id="wrapping-up">Wrapping up</h2>\n<p>This is the first part of this project to learn more about user experience, native APIs, typed frontend, and tests.</p>\n<p>For the next part of this series, we are going to think more in an architectural way to build the search with filters, but keeping the mindset to bring technical solutions to make the user experience as smooth as possible.</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video">Lazy Loading Images and Video</a></li>\n<li><a href="https://css-tricks.com/a-few-functional-uses-for-intersection-observer-to-know-when-an-element-is-in-view/">Functional Uses for Intersection Observer</a></li>\n<li><a href="https://css-tricks.com/tips-for-rolling-your-own-lazy-loading/">Tips for rolling your own lazy loading</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API - MDN</a></li>\n<li><a href="https://github.com/typescript-cheatsheets/react-typescript-cheatsheet">React Typescript Cheatsheet</a></li>\n</ul>\n<h3 id="react">React</h3>\n<ul>\n<li><a href="https://www.educative.io/path/become-a-react-developer?aff=x8bV">Become a React Developer</a></li>\n<li><a href="https://www.educative.io/path/react-development-for-professionals?aff=x8bV">React Development for Professionals</a></li>\n<li><a href="https://www.educative.io/path/react-app-testing?aff=x8bV">React App Testing</a></li>\n<li><a href="https://www.educative.io/path/react-front-end-developer?aff=x8bV">React for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/react-beginner-to-advanced?aff=x8bV">React Deep Dive: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/test-driven-react-development?aff=x8bV">Test-driven Development with React</a></li>\n<li><a href="https://www.educative.io/courses/the-road-to-learn-react?aff=x8bV">The Road to learn React</a></li>\n<li><a href="https://www.educative.io/courses/reintroducing-react-v16-beyond?aff=x8bV">Reintroducing React: V16 and Beyond</a></li>\n<li><a href="https://www.educative.io/courses/advanced-react-patterns-with-hooks?aff=x8bV">Advanced React Patterns With Hooks</a></li>\n<li><a href="https://reactforbeginners.com/friend/LEANDRO">React for Beginners Course</a></li>\n<li><a href="https://advancedreact.com/friend/LEANDRO">Advanced React Course</a></li>\n</ul>\n<h3 id="redux">Redux</h3>\n<ul>\n<li><a href="https://www.educative.io/courses/practical-redux?aff=x8bV">Practical Redux</a></li>\n<li><a href="https://www.educative.io/courses/ultimate-guide-to-redux?aff=x8bV">The Ultimate Guide to Redux</a></li>\n<li><a href="https://www.educative.io/courses/intermediate-redux-toolkit?aff=x8bV">Intermediate Redux with Redux Toolkit</a></li>\n</ul>\n<h3 id="web">Web</h3>\n<ul>\n<li><a href="https://www.educative.io/path/fundamentals-web-programming?aff=x8bV">Fundamentals of Web Programming</a></li>\n<li><a href="https://www.educative.io/path/become-an-ember-js-developer?aff=x8bV">Become an EmberJS Developer</a></li>\n<li><a href="https://www.educative.io/path/ace-front-end-interview?aff=x8bV">Ace the Front End Interview</a></li>\n<li><a href="https://www.educative.io/path/become-front-end-developer?aff=x8bV">Become a Front End Developer</a></li>\n<li><a href="https://www.educative.io/courses/web-development-unraveling-html-css-js?aff=x8bV">Web Development: Unraveling HTML, CSS, and JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/the-complete-javascript-course-build-a-real-world-app-from-scratch?aff=x8bV">Complete JavaScript Course: Build a Real World App from Scratch</a></li>\n</ul>\n<h3 id="typescript">TypeScript</h3>\n<ul>\n<li><a href="https://www.educative.io/path/typescript-for-front-end-developers?aff=x8bV">TypeScript for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/using-typescript-with-react?aff=x8bV">Using TypeScript with React</a></li>\n<li><a href="https://www.educative.io/courses/learn-typescript-complete-course?aff=x8bV">Learn TypeScript: The Complete Course for Beginners</a></li>\n<li><a href="https://www.educative.io/courses/advanced-typescript-masterclass?aff=x8bV">Advanced TypeScript Masterclass</a></li>\n</ul>\n<h3 id="javascript">JavaScript</h3>\n<ul>\n<li><a href="https://www.educative.io/courses/javascript-in-detail-from-beginner-to-advanced?aff=x8bV">JavaScript in Detail: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/simplifying-javascript-handy-guide?aff=x8bV">Simplifying JavaScript: A Handy Guide for Software Engineers</a></li>\n<li><a href="https://www.educative.io/courses/complete-guide-to-modern-javascript?aff=x8bV">The Complete Guide to Modern JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/learn-object-oriented-programming-in-javascript?aff=x8bV">Learn Object-Oriented Programming in JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/javascript-in-practice-es6-and-beyond?aff=x8bV">JavaScript In Practice: ES6 And Beyond</a></li>\n<li><a href="https://www.educative.io/courses/data-structures-coding-interviews-javascript?aff=x8bV">Data Structures for Coding Interviews in JavaScript</a></li>\n<li><a href="https://mbsy.co/lFtbC">JavaScript Course by OneMonth</a></li>\n<li><a href="https://es6.io/friend/LEANDRO">ES6 Course</a></li>\n<li><a href="https://beginnerjavascript.com/friend/LEANDRO">Beginner JavaScript Course</a></li>\n<li><a href="https://www.educative.io/courses/javascript-fundamentals-before-learning-react?aff=x8bV">JavaScript Fundamentals Before Learning React</a></li>\n<li><a href="https://www.educative.io/courses/rediscovering-javascript?aff=x8bV">Rediscovering JavaScript: ES6, ES7 &amp; ES8</a></li>\n</ul>\n',
  },
  {
    title: 'Idiomatic Ruby: writing beautiful code',
    content:
      '<p>Ruby is a beautiful programming language.</p>\n<p>According to <a href="http://www.ruby-lang.org/en/">Ruby</a>’s official web page, Ruby is a:</p>\n<blockquote>\n<p>“dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write.”</p>\n</blockquote>\n<p>Ruby was created by <a href="https://twitter.com/yukihiro_matz">Yukihiro Matsumoto</a>, a Japanese software engineer. Since 2011, he has been the chief designer &amp; software engineer for Ruby at <a href="https://www.heroku.com/">Heroku</a>.</p>\n<p>Matsumoto has often said that he tries <strong>to make Ruby natural, not simple</strong>, in a way that mirrors life.</p>\n<blockquote>\n<p>“Ruby is simple in appearance, but is very complex inside, just like our human body” — Yukihiro Matsumoto</p>\n</blockquote>\n<p>I feel the same way about Ruby. It is a complex but very natural programming language, with a beautiful and intuitive syntax.</p>\n<p>With more intuitive and faster code, we are able to build better software. In this post, I will show you how I express my thoughts (aka code) with Ruby, by using snippets of code.</p>\n<h3 id="expressing-my-thoughts-with-array-methods">Expressing my thoughts with array methods</h3>\n<h4 id="map">Map</h4>\n<p>Use the <strong>map</strong> method to simplify your code and get what you want.</p>\n<p>The method <strong>map</strong> returns a new array with the results of running a block once for every element in enum.</p>\n<p>Let’s try it:</p>\n<pre><code class="hljs language-ruby">an_array.map { <span class="hljs-params">|element|</span> element * element }\n</code></pre>\n<p>Simple as that.</p>\n<p>But when you begin coding with Ruby, it is easy to always use the <strong>each</strong> iterator.</p>\n<p>The <strong>each</strong> iterator as shown below</p>\n<pre><code class="hljs language-ruby">user_ids = []\nusers.each { <span class="hljs-params">|user|</span> user_ids &lt;&lt; user.id }\n</code></pre>\n<p>Can be simplified with <strong>map</strong> in a single beautiful line of code:</p>\n<pre><code class="hljs language-ruby">user_ids = users.map { <span class="hljs-params">|user|</span> user.id }\n</code></pre>\n<p>Or even better (and faster):</p>\n<pre><code class="hljs language-ruby">user_ids = users.map(&amp;<span class="hljs-symbol">:id</span>)\n</code></pre>\n<h4 id="select">Select</h4>\n<p>And when you’re used to coding with <strong>map</strong>, sometimes your code can be like this:</p>\n<pre><code class="hljs language-ruby">even_numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].map { <span class="hljs-params">|element|</span> element <span class="hljs-keyword">if</span> element.even? } <span class="hljs-comment"># [ni, 2, nil, 4, nil]</span>\neven_numbers = even_numbers.compact <span class="hljs-comment"># [2, 4]</span>\n</code></pre>\n<p><strong>nil</strong> object as well. Use the <strong>compact</strong> method to remove all <strong>nil</strong> objects.</p>\n<p>And ta-da, you’ve selected all the even numbers.</p>\n<p>Mission accomplished.</p>\n<p>Come on, we can do better than this! Did you hear about the <strong>select</strong> method from enumerable module?</p>\n<pre><code class="hljs language-ruby">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].select { <span class="hljs-params">|element|</span> element.even? }\n</code></pre>\n<p>Just one line. Simple code. Easy to understand.</p>\n<h4 id="bonus">Bonus</h4>\n<pre><code class="hljs language-ruby">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].select(&amp;<span class="hljs-symbol">:even?</span>)\n</code></pre>\n<h4 id="sample">Sample</h4>\n<p>Imagine that you need to get a random element from an array. You just started learning Ruby, so your first thought will be, “Let’s use the <strong>random</strong> method,” and that’s what happens:</p>\n<pre><code class="hljs language-ruby">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>][rand(<span class="hljs-number">3</span>)]\n</code></pre>\n<p>Well, we can understand the code, but I’m not sure if it is good enough. And what if we use the <strong>shuffle</strong> method?</p>\n<pre><code class="hljs language-ruby">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].shuffle.first\n</code></pre>\n<p>Hmm. I actually prefer to use <strong>shuffle</strong> over <strong>rand</strong>. But when I discovered the <strong>sample</strong> method, it made so much more sense:</p>\n<pre><code class="hljs language-ruby">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].sample\n</code></pre>\n<p>Really, really simple.</p>\n<p>Pretty natural and intuitive. We ask a <strong>sample</strong> from an array and the method returns it. Now I’m happy.</p>\n<p>What about you?</p>\n<h3 id="expressing-my-thoughts-with-ruby-syntax">Expressing my thoughts with Ruby syntax</h3>\n<p>As I mentioned before, I love the way Ruby lets me code. It’s really natural for me. I’ll show parts of the beautiful Ruby syntax.</p>\n<h4 id="implicit-return">Implicit return</h4>\n<p>Any statement in Ruby returns the value of the last evaluated expression. A simple example is the **getter **method. We call a method and expect some value in return.</p>\n<p>Let’s see:</p>\n<pre><code class="hljs language-ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_user_ids</span><span class="hljs-params">(users)</span></span>\n  <span class="hljs-keyword">return</span> users.map(&amp;<span class="hljs-symbol">:id</span>)\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>But as we know, Ruby always returns the last evaluated expression. Why use the <strong>return</strong> statement?</p>\n<pre><code class="hljs language-ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_user_ids</span><span class="hljs-params">(users)</span></span>\n  users.map(&amp;<span class="hljs-symbol">:id</span>)\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>After using Ruby for 3 years, I feel great using almost every method without the <strong>return</strong> statement.</p>\n<h4 id="multiple-assignments">Multiple assignments</h4>\n<p>Ruby allows me to assign multiple variables at the same time. When you begin, you may be coding like this:</p>\n<pre><code class="hljs language-ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">values</span></span>\n  [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]\n<span class="hljs-keyword">end</span>\n\none   = values[<span class="hljs-number">0</span>]\ntwo   = values[<span class="hljs-number">1</span>]\nthree = values[<span class="hljs-number">2</span>]\n</code></pre>\n<p>But why not assign multiple variables at the same time?</p>\n<pre><code class="hljs language-ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">values</span></span>\n  [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]\n<span class="hljs-keyword">end</span>\n\none, two, three = values\n</code></pre>\n<p>Pretty awesome.</p>\n<h4 id="methods-that-ask-questions-also-called-predicates">Methods that ask questions (also called predicates)</h4>\n<p>One feature that caught my attention when I was learning Ruby was the <strong>question mark (?)</strong> method, also called the **predicates **methods. It was weird to see at first, but now it makes so much sense. You can write code like this:</p>\n<pre><code class="hljs language-ruby">movie.awesome <span class="hljs-comment"># =&gt; true</span>\n</code></pre>\n<p>Ok… nothing wrong with that. But let’s use the question mark:</p>\n<pre><code class="hljs language-ruby">movie.awesome? <span class="hljs-comment"># =&gt; true</span>\n</code></pre>\n<p>This code is much more expressive, and I expect the method’s answer to return either a <strong>true</strong> or <strong>false</strong> value.</p>\n<p>A method that I commonly use is <strong>any?</strong> It’s like asking an array if it has <strong>any</strong>thing inside it.</p>\n<pre><code class="hljs language-ruby">[].any? <span class="hljs-comment"># =&gt; false</span>\n[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].any? <span class="hljs-comment"># =&gt; true</span>\n</code></pre>\n<h4 id="interpolation">Interpolation</h4>\n<p>For me string interpolation is more intuitive than string concatenation. Period. Let’s see it in action.</p>\n<p>An example of a string concatenation:</p>\n<pre><code class="hljs language-ruby">programming_language = <span class="hljs-string">&quot;Ruby&quot;</span>\nprogramming_language + <span class="hljs-string">&quot; is a beautiful programming_language&quot;</span> <span class="hljs-comment"># =&gt; &quot;Ruby is a beautiful programming_language&quot;</span>\n</code></pre>\n<p>An example of a string interpolation:</p>\n<pre><code class="hljs language-ruby">programming_language = <span class="hljs-string">&quot;Ruby&quot;</span>\n<span class="hljs-string">&quot;<span class="hljs-subst">#{programming_language}</span> is a beautiful programming_language&quot;</span> <span class="hljs-comment"># =&gt; &quot;Ruby is a beautiful programming_language&quot;</span>\n</code></pre>\n<p>I prefer string interpolation.</p>\n<p>What do you think?</p>\n<h4 id="the-if-statement">The if statement</h4>\n<p>I like to use the <strong>if</strong> statement:</p>\n<pre><code class="hljs language-ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hey_ho?</span></span>\n  <span class="hljs-literal">true</span>\n<span class="hljs-keyword">end</span>\n\nputs <span class="hljs-string">&quot;let’s go&quot;</span> <span class="hljs-keyword">if</span> hey_ho?\n</code></pre>\n<p>Pretty nice to code like that.</p>\n<p>Feels really natural.</p>\n<h4 id="the-try-method-with-rails-mode-on">The try method (with Rails mode on)</h4>\n<p>The <strong>try</strong> method invokes the method identified by the symbol, passing it any arguments and/or the block specified. This is similar to Ruby’s <strong>Object#send.</strong> Unlike that method, <strong>nil</strong> will be returned if the receiving object is a <strong>nil</strong> object or <strong>NilClass.</strong></p>\n<p>Using <strong>if and unless</strong> condition statement:</p>\n<pre><code class="hljs language-ruby">user.id <span class="hljs-keyword">unless</span> user.<span class="hljs-literal">nil</span>?\n</code></pre>\n<p>Using the **try **method:</p>\n<pre><code class="hljs language-ruby">user.try(<span class="hljs-symbol">:id</span>)\n</code></pre>\n<p>Since Ruby 2.3, we can use Ruby’s safe navigation operator** (&amp;.)** instead of Rails **try **method.</p>\n<pre><code class="hljs language-ruby">user&amp;.id\n</code></pre>\n<h4 id="double-pipe-equals---memoization">Double pipe equals (||=) / memoization</h4>\n<p>This feature is so C-O-O-L. It’s like caching a value in a variable.</p>\n<pre><code class="hljs language-ruby">some_variable <span class="hljs-params">||</span>= <span class="hljs-number">10</span>\nputs some_variable <span class="hljs-comment"># =&gt; 10</span>\n\nsome_variable <span class="hljs-params">||</span>= <span class="hljs-number">99</span>\nputs some_variable <span class="hljs-comment"># =&gt; 10</span>\n</code></pre>\n<p>You don’t need to use the <strong>if</strong> statement ever. Just use double pipe equals <strong>(||=)</strong> and it’s done.</p>\n<p>Simple and easy.</p>\n<h4 id="class-static-method">Class static method</h4>\n<p>One way I like to write Ruby classes is to define a **static **method (class method).</p>\n<pre><code class="hljs language-ruby">GetSearchResult.call(params)\n</code></pre>\n<p>Simple. Beautiful. Intuitive.</p>\n<p>What happens in the background?</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetSearchResult</span></span>\n  def <span class="hljs-keyword">self</span>.call(params)\n    new(params).call\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(params)</span></span>\n    <span class="hljs-variable">@params</span> = params\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span></span>\n    <span class="hljs-comment"># ... your code here ...</span>\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>The <strong>self.call</strong> method initializes an instance, and this object calls the **call **method. <a href="https://github.com/collectiveidea/interactor">Interactor design pattern</a> uses it.</p>\n<h4 id="getters-and-setters">Getters and setters</h4>\n<p>For the same <strong>GetSearchResult</strong> class, if we want to use the params, we can use the @params</p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetSearchResult</span></span>\n  def <span class="hljs-keyword">self</span>.call(params)\n    new(params).call\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(params)</span></span>\n    <span class="hljs-variable">@params</span> = params\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span></span>\n    <span class="hljs-comment"># ... your code here ...</span>\n    <span class="hljs-variable">@params</span> <span class="hljs-comment"># do something with <span class="hljs-doctag">@params</span></span>\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>We define a **setter **and <strong>getter:</strong></p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetSearchResult</span></span>\n  def <span class="hljs-keyword">self</span>.call(params)\n    new(params).call\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(params)</span></span>\n    <span class="hljs-variable">@params</span> = params\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span></span>\n    <span class="hljs-comment"># ... your code here ...</span>\n    params <span class="hljs-comment"># do something with params method here</span>\n  <span class="hljs-keyword">end</span>\n\n  private\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">params</span></span>\n    <span class="hljs-variable">@params</span>\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">params=</span><span class="hljs-params">(parameters)</span></span>\n    <span class="hljs-variable">@params</span> = parameters\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>Or we can define <strong>attr_reader</strong>, <strong>attr_writer,</strong> or <strong>attr_accessor</strong></p>\n<pre><code class="hljs language-ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetSearchResult</span></span>\n  <span class="hljs-keyword">attr_reader</span> <span class="hljs-symbol">:param</span>\n\n  def <span class="hljs-keyword">self</span>.call(params)\n    new(params).call\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(params)</span></span>\n    <span class="hljs-variable">@params</span> = params\n  <span class="hljs-keyword">end</span>\n\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span></span>\n    <span class="hljs-comment"># ... your code here ...</span>\n    params <span class="hljs-comment"># do something with params method here</span>\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>Nice.</p>\n<p>We don’t need to define the <strong>getter</strong> and <strong>setter</strong> methods. The code just became simpler, just what we want.</p>\n<h4 id="tap">Tap</h4>\n<p>Imagine you want to define a <strong>create_user</strong> method. This method will instantiate, set the parameters, and save and return the user.</p>\n<p>Let’s do it.</p>\n<pre><code class="hljs language-ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_user</span><span class="hljs-params">(params)</span></span>\n  user       = User.new\n  user.id    = params[<span class="hljs-symbol">:id</span>]\n  user.name  = params[<span class="hljs-symbol">:name</span>]\n  user.email = params[<span class="hljs-symbol">:email</span>]\n  <span class="hljs-comment"># ...</span>\n  user.save\n  user\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>Simple. Nothing wrong here.</p>\n<p>So now let’s implement it with the <strong>tap</strong> method</p>\n<pre><code class="hljs language-ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_user</span><span class="hljs-params">(params)</span></span>\n  User.new.tap <span class="hljs-keyword">do</span> <span class="hljs-params">|user|</span>\n    user.id    = params[<span class="hljs-symbol">:id</span>]\n    user.name  = params[<span class="hljs-symbol">:name</span>]\n    user.email = params[<span class="hljs-symbol">:email</span>]\n    <span class="hljs-comment"># ...</span>\n    user.save\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>You just need to worry about the user parameters, and the <strong>tap</strong> method will return the user object for you.</p>\n<h3 id="thats-it">That’s it</h3>\n<p>We learned I write idiomatic Ruby by coding with</p>\n<ul>\n<li><p>array methods</p>\n</li>\n<li><p>syntax</p>\n</li>\n</ul>\n<p>We also learned how Ruby is beautiful and intuitive, and runs even faster.</p>\n<p>And that’s it, guys! I will be updating and including more details to my <a href="https://medium.com/@leandrotk_/">blog</a>. The idea is to share great content, and the community helps to improve this post! ☺</p>\n<p>I hope you guys appreciate the content and learned how to program beautiful code (and better software).</p>\n<p>If you want a complete Ruby course, learn real-world coding skills and build projects, try <a href="https://onemonth.com/courses/ruby?mbsy=lG6tt&amp;mbsy_source=97541b09-e3ab-45d7-a9b1-dbc77028e008&amp;campaignid=33446&amp;discount_code=TKRuby1">One Month Ruby Bootcamp</a>. See you there ☺</p>\n<p>This post appeared first <a href="https://medium.com/the-renaissance-developer/idiomatic-ruby-1b5fa1445098">here</a> on my <a href="https://medium.com/the-renaissance-developer">Renaissance Developer publication</a>.</p>\n<p>Have fun, keep learning, and always keep coding!</p>\n',
  },
  {
    title: 'Building an Interpreter Series',
    content:
      '<div class="series">\nAfter rumbling a lot about learning Programming Language Theory (PLT), I finally decided to commit and learn this field that I care about.\n\nI wanted to start simple, with a friendly resource to just get started. After collecting a lot of resources, most of them were heavy books and papers, I got a copy of the `Writing an interpreter in Go` book. It seemed to be the simplest resource to get started in the field and it also let me be very practical in terms of engineering a compiler.\n\nBut instead of Go, I wanted to use a language I\'m most familiar nowadays. So TypeScript it\'s.\n\nThis book creates an interpreter for the Monkey programming language and we\'ll see in each chapter of this series the building blocks of the interpreter.\n\nIf you want to see the code, I have a public Github repository for this implementation: monkey-ts, the Monkey programming language\'s compiler written in TypeScript.\n\n## Building an Interpreter Series\n\n- <time class="date">2021-05-23</time> <span>[Building an Interpreter: Lexical Analysis - Part 1](/series/building-an-interpreter/lexical-analysis-part-1)</span>\n- <time class="date">2021-05-29</time> <span>[Building an Interpreter: Lexical Analysis - Part 2](/series/building-an-interpreter/lexical-analysis-part-2)</span>\n- <time class="date">2021-07-18</time> <span>[Building an Interpreter: Lexical Analysis - Part 3](/series/building-an-interpreter/lexical-analysis-part-3)</span>\n- <time class="date">2021-07-20</time> <span>[Building an Interpreter: REPL](/series/building-an-interpreter/repl)</span>\n- <time class="date">2021-10-17</time> <span>[Building an Interpreter: Parser - Part 1: Fundamental parts of AST and basic statements](/series/building-an-interpreter/parser-part-1)</span>\n\nHave fun, keep learning, and always keep coding!\n\n</div>\n',
  },
  {
    title: 'Data Structures Series',
    content:
      '<div class="series">\nThis is part of my series on `Data Structures`, where I document posts about algorithms problems I solved.\n\nThis is live document and will be updated everytime I solve new problems.\n\n## Data Structures Series\n\n- <time class="date">2020-01-06</time> <span>[Stack Data Structure](/series/data-structures/stack-data-structure)</span>\n- <time class="date">2020-01-13</time> <span>[Queue Data Structure](/series/data-structures/queue-data-structure)</span>\n- <time class="date">2020-02-02</time> <span>[Linked List Data Structure](/series/data-structures/linked-list-data-structure)</span>\n- <time class="date">2020-02-10</time> <span>[Tree Data Structure](/series/data-structures/tree-data-structure)</span>\n</div>\n',
  },
  {
    title: 'Elixir Learnings Series',
    content:
      '<div class="series">\nThis is part of my series on `Elixir Learnings`, where I share micro posts about everything I\'m learning related to Elixir and functional programming.\n\nThis is live document and will be updated everytime I learn new things.\n\n## Elixir Learnings Series\n\n- <time class="date">2020-04-13</time> <span>[div and rem](/series/elixir-learnings/div-and-rem)</span>\n- <time class="date">2020-04-21</time> <span>[playing around with lists](/series/elixir-learnings/playing-around-with-lists)</span>\n\n</div>\n',
  },
  {
    title: 'Frontend Challenges Series',
    content:
      '<div class="series">\nThis is a series called `Frontend Challenges`, where I document posts about challenges in the frontend domain.\n\nThis is live document and will be updated everytime I design and implement a new frontend challenge.\n\n## Frontend Challenges Series\n\n- <time class="date">2021-12-27</time> <span>[Front-end Engineer Assignment](/series/frontend-challenges/findhotel-frontend-challenge)</span>\n</div>\n',
  },
  {
    title: 'Mastering JavaScript Series',
    content:
      '<div class="series">\nThis is part of my series on <code>Mastering JavaScript Series</code>, where I share posts about everything I\'m learning to master JavaScript.\nThis is live document and will be updated everytime I learn new things.\n\n## Mastering JavaScript Series\n\n- <time class="date">2022-01-03</time> <span>[Revisiting Conditionals in JavaScript and TypeScript](/series/mastering-javascript/revisiting-conditionals-in-javascript-and-typescript)</span>\n- <time class="date">2022-01-10</time> <span>[Destructuring Arrays and Objects in JavaScript](/series/mastering-javascript/destructuring-objects-and-arrays)</span>\n</div>\n',
  },
  {
    title: "Rebuilding Mercari's Search Series",
    content:
      '<div class="series">\nI\'m always looking for ways to improve my craft. One of the fun things I do is side projects. Things that I find interesting but also challenging.\n\nA search experience was something that came to my mind as it has a lot of complexity both in the frontend and in the backend sides.\n\nI wanted to build this search similarly to [_Mercari\'s Search_](https://www.mercari.com/) focusing on the product\'s frontend aspect first. So I could think mostly about the frontend challenges like state management, performance, accessibility, data fetching, testing, and architecture.\n\nThis post will be a live document where I update with all the upcoming posts from this series. First, we\'ll just setup the project. Then the first implementation of the home and the main menu\'s draft. Then we\'ll dive into the product list and the filter architecture.\n\n## Rebuilding Mercari‘s Search Series\n\n- <time class="date">2021-06-20</time> <span>[Setup NextJS with TypeScript, Prettier, and Jest](/series/rebuilding-mercaris-search/setup-nextjs-with-typescript-prettier-and-jest)</span>\n- <time class="date">2021-06-23</time> <span>[Home and Menu](/series/rebuilding-mercaris-search/home-menu)</span>\n</div>\n',
  },
  {
    title: 'TypeScript Learnings Series',
    content:
      '<div class="series">\nThis is part of my series on `TypeScript Learnings` Series, where I share micro posts about everything I\'m learning related to TypeScript.\n\nThis is live document and will be updated everytime I learn new things.\n\n## TypeScript Learnings Series\n\n- <time class="date">2020-04-05</time> <span>[Object Destruturing](/series/typescript-learnings/object-destructuring)</span>\n- <time class="date">2020-04-25</time> <span>[Type System](/series/typescript-learnings/type-system)</span>\n- <time class="date">2020-05-09</time> <span>[Interesting Types](/series/typescript-learnings/interesting-types)</span>\n- <time class="date">2020-05-23</time> <span>[Union Types with Objects](/series/typescript-learnings/union-types-with-objects)</span>\n</div>\n',
  },
  {
    title: 'Website Changelog Series',
    content:
      '<div class="series">\nThis is a series about everything I want to share about the updates on my website. It\'s like a changelog but in a blog post format. Here it\'ll be everything from explaining my mission to every feature I deploy to production.\n\n## Website Changelog\n\n- <time class="date">2022-01-01</time> <span>[Building my Legacy through Accessible, Open, and Free content](/series/website-changelog/building-my-legacy-through-accessible-open-and-free-content)</span>\n- <time class="date">2022-01-04</time> <span>[Refactoring Setup: NextJS, TypeScript, Prettier, and Testing Library](/series/website-changelog/refactoring-setup)</span>\n</div>\n',
  },
  {
    title: 'Building an Interpreter: Lexical Analysis - Part 1',
    content:
      '<p>Lexical Analysis is the process of transforming the source code into tokens. Tokens are an accessible form to ease the way we interpret the programming language.</p>\n<img src="/series/building-an-interpreter/lexical-analysis.png">\n\n<p>The book <code>Writing an Interpreter in Go</code> shows a very simple example to illustrate how lexing works. Imagine this source code:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">let</span> x = <span class="hljs-number">5</span> + <span class="hljs-number">5</span>;\n</code></pre>\n<p>We read this source code and generate tokens like this:</p>\n<pre><code class="hljs language-jsx">[\n  <span class="hljs-variable constant_">LET</span>,\n  <span class="hljs-title function_">IDENTIFIER</span>(<span class="hljs-string">&#x27;x&#x27;</span>),\n  <span class="hljs-variable constant_">EQUAL_SIGN</span>,\n  <span class="hljs-title function_">INTEGER</span>(<span class="hljs-number">5</span>),\n  <span class="hljs-variable constant_">PLUS_SIGN</span>,\n  <span class="hljs-title function_">INTEGER</span>(<span class="hljs-number">5</span>),\n  <span class="hljs-variable constant_">SEMICOLON</span>,\n];\n</code></pre>\n<ul>\n<li><code>let</code> will be the <code>LET</code> token</li>\n<li><code>x</code> will be the <code>INDENTIFIER</code> token with literal <code>&quot;x&quot;</code></li>\n<li><code>=</code> will be the <code>EQUAL_SIGN</code> token</li>\n<li><code>5</code> will be the <code>INTEGER</code> token with literal <code>5</code></li>\n<li><code>+</code> will be the <code>PLUS_SIGN</code> token</li>\n<li><code>5</code> will be the <code>INTEGER</code> token with literal <code>5</code> again</li>\n<li><code>;</code> will be the <code>SEMICOLON</code> token</li>\n</ul>\n<p>Take a look that we don&#39;t count &quot;spaces&quot; as tokens.</p>\n<h2 id="defining-tokens">Defining tokens</h2>\n<p>To define tokens, I created a class to represent and to create tokens when we start to analyze our source code.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">TokenType</span> = <span class="hljs-built_in">string</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Token</span> {\n  <span class="hljs-attr">type</span>: <span class="hljs-title class_">TokenType</span>;\n  <span class="hljs-attr">literal</span>: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>: TokenType, literal: <span class="hljs-built_in">string</span></span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = <span class="hljs-keyword">type</span>;\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">literal</span> = literal;\n  }\n}\n</code></pre>\n<p>The implementation is very simple. It contains the token type and the literal value. A simple example would be a token like the basic <code>+</code> operator. We create it like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> plusToken = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(<span class="hljs-string">&#x27;PLUS&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>);\n</code></pre>\n<p>It has the type <code>PLUS</code> and the literal value <code>+</code>.</p>\n<p>Now let&#39;s define all the possible token types for the Monkey language.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-built_in">enum</span> <span class="hljs-title class_">Tokens</span> {\n  <span class="hljs-variable constant_">ILLEGAL</span> = <span class="hljs-string">&#x27;ILLEGAL&#x27;</span>,\n  <span class="hljs-variable constant_">EOF</span> = <span class="hljs-string">&#x27;EOF&#x27;</span>,\n  <span class="hljs-variable constant_">IDENT</span> = <span class="hljs-string">&#x27;IDENT&#x27;</span>,\n  <span class="hljs-variable constant_">INT</span> = <span class="hljs-string">&#x27;INT&#x27;</span>,\n  <span class="hljs-variable constant_">ASSIGN</span> = <span class="hljs-string">&#x27;=&#x27;</span>,\n  <span class="hljs-variable constant_">PLUS</span> = <span class="hljs-string">&#x27;+&#x27;</span>,\n  <span class="hljs-variable constant_">COMMA</span> = <span class="hljs-string">&#x27;,&#x27;</span>,\n  <span class="hljs-variable constant_">SEMICOLON</span> = <span class="hljs-string">&#x27;;&#x27;</span>,\n  <span class="hljs-variable constant_">LPAREN</span> = <span class="hljs-string">&#x27;(&#x27;</span>,\n  <span class="hljs-variable constant_">RPAREN</span> = <span class="hljs-string">&#x27;)&#x27;</span>,\n  <span class="hljs-variable constant_">LBRACE</span> = <span class="hljs-string">&#x27;{&#x27;</span>,\n  <span class="hljs-variable constant_">RBRACE</span> = <span class="hljs-string">&#x27;}&#x27;</span>,\n  <span class="hljs-variable constant_">FUNCTION</span> = <span class="hljs-string">&#x27;FUNCTION&#x27;</span>,\n  <span class="hljs-variable constant_">LET</span> = <span class="hljs-string">&#x27;LET&#x27;</span>,\n}\n</code></pre>\n<p>Now we can use the defined tokens instead of a random string. Let&#39;s see the <code>+</code> example again:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> plusToken = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">PLUS</span>, <span class="hljs-string">&#x27;+&#x27;</span>);\n</code></pre>\n<p>Nice!</p>\n<h2 id="lexer">Lexer</h2>\n<p>As we saw earlier, the lexer receives the source code and output tokens that have a more accessible source code representation.</p>\n<p>Our lexer will receive the source code input and it&#39;ll have a method called <code>nextToken</code> to output each token while reading the source code.</p>\n<p>To validate our <code>Lexer</code> code, let&#39;s add tests to match tokens.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Tokens</span>, <span class="hljs-title class_">Token</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/token/token&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Lexer</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../lexer&#x27;</span>;\n\n<span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Lexer&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;matches each token&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> input = <span class="hljs-string">&#x27;=+(){},;&#x27;</span>;\n    <span class="hljs-keyword">const</span> <span class="hljs-attr">tokens</span>: <span class="hljs-title class_">Token</span>[] = [\n      { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">ASSIGN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;=&#x27;</span> },\n      { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">PLUS</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;+&#x27;</span> },\n      { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LPAREN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;(&#x27;</span> },\n      { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RPAREN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;)&#x27;</span> },\n      { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LBRACE</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;{&#x27;</span> },\n      { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RBRACE</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;}&#x27;</span> },\n      { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">COMMA</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;,&#x27;</span> },\n      { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;;&#x27;</span> },\n      { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">EOF</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;&#x27;</span> },\n    ];\n\n    <span class="hljs-keyword">const</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(input);\n\n    tokens.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">{ <span class="hljs-keyword">type</span>, literal }</span>) =&gt;</span> {\n      <span class="hljs-keyword">const</span> inputToken = lexer.<span class="hljs-title function_">nextToken</span>();\n      <span class="hljs-title function_">expect</span>(inputToken.<span class="hljs-property">type</span>).<span class="hljs-title function_">toEqual</span>(<span class="hljs-keyword">type</span>);\n      <span class="hljs-title function_">expect</span>(inputToken.<span class="hljs-property">literal</span>).<span class="hljs-title function_">toEqual</span>(literal);\n    });\n  });\n});\n</code></pre>\n<p>Ok, let&#39;s break it down!</p>\n<ul>\n<li>The <code>input</code> is our source code. It&#39;ll be transformed into tokens.</li>\n<li>The <code>tokens</code> is a list of tokens we expect to match the source code.</li>\n<li>The <code>Lexer</code> is a class to be implemented.<ul>\n<li>It receives an input as source code.</li>\n<li>And have a <code>nextToken</code> method to output the next token.</li>\n</ul>\n</li>\n<li>For each token in the list of tokens, we want to test if they match the &quot;next token&quot; from our lexer.</li>\n</ul>\n<p>Running our test, we get an error as we didn&#39;t implement our Lexer yet. So let&#39;s do it!</p>\n<p>To help analyze the source code, we will have 4 different variable helpers:</p>\n<ul>\n<li><code>input</code>: this is the actual source code.</li>\n<li><code>position</code>: the current position of the current char we are reading.</li>\n<li><code>readPosition</code>: the position we are about to read the next char.</li>\n<li><code>char</code>: the character of the source code we are reading.</li>\n</ul>\n<p>With these four parameters, we can build a simple class representing the <code>Lexer</code>.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lexer</span> {\n  <span class="hljs-attr">input</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">position</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">readPosition</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">char</span>: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">input: <span class="hljs-built_in">string</span></span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">input</span> = input;\n  }\n}\n</code></pre>\n<p>Running our test again, we fix the lexer instantiation. But now we got another issue. When reading each token, we expect that the <code>Lexer</code> instance has a <code>nextToken</code> method. But in our current lexer implementation, we don&#39;t do much. We just let it be instantiated. Let&#39;s implement the <code>nextToken</code> method.</p>\n<p>To get started, we first need to make sure that the lexer starts with its variables in the correct state. We do this in the constructor.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-variable constant_">INITIAL_POSITION</span> = <span class="hljs-number">0</span>;\n<span class="hljs-variable constant_">EMPTY_CHAR</span> = <span class="hljs-string">&#x27;&#x27;</span>;\n\n<span class="hljs-title function_">constructor</span>(<span class="hljs-params">input: <span class="hljs-built_in">string</span></span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">input</span> = input;\n  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setUpInitialState</span>();\n}\n\n<span class="hljs-keyword">private</span> <span class="hljs-title function_">setUpInitialState</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">INITIAL_POSITION</span>;\n  <span class="hljs-variable language_">this</span>.<span class="hljs-property">readPosition</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">INITIAL_POSITION</span>;\n  <span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">EMPTY_CHAR</span>;\n}\n</code></pre>\n<p>The initial state for the positions is the index <code>0</code> and the <code>char</code> starts with the empty character (<code>&#39;&#39;</code>) state.</p>\n<p>The <code>nextToken</code> algorithm is very simple in this first implementation. We just need to:</p>\n<ul>\n<li>read the next character</li>\n<li>transform this character into a token</li>\n<li>return this new token</li>\n</ul>\n<p>&quot;read the next character&quot; is basically the idea of updating the current state of the <code>position</code>, the <code>readPosition</code>, and the <code>char</code> variables.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">readChar</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">readPosition</span> &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">input</span>.<span class="hljs-property">length</span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span> = <span class="hljs-string">&#x27;&#x27;</span>;\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">input</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">readPosition</span>];\n  }\n\n  <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">readPosition</span>;\n  <span class="hljs-variable language_">this</span>.<span class="hljs-property">readPosition</span> += <span class="hljs-number">1</span>;\n}\n</code></pre>\n<p>We start verifying the <code>readPosition</code> to make sure that we didn&#39;t finish reading the entire source code. If we finish reading the source code, we just update the <code>char</code> with its initial state (empty string).</p>\n<p>To get the next character, we just access the input with the next position index and update the <code>char</code>.</p>\n<p>After that, we always need to update the indices:</p>\n<ul>\n<li><code>position</code> becomes the <code>readPosition</code></li>\n<li><code>readPosition</code> increments by one</li>\n</ul>\n<p>Now that we read the next character, we can generate the token based on this new current state. Here it&#39;s very simple. We just need to map the current <code>char</code> to its own <code>Token</code>. We build this with a simple switch case.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">getToken</span>(): <span class="hljs-title class_">Token</span> {\n  <span class="hljs-keyword">switch</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span>) {\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;=&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">ASSIGN</span>, <span class="hljs-string">&#x27;=&#x27;</span>);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;;&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>, <span class="hljs-string">&#x27;;&#x27;</span>);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LPAREN</span>, <span class="hljs-string">&#x27;(&#x27;</span>);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RPAREN</span>, <span class="hljs-string">&#x27;)&#x27;</span>);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;,&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">COMMA</span>, <span class="hljs-string">&#x27;,&#x27;</span>);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">PLUS</span>, <span class="hljs-string">&#x27;+&#x27;</span>);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;{&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LBRACE</span>, <span class="hljs-string">&#x27;{&#x27;</span>);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;}&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RBRACE</span>, <span class="hljs-string">&#x27;}&#x27;</span>);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">EOF</span>, <span class="hljs-string">&#x27;&#x27;</span>);\n  }\n}\n</code></pre>\n<p>So let&#39;s get everything together now. We need to set up the lexer with the appropriate state and then start reading the source code. The constructor looks like this now:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">constructor</span>(<span class="hljs-params">input: <span class="hljs-built_in">string</span></span>) {\n  <span class="hljs-variable language_">this</span>.<span class="hljs-property">input</span> = input;\n  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setUpInitialState</span>();\n  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">readChar</span>();\n}\n</code></pre>\n<p>and the <code>nextToken</code> looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">nextToken</span>(): <span class="hljs-title class_">Token</span> {\n  <span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getToken</span>();\n  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">readChar</span>();\n  <span class="hljs-keyword">return</span> token;\n}\n</code></pre>\n<p>As we read the next character in the constructor of the <code>Lexer</code>, we can start by getting the token, read the next character and return the created token.</p>\n<p>Running our test again, we fixed all the issues and it is passing now.</p>\n<h2 id="final-words--resources">Final words &amp; Resources</h2>\n<p>I&#39;m very happy to share with you the first post about my journey learning compilers and studying programming language theory.</p>\n<p>This is the first part of the Lexical Analysis posts and part of the <a href="/series/building-an-interpreter">Building an Interpreter series</a>.</p>\n<p>These are the resources I&#39;m using to learn more about this field:</p>\n<ul>\n<li><a href="https://github.com/imteekay/monkey-ts">monkey-ts</a>: the open source project of the compiler for the TypeScript version of the Monkey programming language.</li>\n<li><a href="https://github.com/imteekay/programming-language-theory">Programming Language Theory</a>: a bunch of resources about my studies on Programming Language Theory &amp; Applied PLT.</li>\n<li><a href="https://www.goodreads.com/book/show/32681092-writing-an-interpreter-in-go">Writing an Interpreter in Go</a>: the book I&#39;m reading to learn and implement the Monkey compiler.</li>\n</ul>\n',
  },
  {
    title: 'Building an Interpreter: Lexical Analysis - Part 2',
    content:
      '<p>This post is part of a series called <a href="/series/building-an-interpreter">Building an Interpreter</a>. The <a href="/series/building-an-interpreter/lexical-analysis-part-1">first part of the Lexical Analysis</a> post illustrated a basic lexer creating tokens from a simple source code.</p>\n<p>In this post we&#39;ll extend the tests and improve the <code>Lexer</code> to work with new tokens. The source code was this basic one-liner <code>&quot;=+(){},;&quot;</code>. But now we want a more complex source code:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> input = <span class="hljs-string">`\n  let five = 5;\n  let ten = 10;\n  \n    let add = fn(x, y) {\n    x + y;\n  };\n  \n    let result = add(five, ten);\n`</span>;\n</code></pre>\n<p>With a new source code, we need more tokens to represent it. These are the tokens that we need to make the source code matches:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">tokens</span>: <span class="hljs-title class_">Token</span>[] = [\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LET</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;let&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IDENT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;five&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">ASSIGN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;=&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">INT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;5&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;;&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LET</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;let&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IDENT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;ten&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">ASSIGN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;=&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">INT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;10&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;;&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LET</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;let&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IDENT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;add&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">ASSIGN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;=&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">FUNCTION</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;fn&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LPAREN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;(&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IDENT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;x&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">COMMA</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;,&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IDENT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;y&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RPAREN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;)&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LBRACE</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;{&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IDENT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;x&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">PLUS</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;+&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IDENT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;y&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;;&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RBRACE</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;}&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;;&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LET</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;let&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IDENT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;result&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">ASSIGN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;=&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IDENT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;add&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LPAREN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;(&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IDENT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;five&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">COMMA</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;,&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IDENT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;ten&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RPAREN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;)&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;;&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">EOF</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;&#x27;</span> },\n];\n</code></pre>\n<p>The test keeps the same, only the data changes.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(input);\n\ntokens.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">{ <span class="hljs-keyword">type</span>, literal }</span>) =&gt;</span> {\n  <span class="hljs-keyword">const</span> inputToken = lexer.<span class="hljs-title function_">nextToken</span>();\n\n  <span class="hljs-title function_">expect</span>(inputToken.<span class="hljs-property">type</span>).<span class="hljs-title function_">toEqual</span>(<span class="hljs-keyword">type</span>);\n  <span class="hljs-title function_">expect</span>(inputToken.<span class="hljs-property">literal</span>).<span class="hljs-title function_">toEqual</span>(literal);\n});\n</code></pre>\n<p>Running this test, we start getting new errors related to the new tokens that don&#39;t match with the next generated token by our lexer.</p>\n<p>Also, the new tokens are a bit different now. They are not a &quot;single character&quot; token, they are a bit more complex and should be handled in a different way.</p>\n<p>The simplest example is the integer tokens. In the test&#39;s source code, we have integer <code>5</code> (single character), but we also have integer <code>10</code> (multiple characters).</p>\n<p>As they can be multiple characters tokens, we&#39;ll add the default case in our <code>Lexer</code>&#39;s switch case. Starting with integers, we need to make sure that the current character is a digit, read the number to get the whole token literal, in this case, the whole integer. As we know that it&#39;s an integer and we have the integer value, we just create a new token and return it. It looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isDigit</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span>)) {\n  <span class="hljs-keyword">const</span> tokenLiteral = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">readNumber</span>();\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">INT</span>, tokenLiteral);\n}\n</code></pre>\n<p>Two parts are missing:</p>\n<ul>\n<li><code>isDigit</code>: verifies that a given character is a digit.</li>\n<li><code>readNumber</code>: read the whole number, independently if it&#39;s a single digit number or bigger.</li>\n</ul>\n<p>Lets start with the easier one: <code>isDigit</code>. To simplify the idea of a digit, we&#39;ll just do a verification if the character is between <code>&#39;0&#39;</code> and <code>&#39;9&#39;</code>.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">isDigit</span>(<span class="hljs-params">char: <span class="hljs-built_in">string</span></span>) {\n  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;0&#x27;</span> &lt;= char &amp;&amp; char &lt;= <span class="hljs-string">&#x27;9&#x27;</span>;\n}\n</code></pre>\n<p>Now about the <code>readNumber</code>. The algorithm would be:</p>\n<ul>\n<li>get the initial position of the number</li>\n<li>read the next character while it&#39;s still a digit</li>\n<li>now we have the initial position and the last position</li>\n<li>return the slice of the source code: the whole number</li>\n</ul>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">readNumber</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">const</span> initialIntPosition = <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>;\n\n  <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isDigit</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span>)) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">readChar</span>();\n  }\n\n  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">input</span>.<span class="hljs-title function_">substring</span>(initialIntPosition, <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>);\n}\n</code></pre>\n<p>Reading the next character, we update the current state of the main variables (<code>position</code>, <code>char</code>, and <code>readPosition</code>).</p>\n<p>We use the <code>substring</code> string&#39;s method to the source code&#39;s slice that represents the whole number.</p>\n<p>This is a very simplistic way to handle numbers as we are just handling integers but not float numbers.</p>\n<p>Running the tests again, we don&#39;t have the integer token problem anymore. But we still have work to do and more tokens to build.</p>\n<p>Now we start to generate the other tokens: identifiers and keywords. The main difference between identifiers and keywords is that keywords are part of the language &quot;grammar&quot;, the language&#39;s syntax. In the test&#39;s source code, we saw keywords like <code>fn</code> and <code>let</code> for example. Identifiers, on the other hand, are not part of the language&#39;s syntax, they are user-defined identifiers.</p>\n<p>To first identify that the next token is an identifier or a keyword, we need to verify if the current character is a letter, read the next characters until it is not a letter anymore, and decides if the token is an identifier or a keyword looking at its value.</p>\n<p>We add this code to the default part of the switch case as we did for the number tokens.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isLetter</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span>)) {\n  <span class="hljs-keyword">const</span> tokenLiteral = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">readIdentifier</span>();\n  <span class="hljs-keyword">const</span> tokenType = <span class="hljs-title function_">lookupIdent</span>(tokenLiteral);\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(tokenType, tokenLiteral);\n}\n</code></pre>\n<p>Let&#39;s break it down:</p>\n<ul>\n<li><code>isLetter</code>: just a method to verify if the current character is a letter.</li>\n<li><code>readIdentifier</code>: reads the characters until it&#39;s not part of the identifier/keyword anymore and return it.</li>\n<li><code>lookupIdent</code>: returns the token type (<code>FUNCTION</code>, <code>LET</code>, or <code>IDENT</code>) based on the token literal we got from the <code>readIdentifier</code>.</li>\n<li>And finally it returns the new generated token.</li>\n</ul>\n<p>The <code>isLetter</code> is pretty basic:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">isLetter</span>(<span class="hljs-params">char: <span class="hljs-built_in">string</span></span>) {\n  <span class="hljs-keyword">return</span> (\n    (<span class="hljs-string">&#x27;a&#x27;</span> &lt;= char &amp;&amp; char &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) ||\n    (<span class="hljs-string">&#x27;A&#x27;</span> &lt;= char &amp;&amp; char &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>) ||\n    char === <span class="hljs-string">&#x27;_&#x27;</span>\n  );\n}\n</code></pre>\n<p>The Monkey programming language accepts <code>_</code> as part of the identifiers. It&#39;s very similar to Ruby and Python. And the main part of this verification is the idea that the <code>char</code> should be between <code>&#39;a&#39;</code> and <code>&#39;z&#39;</code> (lower case characters) or between <code>&#39;A&#39;</code> and <code>&#39;Z&#39;</code> (upper case characters).</p>\n<p>The <code>readIdentifier</code> is pretty similar to the <code>readNumber</code> that we implemented earlier.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">readIdentifier</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">const</span> initialCharPosition = <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>;\n\n  <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isLetter</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span>)) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">readChar</span>();\n  }\n\n  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">input</span>.<span class="hljs-title function_">substring</span>(initialCharPosition, <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>);\n}\n</code></pre>\n<ul>\n<li>We get the initial char position</li>\n<li>Read the next char while it is still a letter</li>\n<li>With the initial position and the last position of the identifier, we can get the slice of the source code and return it.</li>\n</ul>\n<p>And finally the <code>lookupIdent</code> that we decided to implement it in the <code>Token</code> module because it belongs to that domain.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">KeywordsType</span> {\n  [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span>;\n}\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Keywords</span>: <span class="hljs-title class_">KeywordsType</span> = {\n  <span class="hljs-attr">fn</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">FUNCTION</span>,\n  <span class="hljs-attr">let</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LET</span>,\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">lookupIdent</span>(<span class="hljs-params">ident: <span class="hljs-built_in">string</span></span>) {\n  <span class="hljs-keyword">return</span> ident <span class="hljs-keyword">in</span> <span class="hljs-title class_">Keywords</span> ? <span class="hljs-title class_">Keywords</span>[ident] : <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IDENT</span>;\n}\n</code></pre>\n<p>It receives the identifier string, verify if it is in the <code>Keywords</code> object, if it&#39;s, get the token type, otherwise, just return the <code>IDENT</code> as the token type.</p>\n<p>Running the tests again, we see more tokens passing the test. But some still fail. It turns out that we are not handling the white spaces between characters. Let&#39;s handle that issue!</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">skipWhitespace</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">while</span> (\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span> == <span class="hljs-string">&#x27; &#x27;</span> ||\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span> == <span class="hljs-string">&#x27;\\t&#x27;</span> ||\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span> == <span class="hljs-string">&#x27;\\n&#x27;</span> ||\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span> == <span class="hljs-string">&#x27;\\r&#x27;</span>\n  ) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">readChar</span>();\n  }\n}\n</code></pre>\n<p>To skip the white spaces, we need to keep reading the next until it&#39;s not a white space anymore.</p>\n<ul>\n<li><code>&#39; &#39;</code>: white space</li>\n<li><code>&#39;\\t&#39;</code>: add tab</li>\n<li><code>&#39;\\n&#39;</code>: new line</li>\n<li><code>&#39;\\r&#39;</code>: return</li>\n</ul>\n<p>Calling <code>readChar</code> we update the state of the <code>position</code> and <code>char</code> variables. With this new implementation, we just need to add the <code>skipWhitespace</code> to the <code>getToken</code> method before generating any token:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">getToken</span>(): <span class="hljs-title class_">Token</span> {\n  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">skipWhitespace</span>();\n</code></pre>\n<p>The only adjustment we need to do now is to update the <code>nextToken</code>. It was like this before:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">nextToken</span>(): <span class="hljs-title class_">Token</span> {\n  <span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getToken</span>();\n  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">readChar</span>();\n  <span class="hljs-keyword">return</span> token;\n}\n</code></pre>\n<p>But as we read the next char for identifiers, keywords, and integers, we need to remove this line:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">nextToken</span>(): <span class="hljs-title class_">Token</span> {\n  <span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getToken</span>();\n  <span class="hljs-keyword">return</span> token;\n}\n</code></pre>\n<p>...and add only for the other tokens.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;=&#x27;</span>:\n  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">readChar</span>();\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">ASSIGN</span>, <span class="hljs-string">&#x27;=&#x27;</span>);\n</code></pre>\n<p>But as we need to make this same instruction for almost all tokens, I created a private method to handle that.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">buildToken</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>: TokenType, literal: <span class="hljs-built_in">string</span></span>) {\n  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">readChar</span>();\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Token</span>(<span class="hljs-keyword">type</span>, literal);\n}\n</code></pre>\n<p>The use is very straightforward.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">switch</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span>) {\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;=&#x27;</span>:\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">ASSIGN</span>, <span class="hljs-string">&#x27;=&#x27;</span>);\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;;&#x27;</span>:\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>, <span class="hljs-string">&#x27;;&#x27;</span>);\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LPAREN</span>, <span class="hljs-string">&#x27;(&#x27;</span>);\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RPAREN</span>, <span class="hljs-string">&#x27;)&#x27;</span>);\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;,&#x27;</span>:\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">COMMA</span>, <span class="hljs-string">&#x27;,&#x27;</span>);\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">PLUS</span>, <span class="hljs-string">&#x27;+&#x27;</span>);\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;{&#x27;</span>:\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LBRACE</span>, <span class="hljs-string">&#x27;{&#x27;</span>);\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;}&#x27;</span>:\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RBRACE</span>, <span class="hljs-string">&#x27;}&#x27;</span>);\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#x27;</span>:\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">EOF</span>, <span class="hljs-string">&#x27;&#x27;</span>);\n</code></pre>\n<p>Now we have the tests passing and an improved lexer. Our language is taking shape. The source code is a bit more complex and all the tokens were generated. That&#39;s pretty nice!</p>\n<h2 id="final-words--resources"><strong>Final words &amp; Resources</strong></h2>\n<p>If you didn&#39;t have the opportunity, take a look at the <a href="/series/building-an-interpreter/lexical-analysis-part-1">first part of the Lexical Analysis</a>. This is the second post about my journey learning compilers and studying programming language theory. And part of the <a href="/series/building-an-interpreter">Building an Interpreter series</a>.</p>\n<p>These are the resources I&#39;m using to learn more about this field:</p>\n<ul>\n<li><a href="https://github.com/imteekay/monkey-ts">monkey-ts</a>: the open source project of the compiler for the TypeScript version of the Monkey programming language.</li>\n<li><a href="https://github.com/imteekay/programming-language-theory">Programming Language Theory</a>: a bunch of resources about my studies on Programming Language Theory &amp; Applied PLT.</li>\n<li><a href="https://www.goodreads.com/book/show/32681092-writing-an-interpreter-in-go">Writing an Interpreter in Go</a>: the book I&#39;m reading to learn and implement the Monkey compiler.</li>\n</ul>\n',
  },
  {
    title: 'Building an Interpreter: Lexical Analysis - Part 3',
    content:
      '<p>This post is part of a series called <a href="/series/building-an-interpreter">Building an Interpreter</a>. After implementing a <a href="/series/building-an-interpreter/lexical-analysis-part-1">basic lexer</a> and <a href="/series/building-an-interpreter/lexical-analysis-part-2">building more tokens</a>, we&#39;ll extend the token set to work with special characters, new keywords, and the &quot;equal&quot; and &quot;not equal&quot; symbols.</p>\n<p>Let&#39;s add support for <code>==</code>, <code>!</code>, <code>!=</code>, <code>-</code>, <code>/</code>, <code>*</code>, <code>&lt;</code>, <code>&gt;</code>, and the keywords <code>true</code>, <code>false</code>, <code>if</code>, <code>else</code>, and <code>return</code>.</p>\n<h2 id="single-characters-as-tokens">Single characters as tokens</h2>\n<p>First, the single characters, as they are the easiest ones to handle in the lexer.</p>\n<p>We add this to the test:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> input = <span class="hljs-string">`\n  !-/*5;\n  5 &lt; 10 &gt; 5;\n`</span>;\n</code></pre>\n<p>Add new tokens:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">export</span> enum <span class="hljs-title class_">Tokens</span> {\n  <span class="hljs-comment">// ...</span>\n  <span class="hljs-variable constant_">MINUS</span> = <span class="hljs-string">&#x27;-&#x27;</span>,\n  <span class="hljs-variable constant_">BANG</span> = <span class="hljs-string">&#x27;!&#x27;</span>,\n  <span class="hljs-variable constant_">ASTERISK</span> = <span class="hljs-string">&#x27;*&#x27;</span>,\n  <span class="hljs-variable constant_">SLASH</span> = <span class="hljs-string">&#x27;/&#x27;</span>,\n  <span class="hljs-variable constant_">LESS_THAN</span> = <span class="hljs-string">&#x27;&lt;&#x27;</span>,\n  <span class="hljs-variable constant_">GREATER_THAN</span> = <span class="hljs-string">&#x27;&gt;&#x27;</span>,\n  <span class="hljs-comment">// ...</span>\n}\n</code></pre>\n<p>And finally, add the expectations in the test:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">tokens</span>: <span class="hljs-title class_">Token</span>[] = [\n  <span class="hljs-comment">// ...</span>\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">BANG</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;!&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">MINUS</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;-&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SLASH</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;/&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">ASTERISK</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;*&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">INT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;5&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;;&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">INT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;5&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LESS_THAN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;&lt;&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">INT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;10&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">GREATER_THAN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;&gt;&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">INT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;5&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;;&#x27;</span> },\n  <span class="hljs-comment">// ...</span>\n];\n</code></pre>\n<p>Now we just need to implement the lexer part to generate these token based on the source code:</p>\n<pre><code class="hljs language-jsx">private <span class="hljs-title function_">getToken</span>(): <span class="hljs-title class_">Token</span> {\n  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">skipWhitespace</span>();\n\n  <span class="hljs-keyword">switch</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span>) {\n    <span class="hljs-comment">// ...</span>\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;!&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">BANG</span>, <span class="hljs-string">&#x27;!&#x27;</span>);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">MINUS</span>, <span class="hljs-string">&#x27;-&#x27;</span>);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SLASH</span>, <span class="hljs-string">&#x27;/&#x27;</span>);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">ASTERISK</span>, <span class="hljs-string">&#x27;*&#x27;</span>);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&lt;&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LESS_THAN</span>, <span class="hljs-string">&#x27;&lt;&#x27;</span>);\n    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&gt;&#x27;</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">GREATER_THAN</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>);\n    <span class="hljs-comment">// ...</span>\n  }\n}\n</code></pre>\n<p>If we run the tests again, we make all green and passing.</p>\n<h2 id="building-new-keywords-as-tokens">Building new keywords as tokens</h2>\n<p>The process of building the tokens for the new keyword is pretty similar to the single characters.</p>\n<p>Add the input to the test:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> input = <span class="hljs-string">`\n  if (5 &lt; 10) {\n    return true;\n  } else {\n    return false;\n  }\n`</span>;\n</code></pre>\n<p>Now add the expected tokens in the test:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">tokens</span>: <span class="hljs-title class_">Token</span>[] = [\n  <span class="hljs-comment">// ...</span>\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IF</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;if&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LPAREN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;(&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">INT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;5&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LESS_THAN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;&lt;&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">INT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;10&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RPAREN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;)&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LBRACE</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;{&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RETURN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;return&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">TRUE</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;true&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;;&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RBRACE</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;}&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">ELSE</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;else&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LBRACE</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;{&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RETURN</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;return&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">FALSE</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;false&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;;&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RBRACE</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;}&#x27;</span> },\n  <span class="hljs-comment">// ...</span>\n];\n</code></pre>\n<p>And the new tokens:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">export</span> enum <span class="hljs-title class_">Tokens</span> {\n  <span class="hljs-comment">// ...</span>\n  <span class="hljs-variable constant_">TRUE</span> = <span class="hljs-string">&#x27;TRUE&#x27;</span>,\n  <span class="hljs-variable constant_">FALSE</span> = <span class="hljs-string">&#x27;FALSE&#x27;</span>,\n  <span class="hljs-variable constant_">IF</span> = <span class="hljs-string">&#x27;IF&#x27;</span>,\n  <span class="hljs-variable constant_">ELSE</span> = <span class="hljs-string">&#x27;ELSE&#x27;</span>,\n  <span class="hljs-variable constant_">RETURN</span> = <span class="hljs-string">&#x27;RETURN&#x27;</span>,\n}\n</code></pre>\n<p>But the difference is that we also need to update the <code>Keywords</code> object to having the new tokens and be used in the <code>lookupIdent</code> function:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Keywords</span>: <span class="hljs-title class_">KeywordsType</span> = {\n  <span class="hljs-comment">// ...</span>\n  <span class="hljs-attr">true</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">TRUE</span>,\n  <span class="hljs-attr">false</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">FALSE</span>,\n  <span class="hljs-attr">if</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IF</span>,\n  <span class="hljs-attr">else</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">ELSE</span>,\n  <span class="hljs-attr">return</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RETURN</span>,\n};\n</code></pre>\n<p>Running the tests again, we get all green and passing.</p>\n<h2 id="the-equal-and-not-equal-operators">The Equal and Not Equal operators</h2>\n<p>What we want to do now is to build the Equal and Not Equal tokens. We start adding the source code we need to handle:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> input = <span class="hljs-string">`\n  10 == 10;\n  10 != 9;\n`</span>;\n</code></pre>\n<p>The expected tokens are:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">tokens</span>: <span class="hljs-title class_">Token</span>[] = [\n  <span class="hljs-comment">// ...</span>\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">INT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;10&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">EQUAL</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;==&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">INT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;10&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;;&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">INT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;10&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">NOT_EQUAL</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;!=&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">INT</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;9&#x27;</span> },\n  { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;;&#x27;</span> },\n  <span class="hljs-comment">// ...</span>\n];\n</code></pre>\n<p>Then we need to add the new tokens:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">export</span> enum <span class="hljs-title class_">Tokens</span> {\n  <span class="hljs-comment">// ...</span>\n  <span class="hljs-variable constant_">EQUAL</span> = <span class="hljs-string">&#x27;==&#x27;</span>,\n  <span class="hljs-variable constant_">NOT_EQUAL</span> = <span class="hljs-string">&#x27;!=&#x27;</span>,\n  <span class="hljs-comment">// ...</span>\n}\n</code></pre>\n<p>Now we are ready to implement the lexer part for these new tokens.</p>\n<p>First, the <code>==</code>. Every time we get the character <code>=</code>, we need to be aware of if the next character is a <code>=</code> char. If it is, we return the token type <code>Equal</code>. If it&#39;s not, we just return the token type <code>Assign</code>.</p>\n<p>To search for the next character, let&#39;s build a new method to handle that for us: <code>peekChar</code>.</p>\n<pre><code class="hljs language-jsx">private <span class="hljs-title function_">peekChar</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">readPosition</span> &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">input</span>.<span class="hljs-property">length</span>) {\n    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">input</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">readPosition</span>];\n  }\n}\n</code></pre>\n<p>It&#39;s a simple method: if we get to the end of the source code, we return an empty string. Otherwise, it returns the next character.</p>\n<p>Now it becomes very easy to implement the lexer algorithm for the <code>==</code> token:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">switch</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span>) {\n  <span class="hljs-comment">// ...</span>\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;=&#x27;</span>:\n    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">peekChar</span>() === <span class="hljs-string">&#x27;=&#x27;</span>) {\n      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">readChar</span>();\n      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">EQUAL</span>, <span class="hljs-string">&#x27;==&#x27;</span>);\n    } <span class="hljs-keyword">else</span> {\n      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">ASSIGN</span>, <span class="hljs-string">&#x27;=&#x27;</span>);\n    }\n  <span class="hljs-comment">// ...</span>\n}\n</code></pre>\n<p>Inside the case of a <code>=</code> character, we see if the next character is also <code>=</code> with the help of our new method <code>peekChar</code>.</p>\n<p>If it is, read the next character to update the <code>position</code> and the <code>readPosition</code>&#39;s states and return the new token type <code>EQUAL</code>.</p>\n<p>If it is not, just return the already implemented token type <code>ASSIGN</code>.</p>\n<p>We actually do this same implementation for the <code>NOT_EQUAL</code> token type:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">switch</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">char</span>) {\n  <span class="hljs-comment">// ...</span>\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;!&#x27;</span>:\n    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">peekChar</span>() === <span class="hljs-string">&#x27;=&#x27;</span>) {\n      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">readChar</span>();\n      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">NOT_EQUAL</span>, <span class="hljs-string">&#x27;!=&#x27;</span>);\n    } <span class="hljs-keyword">else</span> {\n      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildToken</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">BANG</span>, <span class="hljs-string">&#x27;!&#x27;</span>);\n    }\n  <span class="hljs-comment">// ...</span>\n}\n</code></pre>\n<p>But now we are looking at the <code>!</code> character.</p>\n<h2 id="final-words--resources"><strong>Final words &amp; Resources</strong></h2>\n<p>If you didn&#39;t have the opportunity, take a look at the <a href="/series/building-an-interpreter/lexical-analysis-part-1">first</a> and the <a href="/series/building-an-interpreter/lexical-analysis-part-2">second part of the Lexical Analysis</a>. This is the third post about my journey learning compilers and studying programming language theory. And part of the <a href="/series/building-an-interpreter">Building an Interpreter series</a>.</p>\n<p>These are the resources I&#39;m using to learn more about this field:</p>\n<ul>\n<li><a href="https://github.com/imteekay/monkey-ts">monkey-ts</a>: the open source project of the compiler for the TypeScript version of the Monkey programming language.</li>\n<li><a href="https://github.com/imteekay/programming-language-theory">Programming Language Theory</a>: a bunch of resources about my studies on Programming Language Theory &amp; Applied PLT.</li>\n<li><a href="https://www.goodreads.com/book/show/32681092-writing-an-interpreter-in-go">Writing an Interpreter in Go</a>: the book I&#39;m reading to learn and implement the Monkey compiler.</li>\n</ul>\n',
  },
  {
    title: 'Parser - Part 1: Fundamental parts of AST and basic statements',
    content:
      '<blockquote>\n<p>&quot;A parser is a software component that takes input data (frequently text) and builds a data structure – often some kind of parse tree, abstract syntax tree or other hierarchical structure – giving a structural representation of the input, checking for correct syntax in the process. [...] The parser is often preceded by a separate lexical analyser, which creates tokens from the sequence of input characters.&quot; - <a href="https://en.wikipedia.org/wiki/Parsing">Wikipedia</a></p>\n</blockquote>\n<p>So the idea of the parser will be to receive input data, can be text or tokens, and to produce a new data structure that represents this input data.</p>\n<p>The data structure the parsers produce is commonly called AST, or abstract syntax tree. It&#39;s called &quot;abstract&quot; because this data structure omits visible details of the source code like semicolons, newlines, whitespace, and so on.</p>\n<p>In the process of building this data structure, it also analyzes the source code, checking whether the generated tokens form a meaningful expression. This process is called <em>Syntactic Analysis</em>.</p>\n<p>Parsing JSON strings as an example. It transforms the string input into a data structure (JavaScript Object).</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> input = <span class="hljs-string">&#x27;{&quot;name&quot;: &quot;TK&quot;, &quot;age&quot;: 25}&#x27;</span>;\n<span class="hljs-keyword">const</span> output = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(input);\n\noutput;\n=&gt; { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> }\n\noutput.<span class="hljs-property">name</span>;\n=&gt; <span class="hljs-string">&#x27;TK&#x27;</span>\n\noutput.<span class="hljs-property">age</span>;\n=&gt; <span class="hljs-number">25</span>\n</code></pre>\n<p>It also has the &quot;syntactic analysis&quot;. When passing a &quot;wrong&quot; input data, it will throw a syntax error (<code>SyntaxError</code>):</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> input = <span class="hljs-string">&#x27;{&quot;name&quot;: &quot;TK&quot;, 25}&#x27;</span>;\n<span class="hljs-keyword">const</span> output = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(input);\n=&gt; <span class="hljs-title class_">Uncaught</span> <span class="hljs-title class_">SyntaxError</span>: <span class="hljs-title class_">Unexpected</span> number <span class="hljs-keyword">in</span> <span class="hljs-title class_">JSON</span> at position <span class="hljs-number">15</span>\n</code></pre>\n<p>In this case, position 15 is the value <code>25</code>, where it is missing the attribute here.</p>\n<h2 id="fundamental-ast">Fundamental AST</h2>\n<p>To parse the <code>Let Statement</code>, let&#39;s first understand its syntax.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span>;\n<span class="hljs-keyword">let</span> y = <span class="hljs-number">15</span>;\n\n<span class="hljs-keyword">let</span> add = <span class="hljs-title function_">fn</span>(<span class="hljs-params">a, b</span>) {\n  <span class="hljs-keyword">return</span> a + b;\n};\n</code></pre>\n<p>Taking a closer look at this example, we can see a pattern here. All three statements have this same form:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">let</span> &lt;identifier&gt; = &lt;expression&gt;;\n</code></pre>\n<p>So, in this case, it&#39;s easy to understand that <code>10</code>, <code>15</code>, and <code>fn</code> are expressions. The difference between statements and expressions is simple in this PL: expressions produce value, statements don&#39;t.</p>\n<p>And they are a fundamental part of the AST. Everything is a node in the tree, that can be a statement or an expression.</p>\n<pre><code class="hljs language-jsx">interface <span class="hljs-title class_">Node</span> {\n  <span class="hljs-attr">tokenLiteral</span>: <span class="hljs-function">() =&gt;</span> string;\n}\n</code></pre>\n<p>The first step is to create this <code>Node</code> interface. Every node has to implement this <code>tokenLiteral</code> function. Meaning: every node has a token literal associated with it.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">export</span> interface <span class="hljs-title class_">Statement</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span> {}\n\n<span class="hljs-keyword">export</span> interface <span class="hljs-title class_">Expression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span> {}\n</code></pre>\n<p>The <code>Statement</code> and the <code>Expression</code> interfaces are built on top of the <code>Node</code> interface. Let&#39;s make it very simple now and improve later.</p>\n<p>The other fundamental part of the AST is the <code>Program</code>. It&#39;s the root node of the AST and it contains a list of statements.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Program</span> {\n  <span class="hljs-attr">statements</span>: <span class="hljs-title class_">Statement</span>[] = [];\n}\n</code></pre>\n<h2 id="parsing-the-let-statement">Parsing the let statement</h2>\n<p>Now that we have the foundation for our AST, we can build more specific statements. And we&#39;ll start with the <code>LetStatement</code>.</p>\n<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ede20de3-879f-49b1-be3d-b89bce7652f5/Screen_Shot_2021-10-16_at_21.52.02.png" alt="Screen Shot 2021-10-16 at 21.52.02.png"></p>\n<p>This is how I&#39;m visualizing the relationship between the <code>LetStatement</code> and the other interfaces.</p>\n<p>We start with &quot;everything is a node&quot;. Then we have the two main interfaces: <code>Expression</code> and <code>Statement</code>. In this case, <code>LetStatement</code> implements the <code>Statement</code> interface.</p>\n<p>The <code>LetStatement</code> has these attributes:</p>\n<ul>\n<li><code>token</code>: it has the type of the <code>Token</code> class we defined when we built the lexer. (just to refresh our memories, the <code>Token</code> has two attributes: the <code>type</code> (string) and <code>literal</code> (string). The <code>type</code> is any token we defined in the enum and the <code>literal</code> is the literal value of the token)</li>\n<li><code>value</code>: it&#39;s an <code>Expression</code>. But we&#39;ll see more about this only in the next part of this series.</li>\n<li><code>name</code>: it&#39;s an <code>Identifier</code> that has a <code>token</code> and a <code>value</code> as the attributes.</li>\n</ul>\n<p>To illustrate how it works in the code, let&#39;s see this example</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;\n</code></pre>\n<p>The representation of the <code>LetStatement</code>&#39;s AST would be:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title class_">LetStatement</span> {\n  <span class="hljs-attr">token</span>: <span class="hljs-title class_">Token</span> { <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;LET&#x27;</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;let&#x27;</span> },\n  <span class="hljs-attr">name</span>: <span class="hljs-title class_">Identifier</span> {\n    <span class="hljs-attr">token</span>: <span class="hljs-title class_">Token</span> { <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;IDENT&#x27;</span>, <span class="hljs-attr">literal</span>: <span class="hljs-string">&#x27;x&#x27;</span> },\n    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;x&#x27;</span>\n  }\n}\n</code></pre>\n<p>We have the <code>token</code> that&#39;s the <code>LET</code> token and the <code>name</code> that&#39;s an <code>Identifier</code> with a token <code>IDENT</code> and the <code>value</code> as <code>&#39;x&#39;</code>. We won&#39;t cover the <code>value</code> attribute because we&#39;ll see this <code>Expression</code> in the next part of this series.</p>\n<p>With this in mind, we can create our <code>LetStatement</code> class:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LetStatement</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Statement</span> {\n  <span class="hljs-attr">token</span>: <span class="hljs-title class_">Token</span>;\n  <span class="hljs-attr">name</span>: <span class="hljs-title class_">Identifier</span>;\n  <span class="hljs-attr">value</span>: <span class="hljs-title class_">Expression</span>;\n\n  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">token: Token</span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span> = token;\n  }\n\n  <span class="hljs-title function_">tokenLiteral</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span>.<span class="hljs-property">literal</span>;\n  }\n}\n</code></pre>\n<p>It has everything we already discussed, but we are missing the <code>Identifier</code> implementation:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Identifier</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Expression</span> {\n  <span class="hljs-attr">token</span>: <span class="hljs-title class_">Token</span>;\n  <span class="hljs-attr">value</span>: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">token: Token, value: <span class="hljs-built_in">string</span></span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span> = token;\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value;\n  }\n\n  <span class="hljs-title function_">tokenLiteral</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span>.<span class="hljs-property">literal</span>;\n  }\n}\n</code></pre>\n<p>We also discussed this structure and what it should have: the <code>token</code> and the <code>value</code>.</p>\n<p>Now we have all the necessary AST nodes to start to implement the parser. But before we build the parser and start parsing the <code>LetStatement</code>, we&#39;ll add tests to cover this implementation first.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Parser&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;parseProgram&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;parses the let statement&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> input = <span class="hljs-string">`\n        let x = 5;\n        let y = 10;\n        let foobar = 10000;\n      `</span>;\n\n      <span class="hljs-keyword">const</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(input);\n      <span class="hljs-keyword">const</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);\n      <span class="hljs-keyword">const</span> program = parser.<span class="hljs-title function_">parseProgram</span>();\n\n      <span class="hljs-keyword">const</span> tests = [\n        { <span class="hljs-attr">identifier</span>: <span class="hljs-string">&#x27;x&#x27;</span> },\n        { <span class="hljs-attr">identifier</span>: <span class="hljs-string">&#x27;y&#x27;</span> },\n        { <span class="hljs-attr">identifier</span>: <span class="hljs-string">&#x27;foobar&#x27;</span> },\n      ];\n\n      tests.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">{ identifier }, index</span>) =&gt;</span> {\n        <span class="hljs-keyword">const</span> statement = program.<span class="hljs-property">statements</span>[index];\n\n        <span class="hljs-title function_">expect</span>(statement.<span class="hljs-title function_">tokenLiteral</span>()).<span class="hljs-title function_">toEqual</span>(<span class="hljs-string">&#x27;let&#x27;</span>);\n        <span class="hljs-title function_">expect</span>(statement.<span class="hljs-property">name</span>.<span class="hljs-property">value</span>).<span class="hljs-title function_">toEqual</span>(identifier);\n        <span class="hljs-title function_">expect</span>(statement.<span class="hljs-property">name</span>.<span class="hljs-title function_">tokenLiteral</span>()).<span class="hljs-title function_">toEqual</span>(identifier);\n      });\n    });\n  });\n});\n</code></pre>\n<p>We want the parser to parse this input</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">let</span> x = <span class="hljs-number">5</span>;\n<span class="hljs-keyword">let</span> y = <span class="hljs-number">10</span>;\n<span class="hljs-keyword">let</span> foobar = <span class="hljs-number">10000</span>;\n</code></pre>\n<p>First, we pass the <code>input</code> to the <code>Lexer</code> and then the <code>lexer</code> to the <code>Parser</code>. And now we can call the <code>parsePogram</code>. It&#39;ll return the <code>program</code> with all the <code>statements</code> related to the <code>input</code> data.</p>\n<p>What are we testing here?</p>\n<ul>\n<li>the statement token literal should be <code>&#39;let&#39;</code>.</li>\n<li>the identifier&#39;s value should the <code>identifier</code> we have in the <code>tests</code> array.</li>\n<li>and the token literal of the identifier should also be the <code>identifier</code>.</li>\n</ul>\n<p>Now we can start implementing the <code>Parser</code> and pass the tests. We start with the basic definition of the <code>Parser</code> class.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parser</span> {\n  <span class="hljs-keyword">private</span> <span class="hljs-attr">lexer</span>: <span class="hljs-title class_">Lexer</span>;\n  <span class="hljs-keyword">private</span> <span class="hljs-attr">currentToken</span>: <span class="hljs-title class_">Token</span>;\n  <span class="hljs-keyword">private</span> <span class="hljs-attr">peekToken</span>: <span class="hljs-title class_">Token</span>;\n\n  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">lexer: Lexer</span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lexer</span> = lexer;\n  }\n}\n</code></pre>\n<p>We need to make sure that the <code>lexer</code> is passed as a parameter and the parser should also have the:</p>\n<ul>\n<li><code>currentToken</code>: it is the token under examination</li>\n<li><code>peekToken</code>: it is the next token that helps decide what to do next</li>\n</ul>\n<p>We&#39;ll also have a method called <code>nextToken</code> to update the <code>currentToken</code> and the <code>peekToken</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">nextToken</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentToken</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">peekToken</span>;\n  <span class="hljs-variable language_">this</span>.<span class="hljs-property">peekToken</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lexer</span>.<span class="hljs-title function_">nextToken</span>();\n}\n</code></pre>\n<p>And to initialize these two states, we can call this method two times in the constructor. Calling two times will set the correct state for the current and the next tokens. It looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">constructor</span>(<span class="hljs-params">lexer: Lexer</span>) {\n  <span class="hljs-variable language_">this</span>.<span class="hljs-property">lexer</span> = lexer;\n  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">nextToken</span>();\n  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">nextToken</span>();\n}\n</code></pre>\n<p>Now the <code>parseProgram</code>. The idea of this method is to create a program and parse each statement based on the tokens and add all the statements to the statements list in the program.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">parseProgram</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">const</span> program = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Program</span>();\n\n  <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentToken</span>.<span class="hljs-property">type</span> !== <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">EOF</span>) {\n    <span class="hljs-keyword">const</span> statement = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">parseStatement</span>();\n\n    <span class="hljs-keyword">if</span> (statement !== <span class="hljs-literal">null</span>) {\n      program.<span class="hljs-property">statements</span>.<span class="hljs-title function_">push</span>(statement);\n    }\n\n    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">nextToken</span>();\n  }\n\n  <span class="hljs-keyword">return</span> program;\n}\n</code></pre>\n<p>It iterates through all the tokens from the lexer, for each token, it&#39;ll parse the statement and add it to the statements list. And in the end, it&#39;ll just return the program.</p>\n<p>From this code, we need to implement this <code>parseStatement</code> method.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">parseLetStatement</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">const</span> statement = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LetStatement</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentToken</span>);\n\n  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">expectPeek</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">IDENT</span>)) {\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;\n  }\n\n  <span class="hljs-keyword">const</span> identifier = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Identifier</span>(\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentToken</span>,\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentToken</span>.<span class="hljs-property">literal</span>\n  );\n\n  statement.<span class="hljs-property">name</span> = identifier;\n\n  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">expectPeek</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">ASSIGN</span>)) {\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;\n  }\n\n  <span class="hljs-keyword">while</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">currentTokenIs</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>)) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">nextToken</span>();\n  }\n\n  <span class="hljs-keyword">return</span> statement;\n}\n</code></pre>\n<p>I think this first implementation is not the best one, but we can refactor it later (I have some ideas in mind that I want to try later).</p>\n<ul>\n<li>The first thing is to create a new <code>LetStatement</code> based on the current token</li>\n<li>Then we need to confirm that the next token is an <code>Identifier</code>. If it&#39;s, we call <code>nextToken</code> to update the state of the <code>currentToken</code> and the <code>peekToken</code>. If not, we just return <code>null</code> (just to simplify for now).</li>\n<li>Then we move to create the identifier. We just pass the current token and the current token&#39;s literal and update the statement name with this new identifier.</li>\n<li>We expect that the next token is a <code>=</code> token (<code>ASSIGN</code>).</li>\n<li><strong>*TODO</strong>:* implement the expression/value in the next post of this series</li>\n<li>After that, we just go through all the tokens until we find the <code>;</code> token and return the new statement.</li>\n</ul>\n<p>This new statement will be used to add it to the statements list in the program. But we are missing two important methods here: <code>expectPeek</code> and <code>currentTokenIs</code>. Let&#39;s implement them.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">currentTokenIs</span>(<span class="hljs-params">token: TokenType</span>) {\n  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentToken</span>.<span class="hljs-property">type</span> === token;\n}\n</code></pre>\n<p><code>currentTokenIs</code> is a simple method to verify if the current token has the same token type that we expect it has.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">peekTokenIs</span>(<span class="hljs-params">token: TokenType</span>) {\n  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">peekToken</span>.<span class="hljs-property">type</span> === token;\n}\n\n<span class="hljs-keyword">private</span> <span class="hljs-title function_">expectPeek</span>(<span class="hljs-params">token: TokenType</span>) {\n  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">peekTokenIs</span>(token)) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">nextToken</span>();\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\n  }\n\n  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\n}\n</code></pre>\n<p>The <code>expectPeek</code> method will use the <code>peekTokenIs</code> (that&#39;s very similar to the <code>currentTokenIs</code>, but for the <code>peekToken</code>) to verify if the token is the expected one. If it is, we update the current and the next token and return true. If not just return false (we&#39;ll also add error handling soon).</p>\n<p>Now we have the parser, the program, and we can parse let statements making the tests pass.</p>\n<h2 id="handling-errors">Handling errors</h2>\n<p>For this input data <code>let x = 5;</code>, we don&#39;t have any syntax problem, so we won&#39;t have any error to handle. But imagine the PL user type this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">let</span> <span class="hljs-number">123</span>;\n<span class="hljs-keyword">let</span> a;\n</code></pre>\n<p>There&#39;s a syntax error. Because, for a let statement, we expect that after the <code>let</code> token, we get an identifier, not the value/expression. And for the second example, after having the identifier, the parser expects that it has <code>=</code> token.</p>\n<p>We could output something like this to the user:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">let</span> <span class="hljs-number">123</span>;\n=&gt; <span class="hljs-string">&#x27;expected next token to be IDENT, got INT instead&#x27;</span>\n\n<span class="hljs-keyword">let</span> a;\n=&gt; <span class="hljs-string">&#x27;expected next token to be =, got ; instead&#x27;</span>\n</code></pre>\n<p>Errors are ways to communicate to the users about what they are writing and help them get to the final goal (a &quot;working software&quot;).</p>\n<p>But how do we do that? Let&#39;s start with the tests as we always do.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;parses an input with error&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">const</span> input = <span class="hljs-string">`\n    let 123;\n    let a;\n  `</span>;\n\n  <span class="hljs-keyword">const</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(input);\n  <span class="hljs-keyword">const</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);\n\n  parser.<span class="hljs-title function_">parseProgram</span>();\n\n  <span class="hljs-keyword">const</span> errors = parser.<span class="hljs-title function_">getErrors</span>();\n  <span class="hljs-keyword">const</span> expectedErrors = [\n    <span class="hljs-string">&#x27;expected next token to be IDENT, got INT instead&#x27;</span>,\n    <span class="hljs-string">&#x27;expected next token to be =, got ; instead&#x27;</span>,\n  ];\n\n  errors.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">error, index</span>) =&gt;</span> {\n    <span class="hljs-title function_">expect</span>(error).<span class="hljs-title function_">toEqual</span>(expectedErrors[index]);\n  });\n});\n</code></pre>\n<p>Here we have the input data that we talked about. But now we&#39;ll also have a <code>getErrors</code> method to get all the possible errors the parser had while parsing the input.</p>\n<p>And we expect that the parser has these two errors we already discussed.</p>\n<p>Ok, to have all the errors, let&#39;s create a list of errors in the parser.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Error</span> = <span class="hljs-built_in">string</span>;\n\n<span class="hljs-keyword">class</span> <span class="hljs-title class_">Parser</span> {\n  <span class="hljs-keyword">private</span> <span class="hljs-attr">lexer</span>: <span class="hljs-title class_">Lexer</span>;\n  <span class="hljs-keyword">private</span> <span class="hljs-attr">currentToken</span>: <span class="hljs-title class_">Token</span>;\n  <span class="hljs-keyword">private</span> <span class="hljs-attr">peekToken</span>: <span class="hljs-title class_">Token</span>;\n  <span class="hljs-keyword">private</span> <span class="hljs-attr">errors</span>: <span class="hljs-title class_">Error</span>[];\n\n  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">lexer: Lexer</span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lexer</span> = lexer;\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">errors</span> = [];\n    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">nextToken</span>();\n    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">nextToken</span>();\n  }\n}\n</code></pre>\n<p>It&#39;s very simple, it&#39;s just a private attribute from the class <code>Parser</code>, it has the type <code>Error</code> (that&#39;s a <code>string</code>), and we initialize it with an empty list.</p>\n<p>The <code>getErrors</code> method will only return the errors attribute:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">getErrors</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">errors</span>;\n}\n</code></pre>\n<p>And now what we need to do is to add a error message when the parser gets an error.</p>\n<p>In this case, we&#39;ll add an error to the list when the next token it&#39;s not the expected one, so the place we do that is in the <code>expectPeek</code> method.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">expectPeek</span>(<span class="hljs-params">token: TokenType</span>) {\n  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">peekTokenIs</span>(token)) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">nextToken</span>();\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\n  }\n\n  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">peekError</span>(token);\n  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\n}\n</code></pre>\n<p>When the next token is not the expected one, we call the <code>peekError</code> method passing the expected token to it. Now let&#39;s implement this new method:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">peekError</span>(<span class="hljs-params">token: TokenType</span>) {\n  <span class="hljs-keyword">const</span> msg = <span class="hljs-string">`expected next token to be <span class="hljs-subst">${token}</span>, got <span class="hljs-subst">${<span class="hljs-variable language_">this</span>.peekToken.<span class="hljs-keyword">type</span>}</span> instead`</span>;\n  <span class="hljs-variable language_">this</span>.<span class="hljs-property">errors</span>.<span class="hljs-title function_">push</span>(msg);\n}\n</code></pre>\n<p>It&#39;s very simple, we just need to add an error message to the <code>errors</code> list.</p>\n<p>And syntax error message is also simple: <code>expected next token to be ${token}, got ${this.peekToken.type} instead</code>. We expect one thing and got another.</p>\n<p>Running the tests again, they pass, and we have a way to communicate to the user about the program she/he is creating.</p>\n<h2 id="parsing-the-return-statement">Parsing the return statement</h2>\n<p>The <code>return</code> is also a <code>Statement</code>. Let&#39;s illustrate it:</p>\n<img src="/series/building-an-interpreter/ast-2.png">\n\n<p>The <code>ReturnStatement</code> will implement this <code>Statement</code> interface and it has these two attributes: <code>token</code> and <code>returnValue</code>.</p>\n<p>This is actually very similar to the <code>LetStatement</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnStatement</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Statement</span> {\n  <span class="hljs-attr">token</span>: <span class="hljs-title class_">Token</span>;\n  <span class="hljs-attr">returnValue</span>: <span class="hljs-title class_">Expression</span>;\n\n  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">token: Token</span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span> = token;\n  }\n\n  <span class="hljs-title function_">tokenLiteral</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span>.<span class="hljs-property">literal</span>;\n  }\n}\n</code></pre>\n<p>The <code>token</code> is a <code>Token</code>, the <code>returnValue</code> is an <code>Expression</code>, when instantiating the <code>ReturnStatement</code>, we initialize it with the <code>token</code>, and we also provide a <code>tokenLiteral</code> method.</p>\n<p>Let&#39;s create a new test to verify this new statement:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;parses the return statement&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">const</span> input = <span class="hljs-string">`\n    return 5;\n    return 10;\n    return 10000;\n  `</span>;\n\n  <span class="hljs-keyword">const</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(input);\n  <span class="hljs-keyword">const</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);\n  <span class="hljs-keyword">const</span> program = parser.<span class="hljs-title function_">parseProgram</span>();\n\n  <span class="hljs-keyword">const</span> tests = [\n    { <span class="hljs-attr">tokenLiteral</span>: <span class="hljs-string">&#x27;return&#x27;</span> },\n    { <span class="hljs-attr">tokenLiteral</span>: <span class="hljs-string">&#x27;return&#x27;</span> },\n    { <span class="hljs-attr">tokenLiteral</span>: <span class="hljs-string">&#x27;return&#x27;</span> },\n  ];\n\n  tests.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">{ tokenLiteral }, index</span>) =&gt;</span> {\n    <span class="hljs-keyword">const</span> statement = program.<span class="hljs-property">statements</span>[index];\n\n    <span class="hljs-title function_">expect</span>(statement.<span class="hljs-title function_">tokenLiteral</span>()).<span class="hljs-title function_">toEqual</span>(tokenLiteral);\n  });\n});\n</code></pre>\n<p>The input data has only correct return statements, and we expect that the statement token literal should be the <code>return</code> token.</p>\n<p>When the program parses statements, we only handle the let statement. But we want to handle return statements as well.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">parseStatement</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">switch</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentToken</span>.<span class="hljs-property">type</span>) {\n    <span class="hljs-keyword">case</span> <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">LET</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">parseLetStatement</span>();\n    <span class="hljs-keyword">case</span> <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">RETURN</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">parseReturnStatement</span>();\n    <span class="hljs-attr">default</span>:\n      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;\n  }\n}\n</code></pre>\n<p>If the current token is a <code>RETURN</code> token, we call the <code>parseReturnStatement</code> method.</p>\n<p>This method is also similar to the let statement, but simpler.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">private</span> <span class="hljs-title function_">parseReturnStatement</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">const</span> statement = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnStatement</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentToken</span>);\n\n  <span class="hljs-keyword">while</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">currentTokenIs</span>(<span class="hljs-title class_">Tokens</span>.<span class="hljs-property">SEMICOLON</span>)) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">nextToken</span>();\n  }\n\n  <span class="hljs-keyword">return</span> statement;\n}\n</code></pre>\n<p>It creates the <code>ReturnStatement</code> passing the current token, go to the end of the statement (semicolon - we&#39;ll talk about the <code>returnValue</code> expression in another part of this series), and return the new statement.</p>\n<p>This new statement is added to the <code>statements</code> list.</p>\n<p>One small thing that I realized when implementing this new statement is that it also implements the <code>Statement</code> and the <code>statements</code> list doesn&#39;t know if it is a <code>LetStatement</code> or a <code>ReturnStatement</code>. One way to solve this in TypeScript is to add a <a href="https://mariusschulz.com/blog/tagged-union-types-in-typescript">tagged union</a>.</p>\n<p>Let&#39;s add the <code>kind</code> attribute to these two statements.</p>\n<ul>\n<li><code>LetStatement</code>:</li>\n</ul>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LetStatement</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BaseStatement</span> {\n  <span class="hljs-attr">token</span>: <span class="hljs-title class_">Token</span>;\n  <span class="hljs-attr">name</span>: <span class="hljs-title class_">Identifier</span>;\n  <span class="hljs-attr">value</span>: <span class="hljs-title class_">Expression</span>;\n  <span class="hljs-attr">kind</span>: <span class="hljs-title class_">StatementKind</span>.<span class="hljs-property">Let</span>;\n\n  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">token: Token</span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span> = token;\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">kind</span> = <span class="hljs-title class_">StatementKind</span>.<span class="hljs-property">Let</span>;\n  }\n\n  <span class="hljs-title function_">tokenLiteral</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span>.<span class="hljs-property">literal</span>;\n  }\n}\n</code></pre>\n<ul>\n<li><code>ReturnStatement</code>:</li>\n</ul>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnStatement</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BaseStatement</span> {\n  <span class="hljs-attr">token</span>: <span class="hljs-title class_">Token</span>;\n  <span class="hljs-attr">kind</span>: <span class="hljs-title class_">StatementKind</span>.<span class="hljs-property">Return</span>;\n  <span class="hljs-attr">returnValue</span>: <span class="hljs-title class_">Expression</span>;\n\n  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">token: Token</span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span> = token;\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">kind</span> = <span class="hljs-title class_">StatementKind</span>.<span class="hljs-property">Return</span>;\n  }\n\n  <span class="hljs-title function_">tokenLiteral</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span>.<span class="hljs-property">literal</span>;\n  }\n}\n</code></pre>\n<p>The two statements have a new attribute called <code>kind</code> and we initialize it with the expected statement kind.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-built_in">enum</span> <span class="hljs-title class_">StatementKind</span> {\n  <span class="hljs-title class_">Let</span> = <span class="hljs-string">&#x27;let&#x27;</span>,\n  <span class="hljs-title class_">Return</span> = <span class="hljs-string">&#x27;return&#x27;</span>,\n}\n</code></pre>\n<p>It&#39;s basically an enum to support this new attribute.</p>\n<p>But we also need to update some things here:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">StatementKindType</span> = <span class="hljs-title class_">StatementKind</span>.<span class="hljs-property">Let</span> | <span class="hljs-title class_">StatementKind</span>.<span class="hljs-property">Return</span>;\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">Statement</span> = <span class="hljs-title class_">LetStatement</span> | <span class="hljs-title class_">ReturnStatement</span>;\n\n<span class="hljs-keyword">interface</span> <span class="hljs-title class_">BaseStatement</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span> {\n  <span class="hljs-attr">kind</span>: <span class="hljs-title class_">StatementKindType</span>;\n}\n\n<span class="hljs-keyword">class</span> <span class="hljs-title class_">Program</span> {\n  <span class="hljs-attr">statements</span>: <span class="hljs-title class_">Statement</span>[] = [];\n}\n</code></pre>\n<ul>\n<li>The <code>StatementKindType</code> is all possible kind types</li>\n<li>The <code>Statement</code> is all possible statements</li>\n<li>The <code>BaseStatement</code> is the interface that <code>LetStatement</code> and <code>ReturnStatement</code> implement</li>\n<li>The <code>Program</code> still have the <code>Statement</code> type for the list of the statements</li>\n</ul>\n<p>That&#39;s all for this post. The next one we&#39;ll talk about expressions, I&#39;m excited about it.</p>\n<h2 id="final-words--resources"><strong>Final words &amp; Resources</strong></h2>\n<p>If you didn&#39;t have the opportunity, take a look at the posts from the <a href="/series/building-an-interpreter">Building an Interpreter series</a>:</p>\n<ul>\n<li><a href="/series/building-an-interpreter/lexical-analysis-part-1">Building an Interpreter: Lexical Analysis - Part 1</a></li>\n<li><a href="/series/building-an-interpreter/lexical-analysis-part-2">Building an Interpreter: Lexical Analysis - Part 2</a></li>\n<li><a href="/series/building-an-interpreter/lexical-analysis-part-3">Building an Interpreter: Lexical Analysis - Part 3</a></li>\n<li><a href="/series/building-an-interpreter/repl">Building an Interpreter: REPL</a></li>\n</ul>\n<p>These are the resources I&#39;m using to learn more about this field:</p>\n<ul>\n<li><a href="https://github.com/imteekay/monkey-ts">monkey-ts</a>: the open-source project of the compiler for the TypeScript version of the Monkey programming language.</li>\n<li><a href="https://github.com/imteekay/programming-language-theory">Programming Language Theory</a>: a bunch of resources about my studies on Programming Language Theory &amp; Applied PLT.</li>\n<li><a href="https://www.goodreads.com/book/show/32681092-writing-an-interpreter-in-go">Writing an Interpreter in Go</a>: the book I&#39;m reading to learn and implement the Monkey compiler.</li>\n</ul>\n',
  },
  {
    title: 'Building an Interpreter: REPL',
    content:
      '<p>This post is part of a series called <a href="/series/building-an-interpreter">Building an Interpreter</a>.</p>\n<p>Now that we implemented the <a href="/series/building-an-interpreter/lexical-analysis-part-1">first steps of our lexer</a>, <a href="/series/building-an-interpreter/lexical-analysis-part-2">more complex tokens</a>, and <a href="/series/building-an-interpreter/lexical-analysis-part-3">extended the token set with special characters</a>, we want to take a step back and implement a REPL and print the tokens using our lexer.</p>\n<p>A REPL stands for Read-Eval-Print-Loop, and it is an interactive environment that &quot;reads&quot; the input, &quot;evaluates&quot; and &quot;prints&quot; it. And then do it all over again (loop).</p>\n<p>As we only have the token yet, we&#39;ll just print tokens related to the user input.</p>\n<p>An example would be if we type this in the REPL:</p>\n<pre><code class="hljs language-bash">&gt; <span class="hljs-built_in">let</span> a = 1;\n</code></pre>\n<p>We&#39;ll get the tokens related to this input</p>\n<pre><code class="hljs language-bash">Token { <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;LET&#x27;</span>, literal: <span class="hljs-string">&#x27;let&#x27;</span> }\nToken { <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;IDENT&#x27;</span>, literal: <span class="hljs-string">&#x27;a&#x27;</span> }\nToken { <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;=&#x27;</span>, literal: <span class="hljs-string">&#x27;=&#x27;</span> }\nToken { <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;INT&#x27;</span>, literal: <span class="hljs-string">&#x27;1&#x27;</span> }\nToken { <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;;&#x27;</span>, literal: <span class="hljs-string">&#x27;;&#x27;</span> }\n</code></pre>\n<p>Nice, let&#39;s implement it!</p>\n<h2 id="building-the-repl">Building the REPL</h2>\n<p>To build the REPL, I listed some ideas behind it:</p>\n<ul>\n<li>We need to share a prompt to read the user input</li>\n<li>When the user types code and clicks enter, we should print the tokens related to the input</li>\n<li>After printing the token, we need to share a prompt again</li>\n<li>If the user types &quot;exit&quot; or &quot;quit&quot;, we want to close the REPL</li>\n</ul>\n<p>These are the building blocks.</p>\n<p>To share the prompt and read the user input, we can use the <code>readline</code> from Node&#39;s API.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> readline <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;readline&#x27;</span>;\n\n<span class="hljs-keyword">const</span> scanner = readline.<span class="hljs-title function_">createInterface</span>({\n  <span class="hljs-attr">input</span>: process.<span class="hljs-property">stdin</span>,\n  <span class="hljs-attr">output</span>: process.<span class="hljs-property">stdout</span>,\n});\n\nscanner.<span class="hljs-title function_">question</span>(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-function">(<span class="hljs-params">input</span>) =&gt;</span> {\n  <span class="hljs-comment">// do stuff</span>\n});\n</code></pre>\n<p>With this code, we can share the prompt with <code>&gt;</code> and read the user input.</p>\n<p>Now that we have the user input, we need to be aware of if the input is <code>&quot;quit&quot;</code> or <code>&quot;exit&quot;</code>. If it is, just close the REPL.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">ScannerClose</span> = {\n  <span class="hljs-attr">exit</span>: <span class="hljs-string">&#x27;exit&#x27;</span>,\n  <span class="hljs-attr">quit</span>: <span class="hljs-string">&#x27;quit&#x27;</span>,\n};\n\n<span class="hljs-keyword">const</span> exits = [<span class="hljs-title class_">ScannerClose</span>.<span class="hljs-property">exit</span>, <span class="hljs-title class_">ScannerClose</span>.<span class="hljs-property">quit</span>];\n\n<span class="hljs-keyword">if</span> (exits.<span class="hljs-title function_">includes</span>(input)) <span class="hljs-keyword">return</span> scanner.<span class="hljs-title function_">close</span>();\n</code></pre>\n<p>Built an object and an array to have all the possible ways to exit the REPL, and verify if the input is included in these possible exits. If it is, close the REPL. If it isn&#39;t, we are able to print the tokens.</p>\n<p>To print the tokens, we need to instantiate our Lexer class with the input, and print token by token until it gets an <code>EOF</code> token type.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Tokens</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../token/token&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Lexer</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../lexer/lexer&#x27;</span>;\n\n<span class="hljs-keyword">const</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(input);\n\n<span class="hljs-keyword">for</span> (\n  <span class="hljs-keyword">let</span> token = lexer.<span class="hljs-title function_">nextToken</span>();\n  token.<span class="hljs-property">type</span> !== <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">EOF</span>;\n  token = lexer.<span class="hljs-title function_">nextToken</span>()\n) {\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(token);\n}\n</code></pre>\n<p>After printing the token, we want to share the prompt again for the user to type more code. We can do this with a recursive approach.</p>\n<p>The idea is to wrap all this code into a function and call itself in the end like this:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">repl</span>(<span class="hljs-params"></span>) {\n  scanner.<span class="hljs-title function_">question</span>(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-function">(<span class="hljs-params">input</span>) =&gt;</span> {\n    <span class="hljs-keyword">if</span> (exits.<span class="hljs-title function_">includes</span>(input)) <span class="hljs-keyword">return</span> scanner.<span class="hljs-title function_">close</span>();\n\n    <span class="hljs-keyword">const</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(input);\n\n    <span class="hljs-keyword">for</span> (\n      <span class="hljs-keyword">let</span> token = lexer.<span class="hljs-title function_">nextToken</span>();\n      token.<span class="hljs-property">type</span> !== <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">EOF</span>;\n      token = lexer.<span class="hljs-title function_">nextToken</span>()\n    ) {\n      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(token);\n    }\n\n    <span class="hljs-title function_">repl</span>();\n  });\n}\n</code></pre>\n<p>To finish the REPL, I wanted to wrap this code into a <code>startRepl</code> function with a &quot;Welcome to monkey.ts&quot; print before letting the user type code.</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> readline <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;readline&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Tokens</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../token/token&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Lexer</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../lexer/lexer&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">ScannerClose</span> = {\n  <span class="hljs-attr">exit</span>: <span class="hljs-string">&#x27;exit&#x27;</span>,\n  <span class="hljs-attr">quit</span>: <span class="hljs-string">&#x27;quit&#x27;</span>,\n};\n\n<span class="hljs-keyword">const</span> exits = [<span class="hljs-title class_">ScannerClose</span>.<span class="hljs-property">exit</span>, <span class="hljs-title class_">ScannerClose</span>.<span class="hljs-property">quit</span>];\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">startRepl</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">const</span> scanner = readline.<span class="hljs-title function_">createInterface</span>({\n    <span class="hljs-attr">input</span>: process.<span class="hljs-property">stdin</span>,\n    <span class="hljs-attr">output</span>: process.<span class="hljs-property">stdout</span>,\n  });\n\n  <span class="hljs-keyword">function</span> <span class="hljs-title function_">repl</span>(<span class="hljs-params"></span>) {\n    scanner.<span class="hljs-title function_">question</span>(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-function">(<span class="hljs-params">input</span>) =&gt;</span> {\n      <span class="hljs-keyword">if</span> (exits.<span class="hljs-title function_">includes</span>(input)) <span class="hljs-keyword">return</span> scanner.<span class="hljs-title function_">close</span>();\n\n      <span class="hljs-keyword">const</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(input);\n\n      <span class="hljs-keyword">for</span> (\n        <span class="hljs-keyword">let</span> token = lexer.<span class="hljs-title function_">nextToken</span>();\n        token.<span class="hljs-property">type</span> !== <span class="hljs-title class_">Tokens</span>.<span class="hljs-property">EOF</span>;\n        token = lexer.<span class="hljs-title function_">nextToken</span>()\n      ) {\n        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(token);\n      }\n\n      <span class="hljs-title function_">repl</span>();\n    });\n  }\n\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Welcome to monkey.ts&#x27;</span>);\n  <span class="hljs-title function_">repl</span>();\n}\n</code></pre>\n<p>And now we can call it anywhere in our code to start the REPL.</p>\n<h2 id="final-words--resources"><strong>Final words &amp; Resources</strong></h2>\n<p>If you didn&#39;t have the opportunity, take a look at the posts from the <a href="/series/building-an-interpreter">Building an Interpreter series</a>:</p>\n<ul>\n<li><a href="/series/building-an-interpreter/lexical-analysis-part-1">Building an Interpreter: Lexical Analysis - Part 1</a></li>\n<li><a href="/series/building-an-interpreter/lexical-analysis-part-2">Building an Interpreter: Lexical Analysis - Part 2</a></li>\n<li><a href="/series/building-an-interpreter/lexical-analysis-part-3">Building an Interpreter: Lexical Analysis - Part 3</a></li>\n</ul>\n<p>These are the resources I&#39;m using to learn more about this field:</p>\n<ul>\n<li><a href="https://github.com/imteekay/monkey-ts">monkey-ts</a>: the open-source project of the compiler for the TypeScript version of the Monkey programming language.</li>\n<li><a href="https://github.com/imteekay/monkey-ts/pull/4">monkey-ts - REPL PR</a></li>\n<li><a href="https://github.com/imteekay/programming-language-theory">Programming Language Theory</a>: a bunch of resources about my studies on Programming Language Theory &amp; Applied PLT.</li>\n<li><a href="https://www.goodreads.com/book/show/32681092-writing-an-interpreter-in-go">Writing an Interpreter in Go</a>: the book I&#39;m reading to learn and implement the Monkey compiler.</li>\n</ul>\n',
  },
  {
    title: 'Linked List Data Structure',
    content:
      '<p>A linked list is a collection of nodes that form a linear sequence. The difference between an array and a linked list is that the array has indexed elements, so we can get an element by constant time by just searching by its index. In the linked list, we need to go through the nodes to get the searched element and that takes linear time.</p>\n<p>The advantage is that the linked lists can insert and remove items in constant time.</p>\n<p>A Linked List is a sequence of nodes and each node has two <code>attributes</code>: the value it stores and the reference to the next node of the sequence.</p>\n<p>The first and last nodes are called <code>head</code> and <code>tail</code> of the list, respectively. So to get to the tail of the last, we traverse the linked list by moving from one node to another using each node&#39;s next reference.</p>\n<p>The Linked List having the <code>head</code> and the <code>tail</code> as attributes helps add new nodes to the start and the end of the list. But we can implement it with or without the <code>tail</code> attribute. We will dive into this implementation.</p>\n<p>We can separate the linked list from its elements. Each element is a node and we can implement this representation with a <code>Node</code> class.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):\n        self.value = value\n        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span>\n</code></pre>\n<p>Basically, it has a value and the reference to the next node. We add a default value (<code>None</code>) to the <code>next</code> parameter to make it more flexible to use when creating new nodes.</p>\n<p>The simplest way to use it is:</p>\n<pre><code class="hljs language-python">new_node = Node(<span class="hljs-number">1</span>)\nnew_node.value  <span class="hljs-comment"># 1</span>\nnew_node.<span class="hljs-built_in">next</span>  <span class="hljs-comment"># None</span>\n</code></pre>\n<ul>\n<li>Instantiate the new node.</li>\n<li>We can access the <code>value</code> and the <code>next</code> attributes.</li>\n</ul>\n<p>But with the flexibility of the <code>next</code> parameter, we can also use it by passing the next node reference.</p>\n<pre><code class="hljs language-python">next_node = Node(<span class="hljs-number">2</span>)\n\nnew_node = Node(<span class="hljs-number">1</span>, next_node)\nnew_node.value  <span class="hljs-comment"># 1</span>\nnew_node.<span class="hljs-built_in">next</span>.value  <span class="hljs-comment"># 2</span>\n</code></pre>\n<ul>\n<li>Have the next node.</li>\n<li>Instantiate the new node by passing the value and the reference to the next node (<code>next_node</code> in our case).</li>\n<li>We can access the <code>value</code> and the <code>next</code> value.</li>\n</ul>\n<p>For the linked list, the first step is to create a class representing it. For now, we just want a <code>head</code> attribute when creating an empty list.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):\n        self.head = <span class="hljs-literal">None</span>\n</code></pre>\n<p>Simple as that. Just a class and initialize the <code>head</code> attribute with <code>None</code> for an empty list.</p>\n<p>Let&#39;s implement the easier method: <code>is_empty</code>. How do we know when a list is empty? If the <code>head</code> is <code>None</code>, we didn&#39;t add any node to this list. This is the logic behind the <code>is_empty</code> method.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">return</span> self.head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>\n</code></pre>\n<p>Pretty simple, huh?</p>\n<p>Now the <code>prepend</code> method. We basically need to create a new node, points the <code>next</code> attribute from this new node to the <code>head</code>, and assign this new node to be the new linked list <code>head</code>.</p>\n<p>Remember we have the <code>next</code> parameter when creating a new node? We can use it to assign the previous <code>head</code> when creating the new node. Something like this:</p>\n<pre><code class="hljs language-python">Node(value, previous_head)\n</code></pre>\n<p>In the context of the linked list, we will have the <code>self.head</code>. So:</p>\n<pre><code class="hljs language-python">Node(value, self.head)\n</code></pre>\n<p>The last step is to assign this new node to the <code>head</code> and we will prepend it.</p>\n<pre><code class="hljs language-python">self.head = Node(value, self.head)\n</code></pre>\n<ul>\n<li>Create new node</li>\n<li>Assign the <code>next</code> attribute to the previous <code>head</code></li>\n<li>And assign the new node to the <code>head</code></li>\n</ul>\n<p>The complete method will be like this:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">prepend</span>(<span class="hljs-params">self, value</span>):\n    self.head = Node(value, self.head)\n</code></pre>\n<p>Just one line. Pretty good!</p>\n<p>For the <code>append</code>, it&#39;s a bit different, because, instead of adding a new node to the head of the list, we need to add to the tail. So basically we need to iterate through the list to be in the last node and point it&#39;s <code>next</code> attribute to the newly created node.</p>\n<p>The question is: How do we iterate through the list?</p>\n<p>The difference between the tail node and the rest is the <code>next</code> attribute. The tail has no <code>next</code>. It points to <code>None</code>. The rest always point to a different node.</p>\n<p>To iterate through the list to get the last node, we get the next node until the node has no <code>next</code> attribute. Start with the first node: the head.</p>\n<pre><code class="hljs language-python">current_node = self.head\n</code></pre>\n<p>And then iterate.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">while</span> current_node.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n    current_node = current_node.<span class="hljs-built_in">next</span>\n</code></pre>\n<p>We divide this code into two parts:</p>\n<ul>\n<li>looping while the node&#39;s <code>next</code> attribute is not <code>None</code></li>\n<li>update the current node by assigning the next node</li>\n</ul>\n<p>When the <code>while</code> loop breaks, we have the last node, so we just need to update the last node <code>next</code> attribute.</p>\n<pre><code class="hljs language-python">current_node.<span class="hljs-built_in">next</span> = Node(value)\n</code></pre>\n<p>The complete code:</p>\n<pre><code class="hljs language-python">current_node = self.head\n\n<span class="hljs-keyword">while</span> current_node.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n    current_node = current_node.<span class="hljs-built_in">next</span>\n\ncurrent_node.<span class="hljs-built_in">next</span> = Node(value)\n</code></pre>\n<p>But this code will break if the linked list is empty, because the <code>head</code> is <code>None</code>, it can&#39;t have a <code>next</code> attribute.</p>\n<p>In this case, we just make a condition for emptiness. If it is empty, we just assign the new node to the <code>head</code>.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">append</span>(<span class="hljs-params">self, value</span>):\n    <span class="hljs-keyword">if</span> self.is_empty():\n        self.head = Node(value)\n        <span class="hljs-keyword">return</span>\n\n    current_node = self.head\n\n    <span class="hljs-keyword">while</span> current_node.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n        current_node = current_node.<span class="hljs-built_in">next</span>\n\n    current_node.<span class="hljs-built_in">next</span> = Node(value)\n</code></pre>\n<p>For the <code>size</code> method is straightforward. We basically need to iterate through the whole list and count each node.</p>\n<p>To iterate is pretty simple. We just need to loop while the current node is not <code>None</code>.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">while</span> current_node <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n    current_node = current_node.<span class="hljs-built_in">next</span>\n</code></pre>\n<p>And for each iteration, we need to increase our counter.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">size</span>(<span class="hljs-params">self</span>):\n    list_length = <span class="hljs-number">0</span>\n    current_node = self.head\n\n    <span class="hljs-keyword">while</span> current_node <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n        list_length += <span class="hljs-number">1</span>\n        current_node = current_node.<span class="hljs-built_in">next</span>\n\n    <span class="hljs-keyword">return</span> list_length\n</code></pre>\n<ul>\n<li>Initialize the <code>list_length</code> with <code>0</code>.</li>\n<li>Get the current node: the <code>head</code>.</li>\n<li>Iterate through the list.</li>\n<li>For each iteration, increase the counter.</li>\n<li>Returns the <code>list_length</code>.</li>\n</ul>\n<p>For the <code>search</code> algorithm, we need to receive a value and return <code>True</code> or <code>False</code> if this value is in the linked list.</p>\n<p>So we basically need to iterate through the linked list searching for this value.</p>\n<p>The iteration is simple:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">while</span> current_node <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n        current_node = current_node.<span class="hljs-built_in">next</span>\n</code></pre>\n<p>Now, for each node, we see if the current node value is the same as the searched value.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">while</span> current_node <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n    <span class="hljs-keyword">if</span> current_node.value == value:\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>\n\n    current_node = current_node.<span class="hljs-built_in">next</span>\n</code></pre>\n<p>We can do this way to return <code>True</code> if the searched value is found. Or we can define a <code>found</code> variable and use it to set it to <code>True</code> when finding it and get out of the loop.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> found <span class="hljs-keyword">and</span> current_node <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n    found = current_node.value == value\n    current_node = current_node.<span class="hljs-built_in">next</span>\n</code></pre>\n<ul>\n<li>We will iterate while we didn&#39;t find the value and it is not the last node</li>\n<li>Basically, the loop will stop when finding the searched value or finish the entire linked list</li>\n<li>The <code>current_node.value == value</code> logic will store a <code>True</code> or <code>False</code> value for each current node value</li>\n</ul>\n<p>We define the <code>found</code> and <code>current_node</code> before iterating and return if we found the searched value or not.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, value</span>):\n    found = <span class="hljs-literal">False</span>\n    current_node = self.head\n\n    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> found <span class="hljs-keyword">and</span> current_node <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n        found = current_node.value == value\n        current_node = current_node.<span class="hljs-built_in">next</span>\n\n    <span class="hljs-keyword">return</span> found\n</code></pre>\n<p>The last method to be implemented is the <code>empty</code> method. We can think about this method in separated cases:</p>\n<ul>\n<li>when the list is empty.</li>\n<li>when we want to remove the head node.</li>\n<li>when we want to remove a node from the middle or the last one.</li>\n</ul>\n<p>For the empty case is pretty simple. We just check the list with our <code>is_empty</code> method.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">if</span> self.is_empty():\n    <span class="hljs-keyword">return</span>\n</code></pre>\n<p>We can also throw an error exception or just print &quot;The list is empty&quot;, for example.</p>\n<p>For the case when we want to remove the head node, we check it first and then remove it.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">if</span> self.head.value == value:\n    self.head = self.head.<span class="hljs-built_in">next</span>\n    <span class="hljs-keyword">return</span>\n</code></pre>\n<p>To remove it, we just need to point the head to the its next node.</p>\n<p>The last case is when we want to remove a node in the middle or the last one. Let&#39;s draw it!</p>\n<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3fd50915-6d6b-43ee-9032-b0c85533d11d/20200202_201216.jpg" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3fd50915-6d6b-43ee-9032-b0c85533d11d/20200202_201216.jpg"></p>\n<p>For this algorithm, what we want is to get the previous node of the node to be removed and point to the next node of the node to be removed. So we need to have the previous node in each iteration. This is the fundamental part of our algorithm.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">while</span> current_node.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n    <span class="hljs-keyword">if</span> current_node.<span class="hljs-built_in">next</span>.value == value:\n        current_node.<span class="hljs-built_in">next</span> = current_node.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span>\n        <span class="hljs-keyword">return</span>\n\n    current_node = current_node.<span class="hljs-built_in">next</span>\n</code></pre>\n<p>This is the algorithm.</p>\n<p>We will iterate through the list while the current node&#39;s next is not a <code>None</code> value. Why? Because we want to compare the next node value. Not the current one.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">if</span> current_node.<span class="hljs-built_in">next</span>.value == value:\n</code></pre>\n<p>This the logic we are searching for. Does the current node&#39;s next value is the value we want to remove?</p>\n<p>If it is <code>True</code>, we basically remove the current node&#39;s next node by pointing the <code>next</code> to the <code>next.next</code>, and returning the function.</p>\n<p>If it is <code>False</code>, we keep iterating until we find the value we want or when we finish the entire list.</p>\n<p>Joining all the parts, we have:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">self, value</span>):\n    <span class="hljs-keyword">if</span> self.is_empty():\n        <span class="hljs-keyword">return</span>\n\n    <span class="hljs-keyword">if</span> self.head.value == value:\n        self.head = self.head.<span class="hljs-built_in">next</span>\n        <span class="hljs-keyword">return</span>\n\n    current_node = self.head\n\n    <span class="hljs-keyword">while</span> current_node.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n        <span class="hljs-keyword">if</span> current_node.<span class="hljs-built_in">next</span>.value == value:\n            current_node.<span class="hljs-built_in">next</span> = current_node.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span>\n            <span class="hljs-keyword">return</span>\n\n        current_node = current_node.<span class="hljs-built_in">next</span>\n</code></pre>\n<h2 id="the-linked-list-class">The Linked List class</h2>\n<p>Joining all the parts we talked about and implemented, we have:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):\n        self.value = value\n        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span>\n\n<span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):\n        self.head = <span class="hljs-literal">None</span>\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">append</span>(<span class="hljs-params">self, value</span>):\n        <span class="hljs-keyword">if</span> self.is_empty():\n            self.head = Node(value)\n            <span class="hljs-keyword">return</span>\n\n        current_node = self.head\n\n        <span class="hljs-keyword">while</span> current_node.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n            current_node = current_node.<span class="hljs-built_in">next</span>\n\n        current_node.<span class="hljs-built_in">next</span> = Node(value)\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">prepend</span>(<span class="hljs-params">self, value</span>):\n        self.head = Node(value, self.head)\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">self, value</span>):\n        <span class="hljs-keyword">if</span> self.is_empty():\n            <span class="hljs-keyword">return</span>\n\n        <span class="hljs-keyword">if</span> self.head.value == value:\n            self.head = self.head.<span class="hljs-built_in">next</span>\n            <span class="hljs-keyword">return</span>\n\n        current_node = self.head\n\n        <span class="hljs-keyword">while</span> current_node.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n            <span class="hljs-keyword">if</span> current_node.<span class="hljs-built_in">next</span>.value == value:\n                current_node.<span class="hljs-built_in">next</span> = current_node.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span>\n                <span class="hljs-keyword">return</span>\n\n            current_node = current_node.<span class="hljs-built_in">next</span>\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, value</span>):\n        found = <span class="hljs-literal">False</span>\n        current_node = self.head\n\n        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> found <span class="hljs-keyword">and</span> current_node <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n            found = current_node.value == value\n            current_node = current_node.<span class="hljs-built_in">next</span>\n\n        <span class="hljs-keyword">return</span> found\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):\n        <span class="hljs-keyword">return</span> self.head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">size</span>(<span class="hljs-params">self</span>):\n        list_length = <span class="hljs-number">0</span>\n        current_node = self.head\n\n        <span class="hljs-keyword">while</span> current_node <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n            list_length += <span class="hljs-number">1</span>\n            current_node = current_node.<span class="hljs-built_in">next</span>\n\n        <span class="hljs-keyword">return</span> list_length\n</code></pre>\n<h2 id="lets-test-it">Let&#39;s test it!</h2>\n<p>I basically created three helper functions to help us to test our linked list.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_all</span>(<span class="hljs-params">linked_list</span>):\n    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;All values:&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)\n    current_node = linked_list.head\n\n    <span class="hljs-keyword">while</span> current_node <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:\n        <span class="hljs-built_in">print</span>(current_node.value, end=<span class="hljs-string">&#x27; &#x27;</span>)\n        current_node = current_node.<span class="hljs-built_in">next</span>\n\n    <span class="hljs-built_in">print</span>()\n\n<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_found</span>(<span class="hljs-params">linked_list, value</span>):\n    found = linked_list.search(value)\n    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;For value:&#x27;</span>, value, <span class="hljs-string">&#x27;--&gt;&#x27;</span>, <span class="hljs-string">&#x27;Found:&#x27;</span>, found, )\n\n<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_size</span>(<span class="hljs-params">linked_list</span>):\n    list_length = linked_list.size()\n    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Size:&#x27;</span>, list_length)\n</code></pre>\n<p>They will print all the values, the found value, and the size of the list. So first we instantiate our list:</p>\n<pre><code class="hljs language-python">linked_list = LinkedList()\n</code></pre>\n<p>Let&#39;s see what we get when we try to print all the values and its size:</p>\n<pre><code class="hljs language-python">print_all(linked_list)\nprint_size(linked_list)  <span class="hljs-comment"># 0</span>\n</code></pre>\n<p>Yes, no values and <code>0</code> elements.</p>\n<p>We can append a node with value <code>1</code>, print the values, and see its size.</p>\n<pre><code class="hljs language-python">linked_list.append(<span class="hljs-number">1</span>)\nprint_all(linked_list)  <span class="hljs-comment"># 1</span>\nprint_size(linked_list)  <span class="hljs-comment"># 1</span>\n</code></pre>\n<p>If we try to remove <code>0</code>, the <code>1</code> is still there. But if we remove <code>1</code>, we have no nodes anymore. The first line is cool: it doesn&#39;t break if we try to remove an element that doesn&#39;t exist in the linked list.</p>\n<pre><code class="hljs language-python">linked_list.remove(<span class="hljs-number">0</span>)\nprint_all(linked_list)  <span class="hljs-comment"># 1</span>\nlinked_list.remove(<span class="hljs-number">1</span>)\nprint_all(linked_list)\n</code></pre>\n<p>Adding new nodes and printing them:</p>\n<pre><code class="hljs language-python">linked_list.append(<span class="hljs-number">2</span>)\nlinked_list.append(<span class="hljs-number">3</span>)\nprint_all(linked_list)  <span class="hljs-comment"># 2 3</span>\nprint_size(linked_list)  <span class="hljs-comment"># 2</span>\n</code></pre>\n<p>Let&#39;s try out <code>found</code> method:</p>\n<pre><code class="hljs language-python">print_found(linked_list, <span class="hljs-number">1</span>)  <span class="hljs-comment"># False</span>\nprint_found(linked_list, <span class="hljs-number">2</span>)  <span class="hljs-comment"># True</span>\nprint_found(linked_list, <span class="hljs-number">3</span>)  <span class="hljs-comment"># True</span>\n</code></pre>\n<p>That&#39;s cool! We really don&#39;t have the <code>1</code> node, but we have the <code>2</code> and the <code>3</code>.</p>\n<p>Now printing after removing each node:</p>\n<pre><code class="hljs language-python">linked_list.remove(<span class="hljs-number">1</span>)\nprint_all(linked_list)  <span class="hljs-comment"># 2 3</span>\nlinked_list.remove(<span class="hljs-number">2</span>)\nprint_all(linked_list)  <span class="hljs-comment"># 3</span>\nlinked_list.remove(<span class="hljs-number">3</span>)\nprint_all(linked_list)\n</code></pre>\n<p>Let&#39;s try out <code>prepend</code> method:</p>\n<pre><code class="hljs language-python">linked_list.prepend(<span class="hljs-number">4</span>)\nlinked_list.prepend(<span class="hljs-number">3</span>)\nlinked_list.prepend(<span class="hljs-number">2</span>)\nlinked_list.prepend(<span class="hljs-number">1</span>)\nprint_all(linked_list)  <span class="hljs-comment"># 1 2 3 4</span>\n</code></pre>\n<p>And remove the <code>3</code>.</p>\n<pre><code class="hljs language-python">linked_list.remove(<span class="hljs-number">3</span>)\nprint_all(linked_list)  <span class="hljs-comment"># 1 2 4</span>\n</code></pre>\n<p>Works fine!</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="http://leandrotk.github.io/tk/2017/09/learning-python-from-zero-to-hero/index.html">Learning Python: From Zero to Hero</a></li>\n<li><a href="https://mbsy.co/lG6tv">One Month - Learn Python</a></li>\n<li><a href="https://www.educative.io/courses/big-o-notation-for-interviews-and-beyond?aff=x8bV">Big-O Notation For Coding Interviews and Beyond</a></li>\n<li><a href="https://www.educative.io/courses/learn-python-from-scratch?aff=x8bV">Learn Python from Scratch</a></li>\n<li><a href="https://www.educative.io/courses/learn-object-oriented-programming-in-python?aff=x8bV">Learn Object-Oriented Programming in Python</a></li>\n<li><a href="https://www.educative.io/courses/data-structures-in-python-an-interview-refresher?aff=x8bV">Data Structures in Python: An Interview Refresher</a></li>\n<li><a href="https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/1118290275">Data Structures and Algorithms in Python</a>)</li>\n<li><a href="https://www.youtube.com/watch?v=njTh_OwMljA&amp;feature=youtu.be">HackerRank Linked List</a></li>\n<li><a href="https://medium.com/basecs/whats-a-linked-list-anyway-part-1-d8b7e6508b9d">Linked List Part 1</a></li>\n<li><a href="https://medium.com/basecs/whats-a-linked-list-anyway-part-2-131d96f71996">Linked List Part 2</a></li>\n<li><a href="https://www.youtube.com/watch?v=op42w-5o3nE">Data Structures in Python: Circular Linked Lists - Remove Node</a></li>\n<li><a href="https://www.youtube.com/watch?v=njTh_OwMljA&amp;feature=youtu.be">Data Structures: Linked Lists</a></li>\n</ul>\n',
  },
  {
    title: 'Queue Data Structure',
    content:
      '<p>The queue data structure is a collection of items that follow the <code>first-in, first out</code> principle. The first added element will be the first element to be removed from the queue. So, elements are added in the back and removed from the front.</p>\n<p>An analogy would be a simple line of people waiting for the next train. In the software engineering context, an example is a web server receiving and responding requests.</p>\n<p>The main API methods are <code>enqueue</code> (add) and <code>dequeue</code> (remove). But we can also add other methods as part of the API implementation: <code>size</code>, <code>front</code>, <code>back</code>, and <code>is_empty</code>.</p>\n<hr>\n<p>We can create a <code>Queue</code> class as a wrapper and use the Python list to store the queue data. This class will have the implementation of the <code>enqueue</code>, <code>dequeue</code>, <code>size</code>, <code>front</code>, <code>back</code>, and <code>is_empty</code> methods.</p>\n<p>The first step is to create a class definition and how we are gone store our items.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):\n        self.items = []\n</code></pre>\n<p>This is basically what we need for now. Just a class and its constructor. When the instance is created, it will have the <code>items</code> list to store the queue items.</p>\n<p>For the <code>enqueue</code> method, we just need to use the list <code>append</code> method to add new items. The new items will be placed in the last index of this <code>items</code> list. So the front item from the queue will always be the first item.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">enqueue</span>(<span class="hljs-params">self, item</span>):\n    self.items.append(item)\n</code></pre>\n<p>It receives the new item and appends it to the list.</p>\n<p>The <code>size</code> method only counts the number of the queue items by using the <code>len</code> function.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">size</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.items)\n</code></pre>\n<p>The idea of the <code>is_empty</code> method is to verify if the list has or not items in it. If it has, returns <code>False</code>. Otherwise, <code>True</code>. To count the number of items in the queue, we can simply use the <code>size</code> method already implemented.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">return</span> self.size() == <span class="hljs-number">0</span>\n</code></pre>\n<p>The <code>pop</code> method from the list data structure can also be used to dequeue the item from the queue. It dequeues the first element as it is expected for the queue. The first added item.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">dequeue</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">return</span> self.items.pop(<span class="hljs-number">0</span>)\n</code></pre>\n<p>But we need to handle the queue emptiness. For an empty list, the <code>pop</code> method raises an exception <code>IndexError: poop from empty list</code>. So we can create an exception class to handle this issue.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Emptiness</span>(<span class="hljs-title class_ inherited__">Exception</span>):\n    <span class="hljs-keyword">pass</span>\n</code></pre>\n<p>And uses it when the list is empty:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">dequeue</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">if</span> self.is_empty():\n        <span class="hljs-keyword">raise</span> Emptiness(<span class="hljs-string">&#x27;The Queue is empty&#x27;</span>)\n\n    <span class="hljs-keyword">return</span> self.items.dequeue()\n</code></pre>\n<p>If it is empty, we raise this exception. Otherwise, we can dequeue the front item from the queue.</p>\n<p>We use this same emptiness strategy for the <code>front</code> method:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">front</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">if</span> self.is_empty():\n        <span class="hljs-keyword">raise</span> Emptiness(<span class="hljs-string">&#x27;The Queue is empty&#x27;</span>)\n\n    <span class="hljs-keyword">return</span> self.items[<span class="hljs-number">0</span>]\n</code></pre>\n<p>If it has at least one item, we get the front, the first added item in the queue.</p>\n<p>Also the same emptiness strategy for the <code>back</code> method:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">back</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">if</span> self.is_empty():\n        <span class="hljs-keyword">raise</span> Emptiness(<span class="hljs-string">&#x27;The Queue is empty&#x27;</span>)\n\n    <span class="hljs-keyword">return</span> self.items[-<span class="hljs-number">1</span>]\n</code></pre>\n<p>If it has at least one item, we get the back item, the last added item in the queue.</p>\n<h2 id="queue-usage">Queue usage</h2>\n<p>I created some helper functions to help test the queue usage.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_enqueue</span>(<span class="hljs-params">queue, item</span>):\n    queue.enqueue(item)\n    <span class="hljs-built_in">print</span>(queue.items)\n\n\n<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_dequeue</span>(<span class="hljs-params">queue</span>):\n    queue.dequeue()\n    <span class="hljs-built_in">print</span>(queue.items)\n\n\n<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_emptiness</span>(<span class="hljs-params">queue</span>):\n    is_empty = queue.is_empty()\n    <span class="hljs-built_in">print</span>(is_empty)\n\n\n<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_size</span>(<span class="hljs-params">queue</span>):\n    size = queue.size()\n    <span class="hljs-built_in">print</span>(size)\n\n\n<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_front</span>(<span class="hljs-params">queue</span>):\n    front = queue.front()\n    <span class="hljs-built_in">print</span>(front)\n\n\n<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_back</span>(<span class="hljs-params">queue</span>):\n    back = queue.back()\n    <span class="hljs-built_in">print</span>(back)\n</code></pre>\n<p>They basically call a queue method and print the expected result from the method call.</p>\n<p>The usage will be something like:</p>\n<pre><code class="hljs language-python">queue = Queue()\n\ntest_emptiness(queue)  <span class="hljs-comment"># True</span>\ntest_size(queue)  <span class="hljs-comment"># 0</span>\n\ntest_enqueue(queue, <span class="hljs-number">1</span>)  <span class="hljs-comment"># [1]</span>\ntest_enqueue(queue, <span class="hljs-number">2</span>)  <span class="hljs-comment"># [1, 2]</span>\ntest_enqueue(queue, <span class="hljs-number">3</span>)  <span class="hljs-comment"># [1, 2, 3]</span>\ntest_enqueue(queue, <span class="hljs-number">4</span>)  <span class="hljs-comment"># [1, 2, 3, 4]</span>\ntest_enqueue(queue, <span class="hljs-number">5</span>)  <span class="hljs-comment"># [1, 2, 3, 4, 5]</span>\n\ntest_emptiness(queue)  <span class="hljs-comment"># False</span>\ntest_size(queue)  <span class="hljs-comment"># 5</span>\ntest_front(queue)  <span class="hljs-comment"># 1</span>\ntest_back(queue)  <span class="hljs-comment"># 5</span>\n\ntest_dequeue(queue)  <span class="hljs-comment"># [2, 3, 4, 5]</span>\ntest_dequeue(queue)  <span class="hljs-comment"># [3, 4, 5]</span>\ntest_dequeue(queue)  <span class="hljs-comment"># [4, 5]</span>\ntest_dequeue(queue)  <span class="hljs-comment"># [5]</span>\n\ntest_emptiness(queue)  <span class="hljs-comment"># False</span>\ntest_size(queue)  <span class="hljs-comment"># 1</span>\ntest_front(queue)  <span class="hljs-comment"># 5</span>\ntest_back(queue)  <span class="hljs-comment"># 5</span>\n\ntest_dequeue(queue)  <span class="hljs-comment"># []</span>\n\ntest_emptiness(queue)  <span class="hljs-comment"># True</span>\ntest_size(queue)  <span class="hljs-comment"># 0</span>\n</code></pre>\n<p>We first instantiate a new queue from the <code>Queue</code> class.</p>\n<ul>\n<li>So now we can verify its emptiness: yes, it is!</li>\n<li>Verify size: 0.</li>\n<li>Enqueue 5 new items to the queue: <code>[1, 2, 3, 4, 5]</code>.</li>\n<li>Verify emptiness again: not anymore!</li>\n<li>Verify size: 5.</li>\n<li>Get the front element: 1 because it was the first added item.</li>\n<li>Get the back element: 5 because it was the last added item.</li>\n<li>Dequeue 4 items: 1, 2, 3, and 4.</li>\n<li>Verify emptiness: it is not empty yet!</li>\n<li>The size is 1 and the back and front are the same number: 5</li>\n<li>Dequeue the remaining item.</li>\n<li>Verify emptiness: it is empty now!</li>\n<li>Size is back to 0.</li>\n</ul>\n<hr>\n<h2 id="another-way-of-testing-it">Another way of testing it</h2>\n<p>Enqueue 5 new items:</p>\n<pre><code class="hljs language-python">queue = Queue()\nqueue.enqueue(<span class="hljs-number">1</span>)\nqueue.enqueue(<span class="hljs-number">2</span>)\nqueue.enqueue(<span class="hljs-number">3</span>)\nqueue.enqueue(<span class="hljs-number">4</span>)\nqueue.enqueue(<span class="hljs-number">5</span>)\n</code></pre>\n<p>Loop through the items and print each one.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> queue.items:\n    <span class="hljs-built_in">print</span>(item)\n</code></pre>\n<p>Test front and back.</p>\n<pre><code class="hljs language-python">test_front(queue) <span class="hljs-comment"># 1</span>\ntest_back(queue) <span class="hljs-comment"># 5</span>\n</code></pre>\n<p>Dequeue all.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> queue.is_empty():\n    queue.dequeue()\n</code></pre>\n<p>Test size.</p>\n<pre><code class="hljs language-python">test_size(queue) <span class="hljs-comment"># 0</span>\n</code></pre>\n<hr>\n<h2 id="runtime-and-space-complexities">Runtime and Space complexities</h2>\n<p>Now about space and runtime complexities for each method implemented.</p>\n<p>The space is pretty simple. It&#39;s a list, so it&#39;s <code>O(n)</code> where <code>n</code> is the current number of items in the stack.</p>\n<p>The runtime for each method is <code>O(1)</code>, constant time.</p>\n<hr>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="http://leandrotk.github.io/tk/2017/09/learning-python-from-zero-to-hero/index.html">Learning Python: From Zero to Hero</a></li>\n<li><a href="https://mbsy.co/lG6tv">One Month - Learn Python</a></li>\n<li><a href="https://www.educative.io/courses/big-o-notation-for-interviews-and-beyond?aff=x8bV">Big-O Notation For Coding Interviews and Beyond</a></li>\n<li><a href="https://www.educative.io/courses/learn-python-from-scratch?aff=x8bV">Learn Python from Scratch</a></li>\n<li><a href="https://www.educative.io/courses/learn-object-oriented-programming-in-python?aff=x8bV">Learn Object-Oriented Programming in Python</a></li>\n<li><a href="https://www.educative.io/courses/data-structures-in-python-an-interview-refresher?aff=x8bV">Data Structures in Python: An Interview Refresher</a></li>\n<li><a href="https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/1118290275">Data Structures and Algorithms in Python</a>)</li>\n<li><a href="https://www.youtube.com/watch?v=njTh_OwMljA&amp;feature=youtu.be">HackerRank Linked List</a></li>\n<li><a href="https://medium.com/basecs/whats-a-linked-list-anyway-part-1-d8b7e6508b9d">Linked List Part 1</a></li>\n<li><a href="https://medium.com/basecs/whats-a-linked-list-anyway-part-2-131d96f71996">Linked List Part 2</a></li>\n<li><a href="https://www.youtube.com/watch?v=op42w-5o3nE">Data Structures in Python: Circular Linked Lists - Remove Node</a></li>\n<li><a href="https://www.youtube.com/watch?v=njTh_OwMljA&amp;feature=youtu.be">Data Structures: Linked Lists</a></li>\n</ul>\n',
  },
  {
    title: 'Stack Data Structure',
    content:
      '<p>The stack is a collection of items that follows the <code>last-in, first-out</code> concept.</p>\n<p>For the addition of new items, the stack only allows it to push the new item to the top. When it comes to removing items, it only allows us to remove the last added item, or commonly known as the top item.</p>\n<p>The main API methods are <code>push</code> (add) and <code>pop</code> (remove). But we can also add other methods as part of the API implementation: <code>size</code>, <code>top</code>, and <code>is_empty</code>.</p>\n<h2 id="stack-implementation">Stack Implementation</h2>\n<p>We can create a <code>Stack</code> class as a wrapper and use the Python list to store the stack data. This class will have the implementation of the <code>push</code>, <code>pop</code>, <code>size</code>, <code>top</code>, and <code>is_empty</code> methods.</p>\n<p>The first step is to create a class definition and how we are gone store our items.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):\n        self.items = []\n</code></pre>\n<p>This is basically what we need for now. Just a class and its constructor. When the instance is created, it will have the <code>items</code> list to store the stack items.</p>\n<p>For the <code>push</code> method, we just need to use the list <code>append</code> method to add new items. The new items will be placed in the last index of this <code>items</code> list. So the top item from the stack will always be the last item.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">self, item</span>):\n    self.items.append(item)\n</code></pre>\n<p>It receives the new item and appends it to the list.</p>\n<p>The <code>size</code> method only counts the number of the stack items by using the <code>len</code> function.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">size</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.items)\n</code></pre>\n<p>The idea of the <code>is_empty</code> method is to verify if the list has or not items in it. If it has, returns <code>False</code>. Otherwise, <code>True</code>. To count the number of items in the stack, we can simply use the <code>size</code> method already implemented.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">return</span> self.size() == <span class="hljs-number">0</span>\n</code></pre>\n<p>The <code>pop</code> method from the list data structure can also be used to pop the item from the stack. It pops the last element as it is expected for the stack. The last added item.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">return</span> self.items.pop()\n</code></pre>\n<p>But we need to handle the stack emptiness. For an empty list, the <code>pop</code> method raises an exception <code>IndexError: pop from empty list</code>. So we can create an exception class to handle this issue.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Emptiness</span>(<span class="hljs-title class_ inherited__">Exception</span>):\n    <span class="hljs-keyword">pass</span>\n</code></pre>\n<p>And uses it when the list is empty:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">if</span> self.is_empty():\n        <span class="hljs-keyword">raise</span> Emptiness(<span class="hljs-string">&#x27;The Stack is empty&#x27;</span>)\n\n    <span class="hljs-keyword">return</span> self.items.pop()\n</code></pre>\n<p>If it is empty, we raise this exception. Otherwise, we can pop the top item from the stack.</p>\n<p>We use this same emptiness strategy for the <code>top</code> method:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">top</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">if</span> self.is_empty():\n        <span class="hljs-keyword">raise</span> Emptiness(<span class="hljs-string">&#x27;The Stack is empty&#x27;</span>)\n\n    <span class="hljs-keyword">return</span> self.items[-<span class="hljs-number">1</span>]\n</code></pre>\n<p>If it has at least one item, we get the top, the last added item in the stack.</p>\n<h2 id="stack-usage">Stack usage</h2>\n<p>The usage would be something like:</p>\n<pre><code class="hljs language-python">stack = Stack()\n\nstack.is_empty() <span class="hljs-comment"># True</span>\n\nstack.push(<span class="hljs-number">1</span>) <span class="hljs-comment"># [1]</span>\nstack.push(<span class="hljs-number">2</span>) <span class="hljs-comment"># [1, 2]</span>\nstack.push(<span class="hljs-number">3</span>) <span class="hljs-comment"># [1, 2, 3]</span>\nstack.push(<span class="hljs-number">4</span>) <span class="hljs-comment"># [1, 2, 3, 4]</span>\nstack.push(<span class="hljs-number">5</span>) <span class="hljs-comment"># [1, 2, 3, 4, 5]</span>\n\nstack.is_empty() <span class="hljs-comment"># False</span>\nstack.top() <span class="hljs-comment"># 5</span>\n\nstack.pop() <span class="hljs-comment"># 5</span>\nstack.pop() <span class="hljs-comment"># 4</span>\nstack.pop() <span class="hljs-comment"># 3</span>\nstack.pop() <span class="hljs-comment"># 2</span>\n\nstack.is_empty() <span class="hljs-comment"># False</span>\n\nstack.pop() <span class="hljs-comment"># 1</span>\n\nstack.is_empty() <span class="hljs-comment"># True</span>\n</code></pre>\n<p>We first instantiate a new stack from the <code>Stack</code> class.</p>\n<ul>\n<li>Verify emptiness: yes, it is!</li>\n<li>Add 5 new items to the stack: <code>[1, 2, 3, 4, 5]</code>.</li>\n<li>Verify emptiness: not anymore!</li>\n<li>Get the top element: 5 because it was the last added item.</li>\n<li>Remove 4 items: 5, 4, 3, and 2.</li>\n<li>Verify emptiness: empty yet!</li>\n<li>Remove the remaining item.</li>\n<li>Verify emptiness: it is empty now!</li>\n</ul>\n<hr>\n<h2 id="runtime-and-space-complexities">Runtime and Space complexities</h2>\n<p>Now about space and runtime complexities for each method implemented.</p>\n<p>The space is pretty simple. It&#39;s a list, so it&#39;s <code>O(n)</code> where <code>n</code> is the current number of items in the stack.</p>\n<p>The runtime for each method is <code>O(1)</code>, constant time.</p>\n<hr>\n<h2 id="reversing-a-list">Reversing a list</h2>\n<p>We can use the stack data structure for a diverse number of algorithms. An example is to reverse the items from a list.</p>\n<p>We want to reverse a list of books, a bookshelf.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">bookshelf</span>):\n    stack = Stack()\n\n    <span class="hljs-keyword">for</span> book <span class="hljs-keyword">in</span> bookshelf:\n        stack.push(book)\n\n    reversed_bookshelf = []\n\n    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> stack.is_empty():\n        reversed_bookshelf.append(stack.pop())\n\n    <span class="hljs-keyword">return</span> reversed_bookshelf\n</code></pre>\n<ul>\n<li>Create a stack instance</li>\n<li>Push each list item to the stack</li>\n<li>Create an empty reversed list</li>\n<li>Pop each item until the stack is empty</li>\n<li>For each popped item, append it to the reversed list</li>\n<li>Return the reversed list</li>\n</ul>\n<p>The idea is to make the last list item the first to be popped from the stack.</p>\n<p>The function usage would be something like:</p>\n<pre><code class="hljs language-python">bookshelf = [\n    <span class="hljs-string">&#x27;Harry Potter&#x27;</span>,\n    <span class="hljs-string">&#x27;Atomic Habits&#x27;</span>,\n    <span class="hljs-string">&#x27;Leonardo da Vinci&#x27;</span>,\n    <span class="hljs-string">&#x27;Sapiens&#x27;</span>,\n    <span class="hljs-string">&#x27;Peak&#x27;</span>\n]\n\nreversed_bookshelf = reverse(bookshelf)\n\n<span class="hljs-built_in">print</span>(reversed_bookshelf) <span class="hljs-comment"># [&#x27;Peak&#x27;, &#x27;Sapiens&#x27;, &#x27;Leonardo da Vinci&#x27;, &#x27;Atomic Habits&#x27;, &#x27;Harry Potter&#x27;]</span>\n</code></pre>\n<hr>\n<h2 id="other-examples">Other examples</h2>\n<p>We can also implement the stack concept in a <code>undo</code> command. Imagine our text editor. For each document change, we store the new document in the stack. If we want to <code>undo</code> the change, we just need to pop the last change and stay with the previous state of the document.</p>\n<p>Web Browsers can also use stacks to store the visited website. When the user visits a new website, it pushes the new URL to the stack. When the user goes back, using the &quot;back&quot; button, it pops the last visited website and uses the previous URL.</p>\n<hr>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="http://leandrotk.github.io/tk/2017/09/learning-python-from-zero-to-hero/index.html">Learning Python: From Zero to Hero</a></li>\n<li><a href="https://mbsy.co/lG6tv">One Month - Learn Python</a></li>\n<li><a href="https://www.educative.io/courses/big-o-notation-for-interviews-and-beyond?aff=x8bV">Big-O Notation For Coding Interviews and Beyond</a></li>\n<li><a href="https://www.educative.io/courses/learn-python-from-scratch?aff=x8bV">Learn Python from Scratch</a></li>\n<li><a href="https://www.educative.io/courses/learn-object-oriented-programming-in-python?aff=x8bV">Learn Object-Oriented Programming in Python</a></li>\n<li><a href="https://www.educative.io/courses/data-structures-in-python-an-interview-refresher?aff=x8bV">Data Structures in Python: An Interview Refresher</a></li>\n<li><a href="https://www.geeksforgeeks.org/stack-data-structure-introduction-program/">Stack Data Structure</a></li>\n<li><a href="https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/1118290275">Data Structures and Algorithms in Python</a></li>\n<li><a href="https://www.hackerearth.com/pt-br/practice/data-structures/stacks/basics-of-stacks/tutorial/">Basics of Stacks</a></li>\n<li><a href="https://www.cs.cmu.edu/~adamchik/15-121/lectures/Stacks%20and%20Queues/Stacks%20and%20Queues.html">CMU Stacks</a></li>\n<li><a href="https://realpython.com/how-to-implement-python-stack/">How to Implement a Python Stack</a></li>\n</ul>\n',
  },
  {
    title: 'Tree Data Structure',
    content:
      '<p>When you first learn to code, it’s common to learn arrays as the “main data structure.”</p>\n<p>Eventually, you will learn about <code>hash tables</code> too. If you are pursuing a Computer Science degree, you have to take a class on data structure. You will also learn about <code>linked lists</code>, <code>queues</code>, and <code>stacks</code>. Those data structures are called “linear” data structures because they all have a logical start and a logical end.</p>\n<p>When we start learning about <code>trees</code> and <code>graphs</code>, it can get really confusing. We don’t store data in a linear way. Both data structures store data in a specific way.</p>\n<p>This post is to help you better understand the Tree Data Structure and to clarify any confusion you may have about it.</p>\n<p>In this article, we will learn:</p>\n<ul>\n<li><p>What is a tree</p>\n</li>\n<li><p>Examples of trees</p>\n</li>\n<li><p>Its terminology and how it works</p>\n</li>\n<li><p>How to implement tree structures in code.</p>\n</li>\n</ul>\n<p>Let’s start this learning journey. :)</p>\n<h3 id="definition">Definition</h3>\n<p>When starting out programming, it is common to understand better the linear data structures than data structures like trees and graphs.</p>\n<p>Trees are well-known as a non-linear data structure. They don’t store data in a linear way. They organize data hierarchically.</p>\n<h3 id="lets-dive-into-real-life-examples">Let’s dive into real life examples!</h3>\n<p>What do I mean when I say in a hierarchical way?</p>\n<p>Imagine a family tree with relationships from all generation: grandparents, parents, children, siblings, etc. We commonly organize family trees hierarchically.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*MasdC5DmucEU2abIXQe45Q.jpeg" alt=""></p>\n<p>The above drawing is is my family tree. <code>Tossico, Akikazu, Hitomi,</code> and <code>Takemi</code> are my grandparents.</p>\n<p><code>Toshiaki</code> and <code>Juliana </code>are my parents.</p>\n<p><code>TK, Yuji, Bruno</code>, and <code>Kaio</code> are the children of my parents (me and my brothers).</p>\n<p>An organization’s structure is another example of a hierarchy.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*GsBCmW5E1GuJ3MpH3Zz0Ew.jpeg" alt=""></p>\n<p>In HTML, the Document Object Model (DOM) works as a tree.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*dLXUdR4NuIZG8GJdu_Cinw.jpeg" alt=""></p>\n<p>The <code>HTML</code> tag contains other tags. We have a <code>head</code> tag and a <code>body</code> tag. Those tags contains specific elements. The <code>head</code> tag has <code>meta</code> and <code>title</code> tags. The <code>body</code> tag has elements that show in the user interface, for example, <code>h1</code>, <code>a</code>, <code>li</code>, etc.</p>\n<h3 id="a-technical-definition">A technical definition</h3>\n<p>A <code>tree</code> is a collection of entities called <code>nodes</code>. Nodes are connected by <code>edges</code>. Each <code>node</code> contains a <code>value</code> or <code>data</code>, and it may or may not have a <code>child node</code> .</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*3WN7tIQ-kNBQmY9MgvTuOA.jpeg" alt=""></p>\n<p>The <code>first node</code> of the <code>tree</code> is called the <code>root</code>. If this <code>root node</code> is connected by another <code>node</code>, the <code>root</code> is then a <code>parent node</code> and the connected <code>node</code> is a <code>child</code>.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*9AtR3bhhlMJxQlaUVEQgrw.jpeg" alt=""></p>\n<p>All<code> Tree nodes</code> are connected by links called <code>edges</code>. It’s an important part of <code>trees</code>, because it’s manages the relationship between <code>nodes</code>.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*j5qKwIxKcEjoxy88EOc1Rg.jpeg" alt=""></p>\n<p><code>Leaves</code> are the last <code>nodes</code> on a <code>tree.</code> They are nodes without children. Like real trees, we have the <code>root</code>, <code>branches</code>, and finally the <code>leaves</code>.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*c9_5uMUsIy4Q3OA7Q8bJiw.jpeg" alt=""></p>\n<p>Other important concepts to understand are <code>height</code> and <code>depth</code>.</p>\n<p>The <code>height</code> of a <code>tree</code> is the length of the longest path to a <code>leaf</code>.</p>\n<p>The <code>depth</code> of a <code>node</code> is the length of the path to its <code>root</code>.</p>\n<h3 id="terminology-summary">Terminology summary</h3>\n<ul>\n<li><p>**Root **is the topmost <code>node</code> of the <code>tree</code></p>\n</li>\n<li><p>**Edge **is the link between two <code>nodes</code></p>\n</li>\n<li><p>**Child **is a <code>node</code> that has a <code>parent node</code></p>\n</li>\n<li><p>**Parent **is a <code>node</code> that has an <code>edge</code> to a <code>child node</code></p>\n</li>\n<li><p>**Leaf **is a <code>node</code> that does not have a <code>child node</code> in the <code>tree</code></p>\n</li>\n<li><p>**Height **is the length of the longest path to a <code>leaf</code></p>\n</li>\n<li><p>**Depth **is the length of the path to its <code>root</code></p>\n</li>\n</ul>\n<h3 id="binary-trees">Binary trees</h3>\n<p>Now we will discuss a specific type of <code>tree</code>. We call it the<code>binary tree</code>.</p>\n<blockquote>\n<p>“In computer science, a binary tree is a tree data structure in which each node has at the most two children, which are referred to as the left child and the right child.” — Wikipedia</p>\n</blockquote>\n<p>So let’s look at an example of a <code>binary tree</code>.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*ofbwuz4inpf2OlB-l9gtHw.jpeg" alt=""></p>\n<h3 id="lets-code-a-binary-tree">Let’s code a binary tree</h3>\n<p>The first thing we need to keep in mind when we implement a <code>binary tree</code> is that it is a collection of <code>nodes</code>. Each <code>node</code> has three attributes: <code>value</code>, <code>left_child</code>, and <code>right_child</code>.</p>\n<p>How do we implement a simple <code>binary tree</code> that initializes with these three properties?</p>\n<p>Let’s take a look.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTree</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):\n        self.value = value\n        self.left_child = <span class="hljs-literal">None</span>\n        self.right_child = <span class="hljs-literal">None</span>\n</code></pre>\n<p>Here it is. Our <code>binary tree</code> class.</p>\n<p>When we instantiate an object, we pass the <code>value</code> (the data of the node) as a parameter. Look at the <code>left_child</code> and the <code>right_child</code>. Both are set to <code>None</code>.</p>\n<p>Why?</p>\n<p>Because when we create our <code>node</code>, it doesn’t have any children. We just have the <code>node data</code>.</p>\n<p>Let’s test it:</p>\n<pre><code class="hljs language-python">tree = BinaryTree(<span class="hljs-string">&#x27;a&#x27;</span>)\n<span class="hljs-built_in">print</span>(tree.value) <span class="hljs-comment"># a</span>\n<span class="hljs-built_in">print</span>(tree.left_child) <span class="hljs-comment"># None</span>\n<span class="hljs-built_in">print</span>(tree.right_child) <span class="hljs-comment"># None</span>\n</code></pre>\n<p>That’s it.</p>\n<p>We can pass the <code>string</code> ‘<code>a</code>’ as the <code>value</code> to our <code>Binary Tree node</code>. If we print the <code>value</code>, <code>left_child</code>, and <code>right_child</code>, we can see the values.</p>\n<p>Let’s go to the insertion part. What do we need to do here?</p>\n<p>We will implement a method to insert a new <code>node</code> to the <code>right</code> and to the <code>left</code>.</p>\n<p>Here are the rules:</p>\n<ul>\n<li><p>If the current <code>node</code> doesn’t have a <code>left child</code>, we just create a new <code>node</code>and set it to the current node’s <code>left_child</code>.</p>\n</li>\n<li><p>If it does have the <code>left child</code>, we create a new node and put it in the current <code>left child</code>’s place. Allocate this <code>left child node</code> to the new node’s <code>left child</code>.</p>\n</li>\n</ul>\n<p>Let’s draw it out. :)</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*ofbwuz4inpf2OlB-l9gtHw.jpeg" alt=""></p>\n<p>Here’s the code:</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert_left</span>(<span class="hljs-params">self, value</span>):\n    <span class="hljs-keyword">if</span> self.left_child == <span class="hljs-literal">None</span>:\n        self.left_child = BinaryTree(value)\n    <span class="hljs-keyword">else</span>:\n        new_node = BinaryTree(value)\n        new_node.left_child = self.left_child\n        self.left_child = new_node\n</code></pre>\n<p>Again, if the current node doesn’t have a <code>left child</code>, we just create a new node and set it to the current node’s <code>left_child</code>. Or else we create a new node and put it in the current <code>left child</code>’s place. Allocate this <code>left child node</code> to the new node’s <code>left child</code>.</p>\n<p>And we do the same thing to insert a <code>right child node</code>.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert_right</span>(<span class="hljs-params">self, value</span>):\n    <span class="hljs-keyword">if</span> self.right_child == <span class="hljs-literal">None</span>:\n        self.right_child = BinaryTree(value)\n    <span class="hljs-keyword">else</span>:\n        new_node = BinaryTree(value)\n        new_node.right_child = self.right_child\n        self.right_child = new_node\n</code></pre>\n<p>Done. :)</p>\n<p>But not entirely. We still need to test it.</p>\n<p>Let’s build the following<code>tree</code>:</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*V_EUgNXVc8Wy9H1-JoqT3g.jpeg" alt=""></p>\n<p>To summarize the illustration of this tree:</p>\n<ul>\n<li><p><code>a</code> <code>node</code> will be the <code>root</code> of our <code>binary Tree</code></p>\n</li>\n<li><p><code>a</code> <code>left child</code> is <code>b</code> <code>node</code></p>\n</li>\n<li><p><code>a</code> <code>right child</code> is <code>c</code> <code>node</code></p>\n</li>\n<li><p><code>b</code> <code>right child</code> is <code>d</code> <code>node</code> (<code>b</code> <code>node</code> doesn’t have a <code>left child</code>)</p>\n</li>\n<li><p><code>c</code> <code>left child</code> is <code>e</code> <code>node</code></p>\n</li>\n<li><p><code>c</code> <code>right child</code> is <code>f</code> <code>node</code></p>\n</li>\n<li><p>both <code>e</code> and <code>f</code> <code>nodes</code> do not have children</p>\n</li>\n</ul>\n<p>So here is the code for the <code>tree</code>:</p>\n<pre><code class="hljs language-python">a_node = BinaryTree(<span class="hljs-string">&#x27;a&#x27;</span>)\na_node.insert_left(<span class="hljs-string">&#x27;b&#x27;</span>)\na_node.insert_right(<span class="hljs-string">&#x27;c&#x27;</span>)\n\nb_node = a_node.left_child\nb_node.insert_right(<span class="hljs-string">&#x27;d&#x27;</span>)\n\nc_node = a_node.right_child\nc_node.insert_left(<span class="hljs-string">&#x27;e&#x27;</span>)\nc_node.insert_right(<span class="hljs-string">&#x27;f&#x27;</span>)\n\nd_node = b_node.right_child\ne_node = c_node.left_child\nf_node = c_node.right_child\n\n<span class="hljs-built_in">print</span>(a_node.value) <span class="hljs-comment"># a</span>\n<span class="hljs-built_in">print</span>(b_node.value) <span class="hljs-comment"># b</span>\n<span class="hljs-built_in">print</span>(c_node.value) <span class="hljs-comment"># c</span>\n<span class="hljs-built_in">print</span>(d_node.value) <span class="hljs-comment"># d</span>\n<span class="hljs-built_in">print</span>(e_node.value) <span class="hljs-comment"># e</span>\n<span class="hljs-built_in">print</span>(f_node.value) <span class="hljs-comment"># f</span>\n</code></pre>\n<p>Insertion is done.</p>\n<p>Now we have to think about <code>tree</code> traversal.</p>\n<p>We have <strong>two options</strong> here: <strong>Depth-First Search (DFS)</strong> and <strong>Breadth-First Search (BFS)</strong>.</p>\n<ul>\n<li><p><a href="https://en.wikipedia.org/wiki/Depth-first_search">Wikipedia</a></p>\n</li>\n<li><p><a href="https://en.wikipedia.org/wiki/Breadth-first_search">Wikipedia</a></p>\n</li>\n</ul>\n<p>So let’s dive into each tree traversal type.</p>\n<h4 id="depth-first-search-dfs">Depth-First Search (DFS)</h4>\n<p><strong>DFS</strong> explores a path all the way to a leaf before <strong>backtracking</strong> and exploring another path. Let’s take a look at an example with this type of traversal.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*-sCuUx3R9e1ougu2pGdThg.jpeg" alt=""></p>\n<p>The result for this algorithm will be 1–2–3–4–5–6–7.</p>\n<p>Why?</p>\n<p>Let’s break it down.</p>\n<ol start="2">\n<li><p>Go to the <code>left child</code> (2). Print it.</p>\n</li>\n<li><p>Then go to the <code>left child</code> (3). Print it. (This <code>node</code> doesn’t have any children)</p>\n</li>\n<li><p>Backtrack and go the <code>right child</code> (4). Print it. (This <code>node</code> doesn’t have any children)</p>\n</li>\n<li><p>Backtrack to the <code>root</code> <code>node</code> and go to the <code>right child</code> (5). Print it.</p>\n</li>\n<li><p>Go to the <code>left child</code> (6). Print it. (This <code>node</code> doesn’t have any children)</p>\n</li>\n<li><p>Backtrack and go to the <code>right child</code> (7). Print it. (This <code>node</code> doesn’t have any children)</p>\n</li>\n<li><p>Done.</p>\n</li>\n</ol>\n<p>When we go deep to the leaf and backtrack, this is called <strong>DFS</strong> algorithm.</p>\n<p>Now that we are familiar with this traversal algorithm, we will discuss types of <strong>DFS</strong>: <code>pre-order</code>, <code>in-order</code>, and <code>post-order</code>.</p>\n<h4 id="pre-order">Pre-order</h4>\n<p>This is exactly what we did in the above example.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre_order</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-built_in">print</span>(self.value)\n\n    <span class="hljs-keyword">if</span> self.left_child:\n        self.left_child.pre_order()\n\n    <span class="hljs-keyword">if</span> self.right_child:\n        self.right_child.pre_order()\n</code></pre>\n<h4 id="in-order">In-order</h4>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*-sCuUx3R9e1ougu2pGdThg.jpeg" alt=""></p>\n<p>The result of the in-order algorithm for this <code>tree</code> example is 3–2–4–1–6–5–7.</p>\n<p>The left first, the middle second, and the right last.</p>\n<p>Now let’s code it.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">in_order</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">if</span> self.left_child:\n        self.left_child.in_order()\n\n    <span class="hljs-built_in">print</span>(self.value)\n\n    <span class="hljs-keyword">if</span> self.right_child:\n        self.right_child.in_order()\n</code></pre>\n<h4 id="post-order">Post-order</h4>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*-sCuUx3R9e1ougu2pGdThg.jpeg" alt=""></p>\n<p>The result of the <code>post order</code> algorithm for this <code>tree</code> example is 3–4–2–6–7–5–1.</p>\n<p>The left first, the right second, and the middle last.</p>\n<p>Let’s code this.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">post_order</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">if</span> self.left_child:\n        self.left_child.post_order()\n\n    <span class="hljs-keyword">if</span> self.right_child:\n        self.right_child.post_order()\n\n    <span class="hljs-built_in">print</span>(self.value)\n</code></pre>\n<h4 id="breadth-first-search-bfs">Breadth-First Search (BFS)</h4>\n<p><strong>BFS</strong> algorithm traverses the <code>tree</code> level by level and depth by depth.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*ZNxp_NkRZLCeak85rreebA.jpeg" alt=""></p>\n<p>Here is an example that helps to better explain this algorithm:</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*-sCuUx3R9e1ougu2pGdThg.jpeg" alt=""></p>\n<p>So we traverse level by level. In this example, the result is 1–2–5–3–4–6–7.</p>\n<ul>\n<li><p>Level/Depth 0: only <code>node</code> with value 1</p>\n</li>\n<li><p>Level/Depth 1: <code>nodes</code> with values 2 and 5</p>\n</li>\n<li><p>Level/Depth 2: <code>nodes</code> with values 3, 4, 6, and 7</p>\n</li>\n</ul>\n<p>Now let’s code it.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bfs</span>(<span class="hljs-params">self</span>):\n    queue = Queue()\n    queue.put(self)\n\n    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> queue.empty():\n        current_node = queue.get()\n        <span class="hljs-built_in">print</span>(current_node.value)\n\n        <span class="hljs-keyword">if</span> current_node.left_child:\n            queue.put(current_node.left_child)\n\n        <span class="hljs-keyword">if</span> current_node.right_child:\n            queue.put(current_node.right_child)\n</code></pre>\n<p>To implement a <strong>BFS</strong> algorithm, we use the <code>queue</code> data structure to help.</p>\n<p>How does it work?</p>\n<p>Here’s the explanation.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*A4yGfEoiqcZ-COvAfr2CWQ.jpeg" alt=""></p>\n<h3 id="binary-search-tree">Binary Search tree</h3>\n<blockquote>\n<p>“A Binary Search Tree is sometimes called ordered or sorted binary trees, and it keeps its values in sorted order, so that lookup and other operations can use the principle of binary search” — Wikipedia</p>\n</blockquote>\n<p>An important property of a <code>Binary Search Tree</code> is that the value of a <code>Binary Search Tree</code> <code>node</code>is larger than the value of the offspring of its <code>left child</code>, but smaller than the value of the offspring of its <code>right child.</code>”</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*mslH9VtVUN9Hs983XxUN5A.jpeg" alt=""></p>\n<p>Here is a breakdown of the above illustration:</p>\n<ul>\n<li><p>**A **is inverted. The <code>subtree</code> 7–5–8–6 needs to be on the right side, and the <code>subtree</code> 2–1–3 needs to be on the left.</p>\n</li>\n<li><p>**B **is the only correct option. It satisfies the <code>Binary Search Tree</code> property.</p>\n</li>\n<li><p>**C **has one problem: the <code>node</code> with the value 4. It needs to be on the left side of the <code>root</code> because it is smaller than 5.</p>\n</li>\n</ul>\n<h3 id="lets-code-a-binary-search-tree">Let’s code a Binary Search Tree!</h3>\n<p>Now it’s time to code!</p>\n<p>What will we see here? We will insert new nodes, search for a value, delete nodes, and the balance of the <code>tree</code>.</p>\n<p>Let’s start.</p>\n<h4 id="insertion-adding-new-nodes-to-our-tree">Insertion: adding new nodes to our tree</h4>\n<p>Imagine that we have an empty <code>tree</code> and we want to add new <code>nodes</code> with the following values in this order: 50, 76, 21, 4, 32, 100, 64, 52.</p>\n<p>The first thing we need to know is if 50 is the <code>root</code> of our tree.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*fxSlTwgQSN_DlzfEmcxqQg.jpeg" alt=""></p>\n<p>We can now start inserting <code>node</code> by <code>node</code>.</p>\n<ul>\n<li><p>76 is greater than 50, so insert 76 on the right side.</p>\n</li>\n<li><p>21 is smaller than 50, so insert 21 on the left side.</p>\n</li>\n<li><p>4 is smaller than 50. <code>Node</code> with value 50 has a <code>left child</code> 21. Since 4 is smaller than 21, insert it on the left side of this <code>node</code>.</p>\n</li>\n<li><p>32 is smaller than 50. <code>Node</code> with value 50 has a <code>left child</code> 21. Since 32 is greater than 21, insert 32 on the right side of this <code>node</code>.</p>\n</li>\n<li><p>100 is greater than 50. <code>Node</code> with value 50 has a <code>right child</code> 76. Since 100 is greater than 76, insert 100 on the right side of this <code>node</code>.</p>\n</li>\n<li><p>64 is greater than 50. <code>Node</code> with value 50 has a <code>right child </code>76. Since 64 is smaller than 76, insert 64 on the left side of this <code>node</code>.</p>\n</li>\n<li><p>52 is greater than 50. <code>Node</code> with value 50 has a <code>right child </code>76. Since 52 is smaller than 76, <code>node</code> with value 76 has a <code>left child</code> 64. 52 is smaller than 64, so insert 54 on the left side of this <code>node</code>.</p>\n</li>\n</ul>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*LlLDNx7wgJfH6VAGnyAbIQ.jpeg" alt=""></p>\n<p>Do you notice a pattern here?</p>\n<p>Let’s break it down.</p>\n<p>Now let’s code it.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySearchTree</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):\n        self.value = value\n        self.left_child = <span class="hljs-literal">None</span>\n        self.right_child = <span class="hljs-literal">None</span>\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert_node</span>(<span class="hljs-params">self, value</span>):\n        <span class="hljs-keyword">if</span> value &lt;= self.value <span class="hljs-keyword">and</span> self.left_child:\n            self.left_child.insert_node(value)\n        <span class="hljs-keyword">elif</span> value &lt;= self.value:\n            self.left_child = BinarySearchTree(value)\n        <span class="hljs-keyword">elif</span> value &gt; self.value <span class="hljs-keyword">and</span> self.right_child:\n            self.right_child.insert_node(value)\n        <span class="hljs-keyword">else</span>:\n            self.right_child = BinarySearchTree(value)\n</code></pre>\n<p>It seems very simple.</p>\n<p>The powerful part of this algorithm is the recursion part, which is on line 9 and line 13. Both lines of code call the <code>insert_node</code> method, and use it for its <code>left</code> and <code>right</code> <code>children</code>, respectively. Lines <code>11</code> and <code>15</code> are the ones that do the insertion for each <code>child</code>.</p>\n<h4 id="lets-search-for-the-node-value-or-not">Let’s search for the node value… Or not…</h4>\n<p>The algorithm that we will build now is about doing searches. For a given value (integer number), we will say if our <code>Binary Search Tree</code> does or does not have that value.</p>\n<p>An important item to note is how we defined the tree <strong>insertion algorithm</strong>. First we have our <code>root</code> <code>node</code>. All the left <code>subtree</code> <code>nodes </code>will have smaller values than the <code>root</code> <code>node</code>. And all the right <code>subtree</code> <code>nodes </code>will have values greater than the <code>root</code> <code>node</code>.</p>\n<p>Let’s take a look at an example.</p>\n<p>Imagine that we have this <code>tree</code>.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*LlLDNx7wgJfH6VAGnyAbIQ.jpeg" alt=""></p>\n<p>Now we want to know if we have a node based on value 52.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*NwvTrpKiJWb1u2yAY-nnAA.jpeg" alt=""></p>\n<p>Let’s break it down.</p>\n<p>Now let’s code it.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySearchTree</span>:\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):\n        self.value = value\n        self.left_child = <span class="hljs-literal">None</span>\n        self.right_child = <span class="hljs-literal">None</span>\n\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_node</span>(<span class="hljs-params">self, value</span>):\n        <span class="hljs-keyword">if</span> value &lt; self.value <span class="hljs-keyword">and</span> self.left_child:\n            <span class="hljs-keyword">return</span> self.left_child.find_node(value)\n        <span class="hljs-keyword">if</span> value &gt; self.value <span class="hljs-keyword">and</span> self.right_child:\n            <span class="hljs-keyword">return</span> self.right_child.find_node(value)\n\n        <span class="hljs-keyword">return</span> value == self.value\n</code></pre>\n<p>Let’s beak down the code:</p>\n<ul>\n<li><p>Lines 8 and 9 fall under rule #1.</p>\n</li>\n<li><p>Lines 10 and 11 fall under rule #2.</p>\n</li>\n<li><p>Line 13 falls under rule #3.</p>\n</li>\n</ul>\n<p>How do we test it?</p>\n<p>Let’s create our <code>Binary Search Tree </code>by initializing the <code>root</code> <code>node</code> with the value 15.</p>\n<pre><code class="hljs language-python">bst = BinarySearchTree(<span class="hljs-number">15</span>)\n</code></pre>\n<p>And now we will insert many new <code>nodes</code>.</p>\n<pre><code class="hljs language-python">bst.insert_node(<span class="hljs-number">10</span>)\nbst.insert_node(<span class="hljs-number">8</span>)\nbst.insert_node(<span class="hljs-number">12</span>)\nbst.insert_node(<span class="hljs-number">20</span>)\nbst.insert_node(<span class="hljs-number">17</span>)\nbst.insert_node(<span class="hljs-number">25</span>)\nbst.insert_node(<span class="hljs-number">19</span>)\n</code></pre>\n<p>For each inserted <code>node</code> , we will test if our <code>find_node</code> method really works.</p>\n<pre><code class="hljs language-python"><span class="hljs-built_in">print</span>(bst.find_node(<span class="hljs-number">15</span>)) <span class="hljs-comment"># True</span>\n<span class="hljs-built_in">print</span>(bst.find_node(<span class="hljs-number">10</span>)) <span class="hljs-comment"># True</span>\n<span class="hljs-built_in">print</span>(bst.find_node(<span class="hljs-number">8</span>)) <span class="hljs-comment"># True</span>\n<span class="hljs-built_in">print</span>(bst.find_node(<span class="hljs-number">12</span>)) <span class="hljs-comment"># True</span>\n<span class="hljs-built_in">print</span>(bst.find_node(<span class="hljs-number">20</span>)) <span class="hljs-comment"># True</span>\n<span class="hljs-built_in">print</span>(bst.find_node(<span class="hljs-number">17</span>)) <span class="hljs-comment"># True</span>\n<span class="hljs-built_in">print</span>(bst.find_node(<span class="hljs-number">25</span>)) <span class="hljs-comment"># True</span>\n<span class="hljs-built_in">print</span>(bst.find_node(<span class="hljs-number">19</span>)) <span class="hljs-comment"># True</span>\n</code></pre>\n<p>Yeah, it works for these given values! Let’s test for a value that doesn’t exist in our <code>Binary Search Tree</code>.</p>\n<pre><code class="hljs language-python"><span class="hljs-built_in">print</span>(bst.find_node(<span class="hljs-number">0</span>)) <span class="hljs-comment"># False</span>\n</code></pre>\n<p>Oh yeah.</p>\n<p>Our search is done.</p>\n<h4 id="deletion-removing-and-organizing">Deletion: removing and organizing</h4>\n<p>Deletion is a more complex algorithm because we need to handle different cases. For a given value, we need to remove the <code>node</code> with this value. Imagine the following scenarios for this <code>node</code> : it has no <code>children</code>, has a single <code>child</code>, or has two <code>children</code>.</p>\n<ul>\n<li><strong>Scenario #1</strong>: A <code>node</code> with no <code>children</code> (<code>leaf</code> <code>node</code>).</li>\n</ul>\n<pre><code class="hljs language-python"><span class="hljs-comment">#        |50|                              |50|</span>\n<span class="hljs-comment">#      /      \\                           /    \\</span>\n<span class="hljs-comment">#    |30|     |70|   (DELETE 20) ---&gt;   |30|   |70|</span>\n<span class="hljs-comment">#   /    \\                                \\</span>\n<span class="hljs-comment"># |20|   |40|                             |40|</span>\n</code></pre>\n<p>If the <code>node</code> we want to delete has no children, we simply delete it. The algorithm doesn’t need to reorganize the <code>tree</code>.</p>\n<ul>\n<li><strong>Scenario #2</strong>: A <code>node</code> with just one child (<code>left</code> or <code>right</code> child).</li>\n</ul>\n<pre><code class="hljs language-python"><span class="hljs-comment">#        |50|                              |50|</span>\n<span class="hljs-comment">#      /      \\                           /    \\</span>\n<span class="hljs-comment">#    |30|     |70|   (DELETE 30) ---&gt;   |20|   |70|</span>\n<span class="hljs-comment">#   /</span>\n<span class="hljs-comment"># |20|</span>\n</code></pre>\n<p>In this case, our algorithm needs to make the parent of the <code>node</code> point to the <code>child</code> node. If the <code>node</code> is the <code>left child</code>, we make the parent of the <code>left child</code> point to the <code>child</code>. If the <code>node</code> is the <code>right child</code> of its parent, we make the parent of the <code>right child</code> point to the <code>child</code>.</p>\n<ul>\n<li><strong>Scenario #3</strong>: A <code>node</code> with two children.</li>\n</ul>\n<pre><code class="hljs language-python"><span class="hljs-comment">#        |50|                              |50|</span>\n<span class="hljs-comment">#      /      \\                           /    \\</span>\n<span class="hljs-comment">#    |30|     |70|   (DELETE 30) ---&gt;   |40|   |70|</span>\n<span class="hljs-comment">#   /    \\                             /</span>\n<span class="hljs-comment"># |20|   |40|                        |20|</span>\n</code></pre>\n<p>When the <code>node</code> has 2 children, we need to find the <code>node</code> with the minimum value, starting from the <code>node</code>’s<code>right child</code>. We will put this <code>node</code> with minimum value in the place of the <code>node</code> we want to remove.</p>\n<p>It’s time to code.</p>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_node</span>(<span class="hljs-params">self, value, parent</span>):\n    <span class="hljs-keyword">if</span> value &lt; self.value <span class="hljs-keyword">and</span> self.left_child:\n        <span class="hljs-keyword">return</span> self.left_child.remove_node(value, self)\n    <span class="hljs-keyword">elif</span> value &lt; self.value:\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>\n    <span class="hljs-keyword">elif</span> value &gt; self.value <span class="hljs-keyword">and</span> self.right_child:\n        <span class="hljs-keyword">return</span> self.right_child.remove_node(value, self)\n    <span class="hljs-keyword">elif</span> value &gt; self.value:\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>\n    <span class="hljs-keyword">else</span>:\n        <span class="hljs-keyword">if</span> self.left_child <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> self.right_child <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> self == parent.left_child:\n            parent.left_child = <span class="hljs-literal">None</span>\n            self.clear_node()\n        <span class="hljs-keyword">elif</span> self.left_child <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> self.right_child <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> self == parent.right_child:\n            parent.right_child = <span class="hljs-literal">None</span>\n            self.clear_node()\n        <span class="hljs-keyword">elif</span> self.left_child <span class="hljs-keyword">and</span> self.right_child <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> self == parent.left_child:\n            parent.left_child = self.left_child\n            self.clear_node()\n        <span class="hljs-keyword">elif</span> self.left_child <span class="hljs-keyword">and</span> self.right_child <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> self == parent.right_child:\n            parent.right_child = self.left_child\n            self.clear_node()\n        <span class="hljs-keyword">elif</span> self.right_child <span class="hljs-keyword">and</span> self.left_child <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> self == parent.left_child:\n            parent.left_child = self.right_child\n            self.clear_node()\n        <span class="hljs-keyword">elif</span> self.right_child <span class="hljs-keyword">and</span> self.left_child <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> self == parent.right_child:\n            parent.right_child = self.right_child\n            self.clear_node()\n        <span class="hljs-keyword">else</span>:\n            self.value = self.right_child.find_minimum_value()\n            self.right_child.remove_node(self.value, self)\n\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>\n</code></pre>\n<ul>\n<li>To use the <code>clear_node</code> method: set the <code>None</code> value to all three attributes — (<code>value</code>, <code>left_child</code>, and <code>right_child</code>)</li>\n</ul>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">clear_node</span>(<span class="hljs-params">self</span>):\n    self.value = <span class="hljs-literal">None</span>\n    self.left_child = <span class="hljs-literal">None</span>\n    self.right_child = <span class="hljs-literal">None</span>\n</code></pre>\n<ul>\n<li>To use the <code>find_minimum_value</code> method: go way down to the left. If we can’t find anymore nodes, we found the smallest one.</li>\n</ul>\n<pre><code class="hljs language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_minimum_value</span>(<span class="hljs-params">self</span>):\n    <span class="hljs-keyword">if</span> self.left_child:\n        <span class="hljs-keyword">return</span> self.left_child.find_minimum_value()\n    <span class="hljs-keyword">else</span>:\n        <span class="hljs-keyword">return</span> self.value\n</code></pre>\n<p>Now let’s test it.</p>\n<p>We will use this <code>tree</code> to test our <code>remove_node</code> algorithm.</p>\n<pre><code class="hljs language-python"><span class="hljs-comment">#        |15|</span>\n<span class="hljs-comment">#      /      \\</span>\n<span class="hljs-comment">#    |10|     |20|</span>\n<span class="hljs-comment">#   /    \\    /    \\</span>\n<span class="hljs-comment"># |8|   |12| |17| |25|</span>\n<span class="hljs-comment">#              \\</span>\n<span class="hljs-comment">#              |19|</span>\n</code></pre>\n<p>Let’s remove the <code>node</code> with the <code>value</code> 8. It’s a <code>node</code> with no child.</p>\n<pre><code class="hljs language-python"><span class="hljs-built_in">print</span>(bst.remove_node(<span class="hljs-number">8</span>, <span class="hljs-literal">None</span>)) <span class="hljs-comment"># True</span>\nbst.pre_order_traversal()\n\n<span class="hljs-comment">#     |15|</span>\n<span class="hljs-comment">#   /      \\</span>\n<span class="hljs-comment"># |10|     |20|</span>\n<span class="hljs-comment">#    \\    /    \\</span>\n<span class="hljs-comment">#   |12| |17| |25|</span>\n<span class="hljs-comment">#          \\</span>\n<span class="hljs-comment">#          |19|</span>\n</code></pre>\n<p>Now let’s remove the <code>node</code> with the <code>value</code> 17. It’s a <code>node</code> with just one child.</p>\n<pre><code class="hljs language-python"><span class="hljs-built_in">print</span>(bst.remove_node(<span class="hljs-number">17</span>, <span class="hljs-literal">None</span>)) <span class="hljs-comment"># True</span>\nbst.pre_order_traversal()\n\n<span class="hljs-comment">#        |15|</span>\n<span class="hljs-comment">#      /      \\</span>\n<span class="hljs-comment">#    |10|     |20|</span>\n<span class="hljs-comment">#       \\    /    \\</span>\n<span class="hljs-comment">#      |12| |19| |25|</span>\n</code></pre>\n<p>Finally, we will remove a <code>node</code> with two children. This is the <code>root</code> of our <code>tree</code>.</p>\n<pre><code class="hljs language-python"><span class="hljs-built_in">print</span>(bst.remove_node(<span class="hljs-number">15</span>, <span class="hljs-literal">None</span>)) <span class="hljs-comment"># True</span>\nbst.pre_order_traversal()\n\n<span class="hljs-comment">#        |19|</span>\n<span class="hljs-comment">#      /      \\</span>\n<span class="hljs-comment">#    |10|     |20|</span>\n<span class="hljs-comment">#        \\        \\</span>\n<span class="hljs-comment">#        |12|     |25|</span>\n</code></pre>\n<p>The tests are now done. :)</p>\n<h3 id="thats-all-for-now">That’s all for now!</h3>\n<p>We learned a lot here.</p>\n<p>Congrats on finishing this dense content. It’s really tough to understand a concept that we do not know. But you did it. :)</p>\n<p>This is one more step forward in my journey to learning and mastering algorithms and data structures. You can see the documentation of my complete journey here on my <a href="https://medium.com/the-renaissance-developer">Renaissance Developer publication</a>.</p>\n<p>Have fun, keep learning and coding.</p>\n<p>Here are my <a href="https://www.medium.com/@leandrotk_">Medium</a>, <a href="https://twitter.com/LeandroTk_">Twitter</a>, <a href="https://github.com/imteekay">GitHub</a>, and <a href="http://br.linkedin.com/in/leandrotk/">LinkedIn</a> accounts.☺</p>\n<h3 id="additional-resources">Additional resources</h3>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=qH6yxkw0u78&amp;index=25&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Introduction to Tree Data Structure by mycodeschool</a></li>\n<li><a href="https://en.wikipedia.org/wiki/Tree_(data_structure)">Tree by Wikipedia</a></li>\n<li><a href="https://medium.com/basecs/how-to-not-be-stumped-by-trees-5f36208f68a7">How To Not Be Stumped By Trees by the talented Vaidehi Joshi</a></li>\n<li><a href="http://www.cs.jhu.edu/~cohen/CS226/Lectures/Trees.pdf">Intro to Trees, Lecture by Professor Jonathan Cohen</a></li>\n<li><a href="http://people.cs.ksu.edu/~schmidt/300s05/Lectures/Week7b.html">Intro to Trees, Lecture by Professor David Schmidt</a></li>\n<li><a href="http://www.cs.cmu.edu/~clo/www/CMU/DataStructures/Lessons/lesson4_1.htm">Intro to Trees, Lecture by Professor Victor Adamchik</a></li>\n<li><a href="https://www.youtube.com/watch?v=oSWTXtMglKE">Trees with Gayle Laakmann McDowell</a></li>\n<li><a href="https://github.com/imteekay/algorithms/blob/master/data_structures/binary_tree/binary_tree.py">Binary Tree Implementation</a> and <a href="https://github.com/imteekay/algorithms/blob/master/data_structures/binary_tree/test_binary_tree.py">Tests</a> by <a href="https://medium.com/@leandrotk_">TK</a></li>\n<li><a href="https://www.coursera.org/learn/data-structures">Coursera Course: Data Structures by University of California, San Diego</a></li>\n<li><a href="https://www.coursera.org/learn/data-structures-optimizing-performance">Coursera Course: Data Structures and Performance by University of California, San Diego</a></li>\n<li><a href="https://www.youtube.com/playlist?list=PLTxllHdfUq4d-DE16EDkpeb8Z68DU7Z_Q">Binary Search Tree concepts and Implementation by Paul Programming</a></li>\n<li><a href="https://github.com/imteekay/algorithms/blob/master/data_structures/binary_search_tree_without_node/binary_search_tree.py">Binary Search Tree Implementation</a> and <a href="https://github.com/imteekay/algorithms/blob/master/data_structures/binary_search_tree_without_node/test_binary_search_tree.py">Tests</a> by <a href="https://medium.com/@leandrotk_">TK</a></li>\n<li><a href="https://en.wikipedia.org/wiki/Tree_traversal">Tree Traversal by Wikipedia</a></li>\n<li><a href="http://www.geeksforgeeks.org/binary-search-tree-set-2-delete/">Binary Search Tree Remove Node Algorithm by GeeksforGeeks</a></li>\n<li><a href="http://www.algolist.net/Data_structures/Binary_search_tree/Removal">Binary Search Tree </a><a href="http://www.geeksforgeeks.org/binary-search-tree-set-2-delete/">R</a><a href="http://www.algolist.net/Data_structures/Binary_search_tree/Removal">emove </a><a href="http://www.geeksforgeeks.org/binary-search-tree-set-2-delete/">N</a><a href="http://www.algolist.net/Data_structures/Binary_search_tree/Removal">ode </a><a href="http://www.geeksforgeeks.org/binary-search-tree-set-2-delete/">A</a><a href="http://www.algolist.net/Data_structures/Binary_search_tree/Removal">lgorithm by Algolist</a></li>\n<li><a href="https://medium.freecodecamp.org/learning-python-from-zero-to-hero-120ea540b567">Learning Python From Zero to Hero</a></li>\n</ul>\n',
  },
  {
    title: 'Elixir Learnings: div and rem',
    content:
      '<p>This is part of my series on <a href="/series/elixir-learnings">Elixir Learnings</a>, where I share micro posts about everything I&#39;m learning related to Elixir.</p>\n<p><code>div</code> and <code>rem</code> stand for <code>division</code> and <code>remainder</code>. We can get the result of a division between two numbers.</p>\n<pre><code class="hljs language-elixir">div <span class="hljs-number">10</span>, <span class="hljs-number">2</span> <span class="hljs-comment"># 5</span>\ndiv <span class="hljs-number">10</span>, <span class="hljs-number">3</span> <span class="hljs-comment"># 3</span>\ndiv <span class="hljs-number">10</span>, <span class="hljs-number">4</span> <span class="hljs-comment"># 2</span>\ndiv <span class="hljs-number">10</span>, <span class="hljs-number">5</span> <span class="hljs-comment"># 2</span>\n</code></pre>\n<p>And the remaining:</p>\n<pre><code class="hljs language-elixir">rem <span class="hljs-number">10</span>, <span class="hljs-number">2</span> <span class="hljs-comment"># 0</span>\nrem <span class="hljs-number">10</span>, <span class="hljs-number">3</span> <span class="hljs-comment"># 1</span>\nrem <span class="hljs-number">10</span>, <span class="hljs-number">4</span> <span class="hljs-comment"># 2</span>\nrem <span class="hljs-number">10</span>, <span class="hljs-number">5</span> <span class="hljs-comment"># 0</span>\n</code></pre>\n<p>While learning Elixir, I came across an exercise: I needed to build a function that returns the how many boxes of each type (big, medium, and small) I need to use to organize a number of matchsticks. And I also needed to return the remaining matchsticks.</p>\n<p>The big box can be filled with 50 matchsticks. The medium: 20. And the small: 5.</p>\n<p>To solve this problem, I start with the big box. For a number <code>N</code>, how many big boxes I can use? I can use the <code>div</code> function to get this information: <code>div(N, 50)</code>. As I filled the big boxes, I need to get the remaining matchsticks to do the same thing with the medium and small boxes.</p>\n<pre><code class="hljs language-elixir">big = div(matchsticks, <span class="hljs-number">50</span>)\nremaining_after_big = rem(matchsticks, <span class="hljs-number">50</span>)\n\nmedium = div(remaining_after_big, <span class="hljs-number">20</span>)\nremaining_after_medium = rem(remaining_after_big, <span class="hljs-number">20</span>)\n\nsmall = div(remaining_after_medium, <span class="hljs-number">5</span>)\nremaining_matchsticks = rem(remaining_after_medium, <span class="hljs-number">5</span>)\n</code></pre>\n<p>With this, I have the <code>big</code>, the <code>medium</code>, the <code>small</code>, and the <code>remaining_matchsticks</code>. And I can return this whole information with a map object.</p>\n<pre><code class="hljs language-elixir"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">boxes</span></span>(matchsticks) <span class="hljs-keyword">do</span>\n  big = div(matchsticks, <span class="hljs-number">50</span>)\n  remaining_after_big = rem(matchsticks, <span class="hljs-number">50</span>)\n\n  medium = div(remaining_after_big, <span class="hljs-number">20</span>)\n  remaining_after_medium = rem(remaining_after_big, <span class="hljs-number">20</span>)\n\n  small = div(remaining_after_medium, <span class="hljs-number">5</span>)\n  remaining_matchsticks = rem(remaining_after_medium, <span class="hljs-number">5</span>)\n\n  %{\n    <span class="hljs-symbol">big:</span> big,\n    <span class="hljs-symbol">medium:</span> medium,\n    <span class="hljs-symbol">small:</span> small,\n    <span class="hljs-symbol">remaining_matchsticks:</span> remaining_matchsticks\n  }\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>I can also build this function inside a module:</p>\n<pre><code class="hljs language-elixir"><span class="hljs-class"><span class="hljs-keyword">defmodule</span> <span class="hljs-title">MatchstickFactory</span></span> <span class="hljs-keyword">do</span>\n  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">boxes</span></span>(matchsticks) <span class="hljs-keyword">do</span>\n    big = div(matchsticks, <span class="hljs-number">50</span>)\n    remaining_after_big = rem(matchsticks, <span class="hljs-number">50</span>)\n\n    medium = div(remaining_after_big, <span class="hljs-number">20</span>)\n    remaining_after_medium = rem(remaining_after_big, <span class="hljs-number">20</span>)\n\n    small = div(remaining_after_medium, <span class="hljs-number">5</span>)\n    remaining_matchsticks = rem(remaining_after_medium, <span class="hljs-number">5</span>)\n\n    %{\n      <span class="hljs-symbol">big:</span> big,\n      <span class="hljs-symbol">medium:</span> medium,\n      <span class="hljs-symbol">small:</span> small,\n      <span class="hljs-symbol">remaining_matchsticks:</span> remaining_matchsticks\n    }\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">end</span>\n</code></pre>\n<p>And test it:</p>\n<pre><code class="hljs language-elixir">MatchstickFactory.boxes(<span class="hljs-number">98</span>) <span class="hljs-comment"># %{big: 1, medium: 2, remaining_matchsticks: 3, small: 1}</span>\nMatchstickFactory.boxes(<span class="hljs-number">39</span>) <span class="hljs-comment"># %{big: 0, medium: 1, remaining_matchsticks: 4, small: 3}</span>\n</code></pre>\n',
  },
  {
    title: 'Elixir Learnings: playing around with lists',
    content:
      '<p>This is part of my series on <a href="/series/elixir-learnings">Elixir Learnings</a>, where I share micro-posts about everything I&#39;m learning related to Elixir.</p>\n<p>Today we going to play around with lists. At the same time lists are very simple, they are powerful. And we use it always in our day-to-day work. Here we will understand some common concepts we need to handle lists.</p>\n<h2 id="add-and-remove-items">Add and remove items</h2>\n<p>We have two ways to add new items to the list. We can use the <code>insert_at</code> List function and the <code>++</code> operator to concat lists.</p>\n<p>The <code>insert_at</code> function receives three parameters: the list, the index position you want to add the new item, and the item.</p>\n<pre><code class="hljs language-elixir">items = [<span class="hljs-number">1</span> ,<span class="hljs-number">2</span> ,<span class="hljs-number">3</span> ,<span class="hljs-number">4</span>]\nList.insert_at(items, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-comment"># [0, 1 ,2 ,3 ,4]</span>\nList.insert_at(items, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>) <span class="hljs-comment"># [1 ,2 ,3 ,4, 5]</span>\n</code></pre>\n<p>And Elixir lists are immutable. After these operations, if we call the <code>items</code> again, it will be the first value.</p>\n<pre><code class="hljs language-elixir">items <span class="hljs-comment"># [1 ,2 ,3 ,4]</span>\n</code></pre>\n<p>The list value doesn&#39;t change.</p>\n<p>We can also use the <code>++</code> operator to concat lists to add a new item.</p>\n<pre><code class="hljs language-elixir">brothers = [<span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-string">&#x27;Yuji&#x27;</span>, <span class="hljs-string">&#x27;Bruno&#x27;</span>]\nnew_brother = <span class="hljs-string">&#x27;Kaio&#x27;</span>\nbrothers ++ [new_brother] <span class="hljs-comment"># [&#x27;TK&#x27;, &#x27;Yuji&#x27;, &#x27;Bruno&#x27;, &#x27;Kaio&#x27;]</span>\n</code></pre>\n<p>Not only one item. But concat any list.</p>\n<pre><code class="hljs language-elixir">[<span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-string">&#x27;Kaio&#x27;</span>] ++ [<span class="hljs-string">&#x27;Yuji&#x27;</span>, <span class="hljs-string">&#x27;Bruno&#x27;</span>] <span class="hljs-comment"># [&#x27;TK&#x27;, &#x27;Kaio&#x27;, &#x27;Yuji&#x27;, &#x27;Bruno&#x27;]</span>\n</code></pre>\n<p>With the <code>--</code> operator, we can subtract a list of items from the left list.</p>\n<pre><code class="hljs language-elixir">bookshelf = [<span class="hljs-string">&#x27;HP&#x27;</span>, <span class="hljs-string">&#x27;Compound Effect&#x27;</span>, <span class="hljs-string">&#x27;Enlightenment Now&#x27;</span>]\nbookshelf -- [<span class="hljs-string">&#x27;HP&#x27;</span>] <span class="hljs-comment"># [&#x27;Compound Effect&#x27;, &#x27;Enlightenment Now&#x27;]</span>\n</code></pre>\n<h2 id="getting-items">Getting items</h2>\n<p>I learned simple but very useful functions to get items: <code>first</code> and <code>last</code>.</p>\n<pre><code class="hljs language-elixir">List.first([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) <span class="hljs-comment"># 1</span>\nList.last([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) <span class="hljs-comment"># 3</span>\n</code></pre>\n<p>We can also handle empty lists:</p>\n<pre><code class="hljs language-elixir">List.first([]) <span class="hljs-comment"># nil</span>\nList.last([]) <span class="hljs-comment"># nil</span>\n</code></pre>\n<h2 id="make-it-flat">Make it flat</h2>\n<p>Another cool function is <code>flat</code>. It flats nested lists. In other words, it transforms nested lists into just one with all the elements.</p>\n<ul>\n<li>Not so nested lists</li>\n</ul>\n<pre><code class="hljs language-elixir">List.flatten([<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>], [<span class="hljs-number">3</span>]]) <span class="hljs-comment"># [1, 2, 3]</span>\n</code></pre>\n<ul>\n<li>More complex nested lists</li>\n</ul>\n<pre><code class="hljs language-elixir">List.flatten([<span class="hljs-number">1</span>, [[<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>]]]]) <span class="hljs-comment"># [1, 2, 3]</span>\n</code></pre>\n<ul>\n<li>Nested empty lists</li>\n</ul>\n<pre><code class="hljs language-elixir">List.flatten([[], [[], []]]) <span class="hljs-comment"># []</span>\n</code></pre>\n<h2 id="iterate-through-it">Iterate through it</h2>\n<p>One thing we always do with lists is iteration. We can use the <code>each</code> function from the <code>Enum</code> module to loop through the list.</p>\n<pre><code class="hljs language-elixir">items = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]\nEnum.each(items, <span class="hljs-keyword">fn</span> (n) -&gt; IO.inspect(n) <span class="hljs-keyword">end</span>)\n</code></pre>\n<p>And we can also use a shortcut for functions.</p>\n<pre><code class="hljs language-elixir">Enum.each(items, &amp;IO.inspect/<span class="hljs-number">1</span>) <span class="hljs-comment"># shortcut</span>\n</code></pre>\n<p>The <code>Enum</code> module has various other functions to work on data types, like lists, that implements the <code>Enumerable</code> protocol.</p>\n<h2 id="destructuring">Destructuring</h2>\n<p>Another way to get items from the list is called <code>destructuring</code>. We unpack items from the list by specifying the &quot;variables&quot; inside a list.</p>\n<pre><code class="hljs language-elixir">[a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]\nIO.inspect a\nIO.inspect b\nIO.inspect c\n</code></pre>\n<p>With the <code>[a, b, c]</code>, we are specifying the variable names to destructure the list.</p>\n<p>If you want to get only the second item, use the <code>_</code> operator (also called <code>wildcard</code>).</p>\n<pre><code class="hljs language-elixir">[_, x, _] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]\nIO.inspect x <span class="hljs-comment"># 2</span>\n</code></pre>\n<p>Another interesting way to get items is by using the <code>|</code> operator. With this operator, we get the head (first item) and the right part represents the other items.</p>\n<pre><code class="hljs language-elixir">[head | rest] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]\nIO.inspect head <span class="hljs-comment"># 1</span>\nIO.inspect rest <span class="hljs-comment"># [2, 3, 4, 5]</span>\n</code></pre>\n<p>But it&#39;s not just about the first element. We can specify more than just the first item.</p>\n<pre><code class="hljs language-elixir">[first, second | rest] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]\nIO.inspect first <span class="hljs-comment"># 1</span>\nIO.inspect second <span class="hljs-comment"># 2</span>\nIO.inspect rest <span class="hljs-comment"># [2, 3, 4, 5]</span>\n</code></pre>\n<p>Lists are linked lists in Elixir. The last node points to an empty list.</p>\n<pre><code class="hljs language-elixir">[head | rest] = [<span class="hljs-symbol">:a</span>]\nIO.inspect head <span class="hljs-comment"># :a</span>\nIO.inspect rest <span class="hljs-comment"># []</span>\n</code></pre>\n<p>This is why when we get the rest, it is an empty list.</p>\n<h2 id="wrapping-up">Wrapping up</h2>\n<p>Lists have the <code>wrap</code> function to transform values into a list. It wraps the value in a list.</p>\n<pre><code class="hljs language-elixir">List.wrap(<span class="hljs-string">&quot;TK&quot;</span>) <span class="hljs-comment"># [&quot;TK&quot;]</span>\nList.wrap(<span class="hljs-number">1</span>) <span class="hljs-comment"># [1]</span>\nList.wrap(<span class="hljs-literal">true</span>) <span class="hljs-comment"># [true]</span>\nList.wrap(<span class="hljs-symbol">:ola</span>) <span class="hljs-comment"># [:ola]</span>\n</code></pre>\n<p>We can also wrap a list. But it just returns the same list.</p>\n<pre><code class="hljs language-elixir">List.wrap([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) <span class="hljs-comment"># [1, 2, 3]</span>\n</code></pre>\n<p><code>nil</code> is also a value. It represents the absence of a value. When we wrap it, the function returns an empty list.</p>\n<pre><code class="hljs language-elixir">List.wrap(<span class="hljs-literal">nil</span>) <span class="hljs-comment"># []</span>\n</code></pre>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://hexdocs.pm/elixir/Enum.html">Enum module docs</a></li>\n<li><a href="https://www.amazon.com/Learn-Functional-Programming-Elixir-Foundations/dp/168050245X">Learn Functional Programming with Elixir book</a></li>\n</ul>\n',
  },
  {
    title: 'Frontend Challenges: Front-end Engineer Assignment',
    content:
      '<p>This is part of the <a href="/series/frontend-challenges">Frontend Challenges Series</a>.</p>\n<p>Today I finished a frontend challenge and I had a blast working on it. There were so many interesting concepts I debated with myself while designing and implementing the feature, so I was eager to document and share everything I learned through this entire journey.</p>\n<p>The challenge was a <code>Front-end Engineer Assignment</code>. It&#39;s actually a public challenge and you can find it on their GitHub: <strong>Front-end Engineer Assignment</strong>.</p>\n<p>Let&#39;s talk about the challenge:</p>\n<h3 id="technology">Technology</h3>\n<ul>\n<li>The project is setup using React</li>\n<li>They prefer using <a href="/a-mental-model-to-think-in-typescript">TypeScript</a> (or Flow)</li>\n<li>They use EmotionJS as a CSS tool</li>\n</ul>\n<h3 id="ui">UI</h3>\n<p>The idea is to create a Guest and Room Overlay component. The user can open it, add different rooms, select any limited number of adults and children, and select the children&#39;s ages.</p>\n<p><img src="/series/frontend-challenges/findhotel-challenge.png" alt="The findhotel home, the dialog opened, and the dialog with multiple rooms"></p>\n<h3 id="input-rules">Input rules</h3>\n<p>The component should be able to pass a string as the default data. These are the rules:</p>\n<ul>\n<li>Rooms are separated by pipe <code>|</code></li>\n<li>Adults and children are separated by a colon <code>:</code></li>\n<li>Children ages are separated by a comma <code>,</code></li>\n</ul>\n<p>Examples:</p>\n<ul>\n<li>&quot;1:4,6|3&quot; → Two rooms, one with one adult and two children ages four and six and the other with three adults and no children</li>\n<li>&quot;3&quot; → One room with three adults and no children</li>\n<li>&quot;2:4&quot; → One room with two adults and one child aged four</li>\n<li>&quot;1:0,13,16&quot; → One room with one adult and three children (aged zero, thirteen, and sixteen)</li>\n</ul>\n<h3 id="functional-requirements">Functional Requirements</h3>\n<ul>\n<li>Up to eight rooms can be added</li>\n<li>Each room has at least one adult and up to a maximum of five</li>\n<li>Each room has zero or more children up to a maximum of three</li>\n<li>Each child needs to have their age supplied, so we know what kind of bed or cot to provide and what to charge for the room</li>\n<li>Each room has a maximum occupancy of five. This is, adults plus children per room</li>\n<li>The Guest and Room selector should always yield a valid room occupancy, use button disablement to avoid invalid configurations</li>\n<li>A user can either click <code>Search</code> to commit the output to the URL or click the <code>x</code> on top to reset the chosen room selection and revert the UI back to the original state.</li>\n</ul>\n<p>Now, giving this introduction to the challenge, I want to share the topics I will cover in this piece. The main topics are:</p>\n<ul>\n<li><strong>Data Structure &amp; State Management</strong>: in this part, we&#39;ll discuss how to design the UI’s state data structure and manage it throughout the entire component.</li>\n<li><strong>UI &amp; Style</strong>: creating reusable components, handling responsive design with media queries and react-device-detect, and handling animation.</li>\n<li><strong>Unit &amp; Integration tests</strong>: the implementation of the tests to make us confident about the feature. Unit tests will be handled by <a href="/basic-recipes-for-react-testing-library">react-testing-library</a> and Integration tests by Cypress.</li>\n</ul>\n<h2 id="data-structure--state-management">Data Structure &amp; State Management</h2>\n<p>I came up with a data structure to represent this UI and it looks like this:</p>\n<pre><code class="hljs language-tsx">{\n  <span class="hljs-attr">rooms</span>: [\n    {\n      <span class="hljs-attr">adultsCount</span>: &lt;<span class="hljs-built_in">number</span>&gt;,\n      <span class="hljs-attr">children</span>: [\n        {\n          <span class="hljs-attr">age</span>: &lt;<span class="hljs-built_in">number</span>&gt;,\n        },\n      ],\n    },\n  ],\n}\n</code></pre>\n<p>A TypeScript implementation looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Child</span> = {\n  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;\n};\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">Room</span> = {\n  <span class="hljs-attr">adultsCount</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">children</span>: <span class="hljs-title class_">Child</span>[];\n};\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">GuestRooms</span> = {\n  <span class="hljs-attr">rooms</span>: <span class="hljs-title class_">Room</span>[];\n};\n</code></pre>\n<p>And an example would look like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">GuestRooms</span> = {\n  <span class="hljs-attr">rooms</span>: [\n    {\n      <span class="hljs-attr">adultsCount</span>: <span class="hljs-number">2</span>,\n      <span class="hljs-attr">children</span>: [\n        {\n          <span class="hljs-attr">age</span>: <span class="hljs-number">4</span>,\n        },\n      ],\n    },\n    {\n      <span class="hljs-attr">adultsCount</span>: <span class="hljs-number">2</span>,\n      <span class="hljs-attr">children</span>: [\n        {\n          <span class="hljs-attr">age</span>: <span class="hljs-number">4</span>,\n        },\n        {\n          <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,\n        },\n      ],\n    },\n  ],\n};\n</code></pre>\n<p>Now that we have defined the data structure and have a simple implementation of it, we can move to the next part that&#39;s how we use this data and which API we should provide to update this state in different parts of the component.</p>\n<p>Listing all the behaviors makes it easier to understand how we should handle the data and what are the APIs we need to provide for each component to update our data structure.</p>\n<p>I sketched a little drawing with all the behaviors:</p>\n<p><img src="/series/frontend-challenges/guest-rooms-dialog.png" alt="Showing each component&#39;s behavior in the guest rooms dialog"></p>\n<p>Let&#39;s list them here:</p>\n<ul>\n<li><em>Update adults count for room X</em>: <code>updateAdultsCount</code>, which should receive the room index and the new count. The function&#39;s type contract should be:<pre><code class="hljs language-tsx">(<span class="hljs-attr">roomIndex</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span>) =&gt; <span class="hljs-built_in">void</span>\n</code></pre>\n</li>\n<li><em>Update children count for room X</em>: <code>addChild</code>, which should receive the room index and it should add a new child to the children list with the age&#39;s value as 8 (the default age&#39;s value). The function&#39;s type contract should be:<pre><code class="hljs language-tsx">(<span class="hljs-attr">roomIndex</span>: <span class="hljs-built_in">number</span>) =&gt; <span class="hljs-built_in">void</span>\n</code></pre>\n</li>\n<li><em>Remove a child from room X</em>: <code>removeChild</code>, which should receive the room index and the child index. The function&#39;s type contract should be:<pre><code class="hljs language-tsx">(<span class="hljs-attr">roomIndex</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">childIndex</span>: <span class="hljs-built_in">number</span>) =&gt; <span class="hljs-built_in">void</span>\n</code></pre>\n</li>\n<li><em>Remove room X</em>: <code>removeRoom</code>, which should receive the room index. The function&#39;s type contract should be:<pre><code class="hljs language-tsx">(<span class="hljs-attr">roomIndex</span>: <span class="hljs-built_in">number</span>) =&gt; <span class="hljs-built_in">void</span>\n</code></pre>\n</li>\n<li><em>Select a child&#39;s age from room X</em>: <code>updateChild</code>, which should receive the room index, the child index, and the new child age.<pre><code class="hljs language-tsx">(<span class="hljs-attr">roomIndex</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">childIndex</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">childAge</span>: <span class="hljs-built_in">number</span>) =&gt; <span class="hljs-built_in">void</span>\n</code></pre>\n</li>\n<li><em>Add new room section</em>: <code>addRoom</code>, which should just add a new room to the rooms list.<pre><code class="hljs language-tsx">() =&gt; <span class="hljs-built_in">void</span>\n</code></pre>\n</li>\n<li><em>Search with the selected rooms &amp; guests</em>: this function won&#39;t update our data structure, it&#39;ll only receive the data structure, transform it into a string representation and append the result as a query param in the url.</li>\n</ul>\n<p>Nice, we have all the necessary APIs to handle the component&#39;s state. Now let&#39;s start implementing them all.</p>\n<h3 id="context-provider">Context Provider</h3>\n<p>When I started implementing this solution, I didn&#39;t want to use any library or framework to handle the state. I wanted to keep it very simple. I start with a <code>useState</code> hook. But soon some interesting (and common) problems started to arise.</p>\n<p>If we have centralized data, to be able to access it using a <code>useState</code> hook, we need to the state via props to all components. And prop drilling can be a big problem in terms of runtime performance and impacting user experience. Updating the state had the same issue. I needed to pass this update function as a prop for all components.</p>\n<p>The second solution that I came across, as I still didn&#39;t want to use a library for it, was to use the Context API and provide the state&#39;s data structure and function APIs to every component that is wrapped by the context provider. This is the fundamental part of my solution to handle the state.</p>\n<p>The provider will be pretty simple. It should just be a component that wraps our component and provide a value for it.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">GuestRoomsContext</span> = createContext&lt;<span class="hljs-title class_">GuestRoomsValues</span>&gt;(<span class="hljs-literal">undefined</span>);\n\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">GUEST_ROOMS_DEFAULT</span> = {\n  <span class="hljs-attr">rooms</span>: [\n    {\n      <span class="hljs-attr">adultsCount</span>: <span class="hljs-number">2</span>,\n      <span class="hljs-attr">children</span>: [],\n    },\n  ],\n};\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">GuestRoomsProviderPropTypes</span> = {\n  guestRoomsString?: <span class="hljs-built_in">string</span>;\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">GuestRoomsProvider</span>: <span class="hljs-variable constant_">FC</span>&lt;<span class="hljs-title class_">GuestRoomsProviderPropTypes</span>&gt; = <span class="hljs-function">(<span class="hljs-params">{\n  children,\n  guestRoomsString,\n}</span>) =&gt;</span> {\n  <span class="hljs-keyword">const</span> defaultGuestRooms = guestRoomsString\n    ? <span class="hljs-title function_">toGuestRooms</span>(guestRoomsString)\n    : <span class="hljs-variable constant_">GUEST_ROOMS_DEFAULT</span>;\n\n  <span class="hljs-keyword">const</span> [guestRooms, setGuestRooms] = useState&lt;<span class="hljs-title class_">GuestRooms</span>&gt;(defaultGuestRooms);\n\n  <span class="hljs-comment">// ...</span>\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GuestRoomsContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">{providerValue}</span>&gt;</span>\n      {children}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">GuestRoomsContext.Provider</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<p>So it will receive <code>children</code> and a <code>guestRoomsString</code>. Receiving the <code>guestRoomsString</code> enables us to pass a string as the initial state of our data structure. You can see in the <code>GuestRoomsProviderPropTypes</code>, that this prop is optional, so if we don&#39;t pass any string for the provider, it should use the default value <code>GUEST_ROOMS_DEFAULT</code>.</p>\n<p>We also use a simple <code>useState</code> and it should be the source of truth of our data. <code>guestRooms</code> is the state and <code>setGuestRooms</code> is the function API to update the state.</p>\n<p>The <code>GuestRoomsContext</code> is created and exported. We will use this context in our components to access the data and function APIs. And we also use it to create the provider. <code>children</code> is wrapped by this provider and we also see a <code>providerValue</code> that will talk about it soon.</p>\n<p>Before moving to the other implementations, I want to talk a bit about the <code>toGuestRooms</code> function. This is just a transformer, specifically transforming the string format into a <code>GuestRooms</code> data structure.</p>\n<p>Why did I decide to do this? My approach is to have an internal data structure for the component instead of using string as the state type. I think designing a better data structure to represent the state of this UI would help a lot when managing the state. This is how is looks like:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ROOM_SEPARATOR</span> = <span class="hljs-string">&#x27;|&#x27;</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ADULT_CHILDREN_SEPARATOR</span> = <span class="hljs-string">&#x27;:&#x27;</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CHILDREN_SEPARATOR</span> = <span class="hljs-string">&#x27;,&#x27;</span>;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">parseChildren</span>(<span class="hljs-params">children: <span class="hljs-built_in">string</span></span>) {\n  <span class="hljs-keyword">return</span> children\n    .<span class="hljs-title function_">split</span>(<span class="hljs-variable constant_">CHILDREN_SEPARATOR</span>)\n    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">age: <span class="hljs-built_in">string</span></span>) =&gt;</span> ({ <span class="hljs-attr">age</span>: <span class="hljs-title class_">Number</span>(age) }));\n}\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">parseGuestRooms</span>(<span class="hljs-params">guestRooms: GuestRooms, room: <span class="hljs-built_in">string</span></span>) {\n  <span class="hljs-keyword">const</span> [adultsCount, childrenString] = room.<span class="hljs-title function_">split</span>(<span class="hljs-variable constant_">ADULT_CHILDREN_SEPARATOR</span>);\n  <span class="hljs-keyword">const</span> children = childrenString ? <span class="hljs-title function_">parseChildren</span>(childrenString) : [];\n\n  guestRooms.<span class="hljs-property">rooms</span>.<span class="hljs-title function_">push</span>({\n    <span class="hljs-attr">adultsCount</span>: <span class="hljs-title class_">Number</span>(adultsCount),\n    children,\n  });\n\n  <span class="hljs-keyword">return</span> guestRooms;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">toGuestRooms</span>(<span class="hljs-params">guestRooms: <span class="hljs-built_in">string</span></span>) {\n  <span class="hljs-keyword">const</span> rooms = guestRooms.<span class="hljs-title function_">split</span>(<span class="hljs-variable constant_">ROOM_SEPARATOR</span>);\n  <span class="hljs-keyword">const</span> guestRoomsInitialValue = { <span class="hljs-attr">rooms</span>: [] };\n\n  <span class="hljs-keyword">return</span> rooms.<span class="hljs-property">reduce</span>&lt;<span class="hljs-title class_">GuestRooms</span>&gt;(parseGuestRooms, guestRoomsInitialValue);\n}\n</code></pre>\n<p>Using the separators to get each meaningful data and returning the <code>GuestRooms</code> data structure.</p>\n<p>As a pure function, we can easily test it.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;toGuestRooms&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;generates GuestRooms based on &quot;1:4,6|3&quot;&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">toGuestRooms</span>(<span class="hljs-string">&#x27;1:4,6|3&#x27;</span>)).<span class="hljs-title function_">toEqual</span>({\n      <span class="hljs-attr">rooms</span>: [\n        {\n          <span class="hljs-attr">adultsCount</span>: <span class="hljs-number">1</span>,\n          <span class="hljs-attr">children</span>: [\n            {\n              <span class="hljs-attr">age</span>: <span class="hljs-number">4</span>,\n            },\n            {\n              <span class="hljs-attr">age</span>: <span class="hljs-number">6</span>,\n            },\n          ],\n        },\n        {\n          <span class="hljs-attr">adultsCount</span>: <span class="hljs-number">3</span>,\n          <span class="hljs-attr">children</span>: [],\n        },\n      ],\n    });\n  });\n\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;generates GuestRooms based on &quot;3&quot;&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">toGuestRooms</span>(<span class="hljs-string">&#x27;3&#x27;</span>)).<span class="hljs-title function_">toEqual</span>({\n      <span class="hljs-attr">rooms</span>: [\n        {\n          <span class="hljs-attr">adultsCount</span>: <span class="hljs-number">3</span>,\n          <span class="hljs-attr">children</span>: [],\n        },\n      ],\n    });\n  });\n\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;generates GuestRooms based on &quot;2:4&quot;&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">toGuestRooms</span>(<span class="hljs-string">&#x27;2:4&#x27;</span>)).<span class="hljs-title function_">toEqual</span>({\n      <span class="hljs-attr">rooms</span>: [\n        {\n          <span class="hljs-attr">adultsCount</span>: <span class="hljs-number">2</span>,\n          <span class="hljs-attr">children</span>: [\n            {\n              <span class="hljs-attr">age</span>: <span class="hljs-number">4</span>,\n            },\n          ],\n        },\n      ],\n    });\n  });\n\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;generates GuestRooms based on &quot;1:0,13,16&quot;&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">toGuestRooms</span>(<span class="hljs-string">&#x27;1:0,13,16&#x27;</span>)).<span class="hljs-title function_">toEqual</span>({\n      <span class="hljs-attr">rooms</span>: [\n        {\n          <span class="hljs-attr">adultsCount</span>: <span class="hljs-number">1</span>,\n          <span class="hljs-attr">children</span>: [\n            {\n              <span class="hljs-attr">age</span>: <span class="hljs-number">0</span>,\n            },\n            {\n              <span class="hljs-attr">age</span>: <span class="hljs-number">13</span>,\n            },\n            {\n              <span class="hljs-attr">age</span>: <span class="hljs-number">16</span>,\n            },\n          ],\n        },\n      ],\n    });\n  });\n});\n</code></pre>\n<p>...to make sure it works and also gain confidence in the implementation.</p>\n<h3 id="number-input">Number input</h3>\n<p>Let&#39;s now create the <code>NumberInput</code> component as it will be the building block for the adults count input and children count input.</p>\n<p>This component is a very simple one. It should only handle the UI and be able to receive data and functions to trigger when necessary.</p>\n<p>The type contract (or prop types) should be like:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">NumberInputPropTypes</span> = {\n  <span class="hljs-attr">value</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">increaseValue</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;\n  <span class="hljs-attr">decreaseValue</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;\n  <span class="hljs-attr">minValue</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">maxValue</span>: <span class="hljs-built_in">number</span>;\n};\n</code></pre>\n<ul>\n<li><code>value</code>: the value we want to show to the user.</li>\n<li><code>increaseValue</code>: the function to increase the value (meaning adults or children count)</li>\n<li><code>decreaseValue</code>: the function to decrease the value (meaning adults or children count)</li>\n<li><code>minValue</code>: the minimum value accepted by the component. It will be useful to disable the decrease button</li>\n<li><code>maxValue</code>: the maximum value accepted by the component. It will be useful to disable the increase button</li>\n</ul>\n<p>And that&#39;s it.</p>\n<p>There&#39;s a simple logic that I wanted to do to disable (or not) the increase and the decrease buttons.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> isAbleToDecreaseValue = value &gt; minValue;\n<span class="hljs-keyword">const</span> isAbleToIncreaseValue = value &lt; maxValue;\n\n<span class="hljs-keyword">const</span> isDecreaseDisabled = value === minValue;\n<span class="hljs-keyword">const</span> isIncreaseDisabled = value === maxValue;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">decreaseNumber</span> = (<span class="hljs-params"></span>) =&gt; isAbleToDecreaseValue &amp;&amp; <span class="hljs-title function_">decreaseValue</span>();\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">increaseNumber</span> = (<span class="hljs-params"></span>) =&gt; isAbleToIncreaseValue &amp;&amp; <span class="hljs-title function_">increaseValue</span>();\n\n<span class="hljs-keyword">const</span> decreaseButtonVariant = isDecreaseDisabled ? <span class="hljs-string">&#x27;disabled&#x27;</span> : <span class="hljs-string">&#x27;secondary&#x27;</span>;\n<span class="hljs-keyword">const</span> increaseButtonVariant = isIncreaseDisabled ? <span class="hljs-string">&#x27;disabled&#x27;</span> : <span class="hljs-string">&#x27;secondary&#x27;</span>;\n</code></pre>\n<p>I not only wanted to add a <code>disabled</code> variant for the buttons and change the UI but also disable the state update because it&#39;s possible for the user to just disable it via devtools and be able to click the button. Having this second constraint is nice to block this behavior.</p>\n<p>And here&#39;s the UI:</p>\n<pre><code class="hljs language-tsx">&lt;div&gt;\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span>\n    <span class="hljs-attr">disabled</span>=<span class="hljs-string">{isDecreaseDisabled}</span>\n    <span class="hljs-attr">onClick</span>=<span class="hljs-string">{decreaseNumber}</span>\n    <span class="hljs-attr">variant</span>=<span class="hljs-string">{decreaseButtonVariant}</span>\n  &gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">MinusIcon</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span>\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{value}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span>\n    <span class="hljs-attr">disabled</span>=<span class="hljs-string">{isIncreaseDisabled}</span>\n    <span class="hljs-attr">onClick</span>=<span class="hljs-string">{increaseNumber}</span>\n    <span class="hljs-attr">variant</span>=<span class="hljs-string">{increaseButtonVariant}</span>\n  &gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">PlusIcon</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span>\n&lt;/div&gt;\n</code></pre>\n<h3 id="adults-count-input">Adults count input</h3>\n<p>Now that we have this base component, we can build the <code>AdultsCountInput</code> and the <code>ChildrenCountInput</code> on top of that.</p>\n<p>It should be very simple actually.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">AdultsCountInputPropTypes</span> = {\n  <span class="hljs-attr">roomIndex</span>: <span class="hljs-built_in">number</span>;\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">AdultsCountInput</span>: <span class="hljs-variable constant_">FC</span>&lt;<span class="hljs-title class_">AdultsCountInputPropTypes</span>&gt; = <span class="hljs-function">(<span class="hljs-params">{\n  roomIndex,\n}</span>) =&gt;</span> {\n  <span class="hljs-keyword">const</span> { guestRooms, updateAdultsCount } = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GuestRoomsContext</span>);\n  <span class="hljs-keyword">const</span> adultsCount = <span class="hljs-title function_">getAdultsCount</span>(guestRooms, roomIndex);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">increaseValue</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">updateAdultsCount</span>(roomIndex, adultsCount + <span class="hljs-number">1</span>);\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">decreaseValue</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">updateAdultsCount</span>(roomIndex, adultsCount - <span class="hljs-number">1</span>);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NumberInput</span>\n      <span class="hljs-attr">value</span>=<span class="hljs-string">{adultsCount}</span>\n      <span class="hljs-attr">increaseValue</span>=<span class="hljs-string">{increaseValue}</span>\n      <span class="hljs-attr">decreaseValue</span>=<span class="hljs-string">{decreaseValue}</span>\n      <span class="hljs-attr">minValue</span>=<span class="hljs-string">{1}</span>\n      <span class="hljs-attr">maxValue</span>=<span class="hljs-string">{5}</span>\n    /&gt;</span></span>\n  );\n};\n</code></pre>\n<p>The <code>AdultsCountInput</code> component can receive the <code>roomIndex</code> as we need this value to be able to update the correct adults count for a given room.</p>\n<p>We use the <code>useContext</code> passing the <code>GuestRoomsContext</code> to get the <code>guestRooms</code> and the <code>updateAdultsCount</code> (that will be implemented in a sec).</p>\n<p>But I want to focus on the <code>getAdultsCount</code> first. The idea is to just implement a “getter” to, well, get the adults’ count.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getAdultsCount</span>(<span class="hljs-params">guestRooms: GuestRooms, roomIndex: <span class="hljs-built_in">number</span></span>) {\n  <span class="hljs-keyword">return</span> guestRooms.<span class="hljs-property">rooms</span>[roomIndex].<span class="hljs-property">adultsCount</span>;\n}\n</code></pre>\n<p>It&#39;s pretty straightforward. It receives the <code>guestRooms</code> and the <code>roomIndex</code> and it should get the <code>adultsCount</code> from a specific room.</p>\n<p>With that, we can use this value to pass to the <code>NumberInput</code>.</p>\n<p>We can also see the <code>minValue</code> and <code>maxValue</code>:</p>\n<pre><code class="hljs language-tsx">minValue={<span class="hljs-number">1</span>}\nmaxValue={<span class="hljs-number">5</span>}\n</code></pre>\n<p>These are parts of the business rules. For adults, it should have this interval.</p>\n<p>Now let&#39;s talk about <code>updateAdultsCount</code>. As we mentioned earlier, it should have this type definition:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-attr">updateAdultsCount</span>: <span class="hljs-function">(<span class="hljs-params">roomIndex: <span class="hljs-built_in">number</span>, count: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>;\n</code></pre>\n<p>Within the provider, we can access the <code>guestRooms</code> state and the <code>setGuestRooms</code> function to update the state. Receiving the <code>roomIndex</code> and the new adults’ <code>count</code> should be enough to update the state.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateAdultsCount</span>(<span class="hljs-params">roomIndex: <span class="hljs-built_in">number</span>, count: <span class="hljs-built_in">number</span></span>) {\n  guestRooms.<span class="hljs-property">rooms</span>[roomIndex] = {\n    ...guestRooms.<span class="hljs-property">rooms</span>[roomIndex],\n    <span class="hljs-attr">adultsCount</span>: count,\n  };\n\n  <span class="hljs-title function_">setGuestRooms</span>({\n    <span class="hljs-attr">rooms</span>: guestRooms.<span class="hljs-property">rooms</span>,\n  });\n}\n</code></pre>\n<p>And that&#39;s it. We use the spread operator to just update the <code>adultsCount</code> and keep the <code>children</code> value. Pass the updated value to the <code>setGuestRooms</code> and it should update properly.</p>\n<p>Back to the component, we can use this new function:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">increaseValue</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">updateAdultsCount</span>(roomIndex, adultsCount + <span class="hljs-number">1</span>);\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">decreaseValue</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">updateAdultsCount</span>(roomIndex, adultsCount - <span class="hljs-number">1</span>);\n</code></pre>\n<p>The <code>increaseValue</code> should add +1 to the <code>adultsCount</code> and the <code>decreaseValue</code> should add -1 to the <code>adultsCount</code>.</p>\n<h3 id="children-count-input">Children count input</h3>\n<p>The <code>ChildrenCountInput</code> has a similar behavior but the data structure is a bit different. For the adults, the data representation is a number. For children, it&#39;s a list of objects.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ChildrenCountInputPropTypes</span> = {\n  <span class="hljs-attr">roomIndex</span>: <span class="hljs-built_in">number</span>;\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">ChildrenCountInput</span>: <span class="hljs-variable constant_">FC</span>&lt;<span class="hljs-title class_">ChildrenCountInputPropTypes</span>&gt; = <span class="hljs-function">(<span class="hljs-params">{\n  roomIndex,\n}</span>) =&gt;</span> {\n  <span class="hljs-keyword">const</span> { guestRooms, addChild, removeChild } = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GuestRoomsContext</span>);\n  <span class="hljs-keyword">const</span> childrenCount = <span class="hljs-title function_">getChildrenCount</span>(guestRooms, roomIndex);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">increaseValue</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">addChild</span>(roomIndex);\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">decreaseValue</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">removeChild</span>(roomIndex);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NumberInput</span>\n      <span class="hljs-attr">value</span>=<span class="hljs-string">{childrenCount}</span>\n      <span class="hljs-attr">increaseValue</span>=<span class="hljs-string">{increaseValue}</span>\n      <span class="hljs-attr">decreaseValue</span>=<span class="hljs-string">{decreaseValue}</span>\n      <span class="hljs-attr">minValue</span>=<span class="hljs-string">{0}</span>\n      <span class="hljs-attr">maxValue</span>=<span class="hljs-string">{3}</span>\n    /&gt;</span></span>\n  );\n};\n</code></pre>\n<p>The <code>ChildrenCountInput</code> also has a <code>roomIndex</code> prop. It should receive a <code>minValue</code> and a <code>maxValue</code>. As the functional requirements say, the minimum should be 0 and the maximum children&#39;s count should be 3.</p>\n<p>The <code>getChildrenCount</code> is also very similar.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getChildrenCount</span>(<span class="hljs-params">guestRooms: GuestRooms, roomIndex: <span class="hljs-built_in">number</span></span>) {\n  <span class="hljs-keyword">return</span> guestRooms.<span class="hljs-property">rooms</span>[roomIndex].<span class="hljs-property">children</span>.<span class="hljs-property">length</span>;\n}\n</code></pre>\n<p>Get the children&#39;s length from a specific room.</p>\n<p>To increase and decrease the children&#39;s count, we should add a new child or remove the child from the children&#39;s list. Let&#39;s implement the <code>addChild</code> and the <code>removeChild</code> functions.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addChild</span>(<span class="hljs-params">roomIndex: <span class="hljs-built_in">number</span></span>) {\n  <span class="hljs-keyword">const</span> children = guestRooms.<span class="hljs-property">rooms</span>[roomIndex].<span class="hljs-property">children</span>;\n\n  children.<span class="hljs-title function_">push</span>({\n    ...children,\n    <span class="hljs-attr">age</span>: <span class="hljs-number">8</span>,\n  });\n\n  <span class="hljs-title function_">setGuestRooms</span>({\n    <span class="hljs-attr">rooms</span>: guestRooms.<span class="hljs-property">rooms</span>,\n  });\n}\n</code></pre>\n<p>It receives the <code>roomIndex</code>, gets the <code>children</code>’s list, and pushes a new child with the age of 8 (the default age). Then we should just update the <code>guestRooms</code> state.</p>\n<p>The <code>removeChild</code> should work in a similar way but remove a specific child.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeChild</span>(<span class="hljs-params">roomIndex: <span class="hljs-built_in">number</span>, childIndex: <span class="hljs-built_in">number</span> = -<span class="hljs-number">1</span></span>) {\n  <span class="hljs-keyword">const</span> children = guestRooms.<span class="hljs-property">rooms</span>[roomIndex].<span class="hljs-property">children</span>;\n\n  children.<span class="hljs-title function_">splice</span>(childIndex, <span class="hljs-number">1</span>);\n\n  <span class="hljs-title function_">setGuestRooms</span>({\n    <span class="hljs-attr">rooms</span>: guestRooms.<span class="hljs-property">rooms</span>,\n  });\n}\n</code></pre>\n<p>We use <code>splice</code> to remove the child by its index and then update the <code>guestRooms</code> state.</p>\n<p>It receives a <code>childIndex</code> because, in the future, we should use it in our favor to remove a specific child. In this case, we just want to remove the last one. This is why we add a default value as -1, so when calling <code>splice</code>, it removes the last one.</p>\n<h3 id="child-select">Child select</h3>\n<p>The next part is about the <code>ChildSelect</code>. It should show all possible age options and handle the select on change.</p>\n<p>About the options, I just created a <code>ageOptions</code> with a simple array.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> ageOptions = [...<span class="hljs-title class_">Array</span>(<span class="hljs-number">18</span>)];\n</code></pre>\n<p>And we use it to create all options for the select. The entire the <code>ChildSelect</code> component will look like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ChildSelectPropTypes</span> = {\n  <span class="hljs-attr">child</span>: <span class="hljs-title class_">Child</span>;\n  <span class="hljs-attr">roomIndex</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>;\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">ChildSelect</span>: <span class="hljs-variable constant_">FC</span>&lt;<span class="hljs-title class_">ChildSelectPropTypes</span>&gt; = <span class="hljs-function">(<span class="hljs-params">{\n  child,\n  roomIndex,\n  index,\n}</span>) =&gt;</span> {\n  <span class="hljs-keyword">const</span> { updateChild } = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GuestRoomsContext</span>);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">childAgeOnChange</span> =\n    (<span class="hljs-params">childIndex: <span class="hljs-built_in">number</span></span>) =&gt; <span class="hljs-function">(<span class="hljs-params">event: ChangeEvent&lt;HTMLSelectElement&gt;</span>) =&gt;</span> {\n      <span class="hljs-keyword">const</span> childAge = <span class="hljs-title class_">Number</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);\n      <span class="hljs-title function_">updateChild</span>(roomIndex, childIndex, childAge);\n    };\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">{childAgeOnChange(index)}</span> <span class="hljs-attr">value</span>=<span class="hljs-string">{child.age}</span>&gt;</span>\n      {ageOptions.map((_, age) =&gt; (\n        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>\n          <span class="hljs-attr">value</span>=<span class="hljs-string">{age}</span>\n          <span class="hljs-attr">key</span>=<span class="hljs-string">{</span>`${<span class="hljs-attr">roomIndex</span>}<span class="hljs-attr">-child-</span>${<span class="hljs-attr">index</span>}<span class="hljs-attr">-age-option-</span>${<span class="hljs-attr">age</span>}`}\n        &gt;</span>\n          {age ? age : &#x27;&lt;1&#x27;}\n        <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n      ))}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>\n  );\n};</span>\n</code></pre>\n<p>The component receives the <code>child</code> (to get the current age), the <code>roomIndex</code> (to be able to find and update the child in a specific room), and the <code>index</code> (the child&#39;s index to update its age).</p>\n<p>Now we need to implement the <code>updateChild</code> in the provider. This is the type definition:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-attr">updateChild</span>: <span class="hljs-function">(<span class="hljs-params">\n  roomIndex: <span class="hljs-built_in">number</span>,\n  childIndex: <span class="hljs-built_in">number</span>,\n  childAge: <span class="hljs-built_in">number</span>\n</span>) =&gt;</span> <span class="hljs-built_in">void</span>;\n</code></pre>\n<p>And the implementation looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateChild</span>(<span class="hljs-params">roomIndex: <span class="hljs-built_in">number</span>, childIndex: <span class="hljs-built_in">number</span>, childAge: <span class="hljs-built_in">number</span></span>) {\n  <span class="hljs-keyword">const</span> children = guestRooms.<span class="hljs-property">rooms</span>[roomIndex].<span class="hljs-property">children</span>;\n\n  children[childIndex] = {\n    <span class="hljs-attr">age</span>: childAge,\n  };\n\n  guestRooms.<span class="hljs-property">rooms</span>[roomIndex] = {\n    ...guestRooms.<span class="hljs-property">rooms</span>[roomIndex],\n    children,\n  };\n\n  <span class="hljs-title function_">setGuestRooms</span>({\n    <span class="hljs-attr">rooms</span>: guestRooms.<span class="hljs-property">rooms</span>,\n  });\n}\n</code></pre>\n<p>The idea here is to get a specific child from a given room, update this child&#39;s age, and update the <code>guestRooms</code> state.</p>\n<p>This component is used by the <code>ChildrenSelect</code>, where we get all children from a room and iterate through it:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">ChildrenSelect</span> = (<span class="hljs-params">{ roomIndex }: ChildrenSelectPropTypes</span>) =&gt; {\n  <span class="hljs-keyword">const</span> { guestRooms } = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GuestRoomsContext</span>);\n  <span class="hljs-keyword">const</span> chidren = <span class="hljs-title function_">getChildren</span>(guestRooms, roomIndex);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{childrenSelectWrapper}</span>&gt;</span>\n      {chidren.map((child, index) =&gt; (\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>\n          <span class="hljs-attr">className</span>=<span class="hljs-string">{childAgeSelectWrapper}</span>\n          <span class="hljs-attr">key</span>=<span class="hljs-string">{</span>`${<span class="hljs-attr">roomIndex</span>}<span class="hljs-attr">-child-</span>${<span class="hljs-attr">index</span>}`}\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Child {index + 1} age<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{selectWrapperStyle}</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">ChildSelect</span> <span class="hljs-attr">child</span>=<span class="hljs-string">{child}</span> <span class="hljs-attr">roomIndex</span>=<span class="hljs-string">{roomIndex}</span> <span class="hljs-attr">index</span>=<span class="hljs-string">{index}</span> /&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">CloseButton</span> <span class="hljs-attr">roomIndex</span>=<span class="hljs-string">{roomIndex}</span> <span class="hljs-attr">index</span>=<span class="hljs-string">{index}</span> /&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      ))}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<p>Here are just iterating through the <code>children</code>. To get the <code>children</code>, we need to implement a simple getter.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getChildren</span>(<span class="hljs-params">guestRooms: GuestRooms, roomIndex: <span class="hljs-built_in">number</span></span>) {\n  <span class="hljs-keyword">return</span> guestRooms.<span class="hljs-property">rooms</span>[roomIndex].<span class="hljs-property">children</span>;\n}\n</code></pre>\n<h3 id="remove-child">Remove child</h3>\n<p>Now that we can add a new child and update its age, we need to be able to remove it with the close button.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">CloseButtonPropTypes</span> = {\n  <span class="hljs-attr">roomIndex</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>;\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">CloseButton</span>: <span class="hljs-variable constant_">FC</span>&lt;<span class="hljs-title class_">CloseButtonPropTypes</span>&gt; = <span class="hljs-function">(<span class="hljs-params">{ roomIndex, index }</span>) =&gt;</span> {\n  <span class="hljs-keyword">const</span> { removeChild } = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GuestRoomsContext</span>);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">removeOnClick</span> = (<span class="hljs-params">childIndex: <span class="hljs-built_in">number</span></span>) =&gt; <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">removeChild</span>(roomIndex, childIndex);\n  };\n\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;danger&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{removeOnClick(index)}</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">CloseIcon</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<p>It&#39;s actually a very simple implementation. We need a button and a way to handle the button&#39;s <code>onClick</code> event. Remember when I said that we could use the <code>removeChild</code> in other places too? This is the case for this component. To remove it, we&#39;ll use the <code>removeChild</code> function we already implemented but now passing the <code>childIndex</code> for it, so we can remove a specific child from a room.</p>\n<p>And that&#39;s it!</p>\n<h3 id="add-room">Add room</h3>\n<p>Adding a new room is also very simple. We need a button and the <code>addRoom</code> function that will update the rooms list by pushing a new room with the default value to it.</p>\n<pre><code class="hljs language-tsx">&lt;<span class="hljs-title class_">Button</span> variant=<span class="hljs-string">&quot;secondary&quot;</span> onClick={addRoom} fullWidth&gt;\n  + <span class="hljs-title class_">Add</span> room\n&lt;/<span class="hljs-title class_">Button</span>&gt;\n</code></pre>\n<p>And the <code>addRoom</code> implementation looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addRoom</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-title function_">setGuestRooms</span>({\n    <span class="hljs-attr">rooms</span>: [\n      ...guestRooms.<span class="hljs-property">rooms</span>,\n      {\n        <span class="hljs-attr">adultsCount</span>: <span class="hljs-number">2</span>,\n        <span class="hljs-attr">children</span>: [],\n      },\n    ],\n  });\n}\n</code></pre>\n<p>We keep the current rooms and add a new room two adults and no children.</p>\n<h3 id="remove-room">Remove room</h3>\n<p>To remove a room, we need a button and the room&#39;s index.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> { removeRoom } = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GuestRoomsContext</span>);\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">removeRoomOnClick</span> = (<span class="hljs-params">roomIndex: <span class="hljs-built_in">number</span></span>) =&gt; <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">removeRoom</span>(roomIndex);\n};\n\n<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;danger&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{removeRoomOnClick(index)}</span>&gt;</span>\n  Remove room\n<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span>;\n</code></pre>\n<p>We have the button and the <code>removeRoomOnClick</code>. Now we should implement the <code>removeRoom</code> function:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeRoom</span>(<span class="hljs-params">roomIndex: <span class="hljs-built_in">number</span></span>) {\n  guestRooms.<span class="hljs-property">rooms</span>.<span class="hljs-title function_">splice</span>(roomIndex, <span class="hljs-number">1</span>);\n\n  <span class="hljs-title function_">setGuestRooms</span>({\n    <span class="hljs-attr">rooms</span>: guestRooms.<span class="hljs-property">rooms</span>,\n  });\n}\n</code></pre>\n<p>Here we use the same concept we used to remove children from the children&#39;s list. Using splice with a specific <code>roomIndex</code> and then updating the <code>guestRooms</code> state.</p>\n<h3 id="search-button">Search button</h3>\n<p>To handle the search button, I needed to enable users (engineers) to pass a callback function to the main component and pass it down to the search button component to call it when the user clicks the button. This way, we enable engineers to do whatever they want with the current state.</p>\n<p>In the case of this challenge, we are required to get the state data structure, transform it into the string format and attach it to the url.</p>\n<p>To do this transformation, we can create a simple function to handle this part:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ROOM_SEPARATOR</span> = <span class="hljs-string">&#x27;|&#x27;</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ADULT_CHILDREN_SEPARATOR</span> = <span class="hljs-string">&#x27;:&#x27;</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CHILDREN_SEPARATOR</span> = <span class="hljs-string">&#x27;,&#x27;</span>;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">toChildrenAgesString</span>(<span class="hljs-params">children: Child[]</span>) {\n  <span class="hljs-keyword">return</span> children.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">{ age }</span>) =&gt;</span> age).<span class="hljs-title function_">join</span>(<span class="hljs-variable constant_">CHILDREN_SEPARATOR</span>);\n}\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">toAdultsAndChildrenAgesString</span>(<span class="hljs-params">{ adultsCount, children }: Room</span>) {\n  <span class="hljs-keyword">const</span> childrenAges = <span class="hljs-title function_">toChildrenAgesString</span>(children);\n\n  <span class="hljs-keyword">return</span> childrenAges\n    ? adultsCount + <span class="hljs-variable constant_">ADULT_CHILDREN_SEPARATOR</span> + childrenAges\n    : adultsCount;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">toGuestRoomsString</span>(<span class="hljs-params">guestRooms: GuestRooms</span>) {\n  <span class="hljs-keyword">return</span> guestRooms.<span class="hljs-property">rooms</span>\n    .<span class="hljs-title function_">map</span>(toAdultsAndChildrenAgesString)\n    .<span class="hljs-title function_">join</span>(<span class="hljs-variable constant_">ROOM_SEPARATOR</span>);\n}\n</code></pre>\n<p>A <code>toGuestRoomsString</code> to transform the <code>GuestRooms</code> data structure into a string. We use the separators to construct it. To “prove” it works, we can add some tests and gain more confidence.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;toGuestRoomsString&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;generates &quot;1:4,6|3&quot;&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">expect</span>(\n      <span class="hljs-title function_">toGuestRoomsString</span>({\n        <span class="hljs-attr">rooms</span>: [\n          {\n            <span class="hljs-attr">adultsCount</span>: <span class="hljs-number">1</span>,\n            <span class="hljs-attr">children</span>: [\n              {\n                <span class="hljs-attr">age</span>: <span class="hljs-number">4</span>,\n              },\n              {\n                <span class="hljs-attr">age</span>: <span class="hljs-number">6</span>,\n              },\n            ],\n          },\n          {\n            <span class="hljs-attr">adultsCount</span>: <span class="hljs-number">3</span>,\n            <span class="hljs-attr">children</span>: [],\n          },\n        ],\n      }),\n    ).<span class="hljs-title function_">toEqual</span>(<span class="hljs-string">&#x27;1:4,6|3&#x27;</span>);\n  });\n\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;generates &quot;3&quot;&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">expect</span>(\n      <span class="hljs-title function_">toGuestRoomsString</span>({\n        <span class="hljs-attr">rooms</span>: [\n          {\n            <span class="hljs-attr">adultsCount</span>: <span class="hljs-number">3</span>,\n            <span class="hljs-attr">children</span>: [],\n          },\n        ],\n      }),\n    ).<span class="hljs-title function_">toEqual</span>(<span class="hljs-string">&#x27;3&#x27;</span>);\n  });\n\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;generates &quot;2:4&quot;&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">expect</span>(\n      <span class="hljs-title function_">toGuestRoomsString</span>({\n        <span class="hljs-attr">rooms</span>: [\n          {\n            <span class="hljs-attr">adultsCount</span>: <span class="hljs-number">2</span>,\n            <span class="hljs-attr">children</span>: [\n              {\n                <span class="hljs-attr">age</span>: <span class="hljs-number">4</span>,\n              },\n            ],\n          },\n        ],\n      }),\n    ).<span class="hljs-title function_">toEqual</span>(<span class="hljs-string">&#x27;2:4&#x27;</span>);\n  });\n\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;generates &quot;1:0,13,16&quot;&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">expect</span>(\n      <span class="hljs-title function_">toGuestRoomsString</span>({\n        <span class="hljs-attr">rooms</span>: [\n          {\n            <span class="hljs-attr">adultsCount</span>: <span class="hljs-number">1</span>,\n            <span class="hljs-attr">children</span>: [\n              {\n                <span class="hljs-attr">age</span>: <span class="hljs-number">0</span>,\n              },\n              {\n                <span class="hljs-attr">age</span>: <span class="hljs-number">13</span>,\n              },\n              {\n                <span class="hljs-attr">age</span>: <span class="hljs-number">16</span>,\n              },\n            ],\n          },\n        ],\n      }),\n    ).<span class="hljs-title function_">toEqual</span>(<span class="hljs-string">&#x27;1:0,13,16&#x27;</span>);\n  });\n});\n</code></pre>\n<p>That&#39;s it! Now we are able to transform it into the string format before attaching it to the URL. To the function and call the callback with the result of it, I created a search function:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">guestRooms: GuestRooms, callback: OnSearchFunction</span>) {\n  <span class="hljs-keyword">const</span> guestRoomsString = <span class="hljs-title function_">toGuestRoomsString</span>(guestRooms);\n\n  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span>\n    <span class="hljs-title function_">callback</span>(\n      { <span class="hljs-attr">guestRooms</span>: guestRoomsString },\n      <span class="hljs-string">`?guestRooms=<span class="hljs-subst">${guestRoomsString}</span>`</span>,\n    );\n}\n</code></pre>\n<p>This way, we just need to implement a possible callback for it. As I&#39;m not using any library or framework for this, we can use the History API.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">State</span> = <span class="hljs-built_in">any</span>;\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">Url</span> = <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">PushStateSignature</span> = <span class="hljs-function">(<span class="hljs-params">state: State, url?: Url</span>) =&gt;</span> <span class="hljs-built_in">void</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">pushState</span>: <span class="hljs-title class_">PushStateSignature</span> = <span class="hljs-function">(<span class="hljs-params">state, url</span>) =&gt;</span> {\n  <span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">pushState</span>(state, <span class="hljs-string">&#x27;&#x27;</span>, url);\n};\n</code></pre>\n<p>It expects the state and the URL. Passing the <code>pushState</code> as a callback for the <code>search</code> function and we are able to append the guest rooms string as a query param.</p>\n<h2 id="ui--style">UI &amp; Style</h2>\n<p>Building a lot of different React apps, ones with pure React others with NextJS, made me experience different approaches to CSS styles. Even though it&#39;s simple to use inline CSS on React components, I didn&#39;t really like the experience as it lacks a lot of “features” like pseudo-classes, selectors.</p>\n<p>So in this challenge, I was open to learning and applying a new CSS tool. I’ve heard about emotion-js before but never really tried. This is a tool the company uses, so I started taking a look at the docs and it surprised me. It seemed very simple, just CSS styles that you could attach to components. It&#39;s like the old days when you just write pure CSS but now with the power of making it modular.</p>\n<p>I didn&#39;t want to use styled components, so I just installed <code>@emotion/css</code>.</p>\n<pre><code class="hljs language-bash">npm i @emotion/css\n</code></pre>\n<h3 id="button">Button</h3>\n<p>The first component I wanted to focus on was the <code>&lt;Button&gt;</code>. I wanted to make a component that I could reuse for the entire application. With a “type”, I could change the entire style of a component, so what I built was a <code>variant</code> and this it looks like:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ButtonVariants</span> = <span class="hljs-string">&#x27;primary&#x27;</span> | <span class="hljs-string">&#x27;secondary&#x27;</span> | <span class="hljs-string">&#x27;disabled&#x27;</span> | <span class="hljs-string">&#x27;danger&#x27;</span> | <span class="hljs-string">&#x27;close&#x27;</span>;\n</code></pre>\n<p>And now we are able to use this as the prop type:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ButtonPropTypes</span> = {\n  variant?: <span class="hljs-title class_">ButtonVariants</span>;\n};\n</code></pre>\n<p>If the users (engineers using this component) are also using TypeScript, it requires they use one of these variants in compile time. This is a beautiful use of TypeScript with React.</p>\n<p>With this variant, we can style anything. I used the idea of an object that matches a variant with its style. The first is the cursor:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Cursor</span> = {\n  <span class="hljs-attr">primary</span>: <span class="hljs-string">&#x27;pointer&#x27;</span>,\n  <span class="hljs-attr">secondary</span>: <span class="hljs-string">&#x27;pointer&#x27;</span>,\n  <span class="hljs-attr">disabled</span>: <span class="hljs-string">&#x27;not-allowed&#x27;</span>,\n  <span class="hljs-attr">danger</span>: <span class="hljs-string">&#x27;pointer&#x27;</span>,\n  <span class="hljs-attr">close</span>: <span class="hljs-string">&#x27;pointer&#x27;</span>,\n};\n</code></pre>\n<p>And the usage is simple:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-attr">cursor</span>: ${<span class="hljs-title class_">Cursor</span>[variant]};\n</code></pre>\n<p>We would do the same thing for all other styles:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Colors</span> = {\n  <span class="hljs-attr">primary</span>: <span class="hljs-string">&#x27;white&#x27;</span>,\n  <span class="hljs-attr">secondary</span>: <span class="hljs-string">&#x27;#0071f3&#x27;</span>,\n  <span class="hljs-attr">disabled</span>: <span class="hljs-string">&#x27;#6a7886&#x27;</span>,\n  <span class="hljs-attr">danger</span>: <span class="hljs-string">&#x27;#d83b3b&#x27;</span>,\n  <span class="hljs-attr">close</span>: <span class="hljs-string">&#x27;#6a7886&#x27;</span>,\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">BackgroundColors</span> = {\n  <span class="hljs-attr">primary</span>: <span class="hljs-string">&#x27;#0071f3&#x27;</span>,\n  <span class="hljs-attr">secondary</span>: <span class="hljs-string">&#x27;#f7fbff&#x27;</span>,\n  <span class="hljs-attr">disabled</span>: <span class="hljs-string">&#x27;#eff2F6&#x27;</span>,\n  <span class="hljs-attr">danger</span>: <span class="hljs-string">&#x27;rgba(255, 255, 255, 0)&#x27;</span>,\n  <span class="hljs-attr">close</span>: <span class="hljs-string">&#x27;rgba(255, 255, 255, 0)&#x27;</span>,\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">BackgroundColorsHover</span> = {\n  <span class="hljs-attr">primary</span>: <span class="hljs-string">&#x27;#0064d8&#x27;</span>,\n  <span class="hljs-attr">secondary</span>: <span class="hljs-string">&#x27;#e4f0fe&#x27;</span>,\n  <span class="hljs-attr">disabled</span>: <span class="hljs-string">&#x27;#eff2F6&#x27;</span>,\n  <span class="hljs-attr">danger</span>: <span class="hljs-string">&#x27;rgba(255, 255, 255, 0)&#x27;</span>,\n  <span class="hljs-attr">close</span>: <span class="hljs-string">&#x27;rgba(255, 255, 255, 0)&#x27;</span>,\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">BoxShadow</span> = {\n  <span class="hljs-attr">primary</span>: <span class="hljs-string">&#x27;none&#x27;</span>,\n  <span class="hljs-attr">secondary</span>: <span class="hljs-string">&#x27;#bfdaf9 0px 0px 0px 1px inset&#x27;</span>,\n  <span class="hljs-attr">disabled</span>: <span class="hljs-string">&#x27;none&#x27;</span>,\n  <span class="hljs-attr">danger</span>: <span class="hljs-string">&#x27;none&#x27;</span>,\n  <span class="hljs-attr">close</span>: <span class="hljs-string">&#x27;none&#x27;</span>,\n};\n</code></pre>\n<p>The usage is similar to the cursor:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-attr">color</span>: ${<span class="hljs-title class_">Colors</span>[variant]};\nbackground-<span class="hljs-attr">color</span>: ${<span class="hljs-title class_">BackgroundColors</span>[variant]};\nbox-<span class="hljs-attr">shadow</span>: ${<span class="hljs-title class_">BoxShadow</span>[variant]};\n\n&amp;:hover {\n  background-<span class="hljs-attr">color</span>: ${<span class="hljs-title class_">BackgroundColorsHover</span>[variant]};\n}\n</code></pre>\n<p>In this component, I also enable it to receive these props: <code>disabled</code>, <code>onClick</code>, <code>dataTestid</code>, and <code>children</code>.</p>\n<pre><code class="hljs language-tsx">&lt;button\n  disabled={disabled}\n  onClick={onClick}\n  data-testid={dataTestid}\n    ...\n&gt;\n    {children}\n&lt;/button&gt;\n</code></pre>\n<p>I also saw the need to be able to customize the styles if the user wants. For example, the component has a default padding spacing. But the user could need a different spacing for padding, so we can add a <code>className</code> prop as well and add it to the <code>css</code> like this:</p>\n<pre><code class="hljs language-tsx">className={css`<span class="language-css">\n    ...\n    </span><span class="hljs-subst">${className}</span><span class="language-css">\n`</span>}\n</code></pre>\n<p>It&#39;s actually a lot of power we give to the user. The option was to have an object for the padding and margin, and any other property we want to match with the button&#39;s variant.</p>\n<p>The last part of this component is the prop <code>fullWidth</code>. The name says everything. If enabling this prop, the button will have a full width, if not it will have an auto width.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-attr">width</span>: ${fullWidth ? <span class="hljs-string">&#x27;100%&#x27;</span> : <span class="hljs-string">&#x27;auto&#x27;</span>};\n</code></pre>\n<p>The prop types look like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ButtonVariants</span> = <span class="hljs-string">&#x27;primary&#x27;</span> | <span class="hljs-string">&#x27;secondary&#x27;</span> | <span class="hljs-string">&#x27;disabled&#x27;</span> | <span class="hljs-string">&#x27;danger&#x27;</span> | <span class="hljs-string">&#x27;close&#x27;</span>;\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">ButtonPropTypes</span> = {\n  disabled?: <span class="hljs-built_in">boolean</span>;\n  <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;\n  variant?: <span class="hljs-title class_">ButtonVariants</span>;\n  className?: <span class="hljs-built_in">string</span>;\n  fullWidth?: <span class="hljs-built_in">boolean</span>;\n  dataTestid?: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<p>And the whole component has these props, types, and styles.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">Button</span>: <span class="hljs-variable constant_">FC</span>&lt;<span class="hljs-title class_">ButtonPropTypes</span>&gt; = <span class="hljs-function">(<span class="hljs-params">{\n  children,\n  disabled = <span class="hljs-literal">false</span>,\n  onClick,\n  variant = <span class="hljs-string">&#x27;primary&#x27;</span>,\n  className,\n  fullWidth = <span class="hljs-literal">false</span>,\n  dataTestid,\n}</span>) =&gt;</span> (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>\n    <span class="hljs-attr">disabled</span>=<span class="hljs-string">{disabled}</span>\n    <span class="hljs-attr">onClick</span>=<span class="hljs-string">{onClick}</span>\n    <span class="hljs-attr">data-testid</span>=<span class="hljs-string">{dataTestid}</span>\n    <span class="hljs-attr">className</span>=<span class="hljs-string">{css</span>`\n      <span class="hljs-attr">display:</span> <span class="hljs-attr">inline-flex</span>;\n      <span class="hljs-attr">border:</span> <span class="hljs-attr">0px</span>;\n      <span class="hljs-attr">border-radius:</span> <span class="hljs-attr">6px</span>;\n      <span class="hljs-attr">margin:</span> <span class="hljs-attr">0px</span>;\n      <span class="hljs-attr">cursor:</span> ${<span class="hljs-attr">Cursor</span>[<span class="hljs-attr">variant</span>]};\n      <span class="hljs-attr">align-items:</span> <span class="hljs-attr">center</span>;\n      <span class="hljs-attr">justify-content:</span> <span class="hljs-attr">center</span>;\n      <span class="hljs-attr">text-align:</span> <span class="hljs-attr">center</span>;\n      <span class="hljs-attr">vertical-align:</span> <span class="hljs-attr">middle</span>;\n      <span class="hljs-attr">position:</span> <span class="hljs-attr">relative</span>;\n      <span class="hljs-attr">text-decoration:</span> <span class="hljs-attr">none</span>;\n      <span class="hljs-attr">font-size:</span> <span class="hljs-attr">16px</span>;\n      <span class="hljs-attr">font-weight:</span> <span class="hljs-attr">600</span>;\n      <span class="hljs-attr">padding:</span> <span class="hljs-attr">16px</span> <span class="hljs-attr">32px</span>;\n      <span class="hljs-attr">color:</span> ${<span class="hljs-attr">Colors</span>[<span class="hljs-attr">variant</span>]};\n      <span class="hljs-attr">background-color:</span> ${<span class="hljs-attr">BackgroundColors</span>[<span class="hljs-attr">variant</span>]};\n      <span class="hljs-attr">box-shadow:</span> ${<span class="hljs-attr">BoxShadow</span>[<span class="hljs-attr">variant</span>]};\n\n      <span class="hljs-attr">width:</span> ${<span class="hljs-attr">fullWidth</span> ? &#x27;<span class="hljs-attr">100</span>%&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">auto</span>&#x27;};\n\n      &amp;<span class="hljs-attr">:hover</span> {\n        <span class="hljs-attr">background-color:</span> ${<span class="hljs-attr">BackgroundColorsHover</span>[<span class="hljs-attr">variant</span>]};\n      }\n\n      ${<span class="hljs-attr">className</span>}\n    `}\n  &gt;</span>\n    {children}\n  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>\n);\n</code></pre>\n<h3 id="animation">Animation</h3>\n<p>To make sure we have an effect when opening the overlay component in the mobile view, we will use <code>keyframes</code> and <code>animation</code>.</p>\n<div style="margin: auto; text-align: center;">\n  <video controls="true" allowfullscreen="true" >\n    <source src="/series/frontend-challenges/dialog-transition.mov" type="video/mp4">\n  </video>\n</div>\n\n<p>The code looks very simple for this transition.</p>\n<p>The <code>keyframes</code> is imported from the <code>emotion</code> library, we create an animation name to go from top 100% to top 0, and set the duration for this transition.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> { css, keyframes } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@emotion/css&#x27;</span>;\n\n<span class="hljs-keyword">const</span> overlayFade = keyframes<span class="hljs-string">`\n  from {\n    top: 100%;\n  }\n  to {\n    top: 0;\n  }\n`</span>;\n\n<span class="hljs-keyword">const</span> modelStyle = css`<span class="language-css">\n  // ...\n  <span class="hljs-attribute">animation-name</span>: </span><span class="hljs-subst">${overlayFade}</span><span class="language-css">;\n  <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">0.3s</span>;\n  // ...\n`</span>;\n</code></pre>\n<p>Simple as that.</p>\n<h3 id="responsive-design">Responsive design</h3>\n<p>To handle responsive design, I focused on mobile-first, and additional adjustments for desktop.</p>\n<p>To be able to change a style for specific screen size, we can use media queries. Using <code>emotion-js</code> looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> style = css`<span class="language-css">\n  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span>;\n\n  <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">576px</span>) {\n    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;\n  }\n`</span>;\n</code></pre>\n<p>For mobile view, it won&#39;t have a <code>border-radius</code>, but all screens with a minimum size of <code>576px</code> will have a <code>border-radius</code> of <code>6px</code>.</p>\n<p>To make it more consistent across all components and remove the need to write the correct media query, I created a <code>mediaQuery</code> object with all the possibilities.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Breakpoints</span> = <span class="hljs-string">&#x27;xs&#x27;</span> | <span class="hljs-string">&#x27;sm&#x27;</span> | <span class="hljs-string">&#x27;md&#x27;</span> | <span class="hljs-string">&#x27;lg&#x27;</span> | <span class="hljs-string">&#x27;xl&#x27;</span>;\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">MediaQuery</span> = <span class="hljs-title class_">Record</span>&lt;<span class="hljs-title class_">Breakpoints</span>, <span class="hljs-built_in">string</span>&gt;;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">mediaQuery</span>: <span class="hljs-title class_">MediaQuery</span> = {\n  <span class="hljs-attr">xs</span>: <span class="hljs-string">&#x27;@media (max-width: 576px)&#x27;</span>,\n  <span class="hljs-attr">sm</span>: <span class="hljs-string">&#x27;@media (min-width: 576px)&#x27;</span>,\n  <span class="hljs-attr">md</span>: <span class="hljs-string">&#x27;@media (min-width: 768px)&#x27;</span>,\n  <span class="hljs-attr">lg</span>: <span class="hljs-string">&#x27;@media (min-width: 992px)&#x27;</span>,\n  <span class="hljs-attr">xl</span>: <span class="hljs-string">&#x27;@media (min-width: 1200px)&#x27;</span>,\n};\n</code></pre>\n<p>Now we can use our object without the need to understand the implementation details about each query. Refactoring the style CSS code above, we get something like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> style = css`<span class="language-css">\n  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span>;\n\n  </span><span class="hljs-subst">${mediaQuery[<span class="hljs-string">&#x27;sm&#x27;</span>]}</span><span class="language-css"> {\n    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;\n  }\n`</span>;\n</code></pre>\n<p>Now we can reuse this <code>mediaQuery</code> code in all components that need to handle different views.</p>\n<p>I also created a simple unit test for it:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;mediaQuery&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;returns the correct media query for each breakpoint&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">expect</span>(mediaQuery[<span class="hljs-string">&#x27;xs&#x27;</span>]).<span class="hljs-title function_">toEqual</span>(<span class="hljs-string">&#x27;@media (max-width: 576px)&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(mediaQuery[<span class="hljs-string">&#x27;sm&#x27;</span>]).<span class="hljs-title function_">toEqual</span>(<span class="hljs-string">&#x27;@media (min-width: 576px)&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(mediaQuery[<span class="hljs-string">&#x27;md&#x27;</span>]).<span class="hljs-title function_">toEqual</span>(<span class="hljs-string">&#x27;@media (min-width: 768px)&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(mediaQuery[<span class="hljs-string">&#x27;lg&#x27;</span>]).<span class="hljs-title function_">toEqual</span>(<span class="hljs-string">&#x27;@media (min-width: 992px)&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(mediaQuery[<span class="hljs-string">&#x27;xl&#x27;</span>]).<span class="hljs-title function_">toEqual</span>(<span class="hljs-string">&#x27;@media (min-width: 1200px)&#x27;</span>);\n  });\n});\n</code></pre>\n<p>I also needed to handle different HTML elements and styles for desktop vs. mobile views. This is why I used a library called <code>react-device-detect</code>.</p>\n<p>In this case, our desktop modal should not only have a modal component but also a backdrop-overlay side by side. If the user clicks the overlay, it should close the modal.</p>\n<p>In the mobile view, it doesn&#39;t have this overlay component. It should just open a dialog.</p>\n<p>The desktop dialog:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">DialogBrowserView</span>: <span class="hljs-variable constant_">FC</span>&lt;<span class="hljs-title class_">DialogBrowserViewPropTypes</span>&gt; = <span class="hljs-function">(<span class="hljs-params">{\n  guestRoomsString,\n  onClose,\n  onSearch,\n}</span>) =&gt;</span> (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">BrowserView</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{dialogStyle}</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{onClose}</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{backdropStyle}</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Dialog</span>\n        <span class="hljs-attr">guestRoomsString</span>=<span class="hljs-string">{guestRoomsString}</span>\n        <span class="hljs-attr">onClose</span>=<span class="hljs-string">{onClose}</span>\n        <span class="hljs-attr">onSearch</span>=<span class="hljs-string">{onSearch}</span>\n      /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserView</span>&gt;</span></span>\n);\n</code></pre>\n<p>And the mobile dialog:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">DialogMobileView</span>: <span class="hljs-variable constant_">FC</span>&lt;<span class="hljs-title class_">DialogMobileViewPropTypes</span>&gt; = <span class="hljs-function">(<span class="hljs-params">{\n  guestRoomsString,\n  onClose,\n  onSearch,\n}</span>) =&gt;</span> (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MobileView</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Dialog</span>\n      <span class="hljs-attr">guestRoomsString</span>=<span class="hljs-string">{guestRoomsString}</span>\n      <span class="hljs-attr">onClose</span>=<span class="hljs-string">{onClose}</span>\n      <span class="hljs-attr">onSearch</span>=<span class="hljs-string">{onSearch}</span>\n    /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">MobileView</span>&gt;</span></span>\n);\n</code></pre>\n<p>And use them:</p>\n<pre><code class="hljs language-tsx">&lt;<span class="hljs-title class_">DialogBrowserView</span>\n  guestRoomsString={guestRoomsString}\n  onClose={onClose}\n  onSearch={onSearch}\n/&gt;\n<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">DialogMobileView</span>\n  <span class="hljs-attr">guestRoomsString</span>=<span class="hljs-string">{guestRoomsString}</span>\n  <span class="hljs-attr">onClose</span>=<span class="hljs-string">{onClose}</span>\n  <span class="hljs-attr">onSearch</span>=<span class="hljs-string">{onSearch}</span>\n/&gt;</span></span>\n</code></pre>\n<p>We could also replace <code>react-device-detect</code> with media queries.</p>\n<h3 id="code-splitting">Code splitting</h3>\n<p>An additional thing that I did was to code split the dialog. Create a chunk for the mobile dialog and another chunk for the desktop dialog.</p>\n<p>That way the application won&#39;t need to load the mobile dialog code in the desktop view and vice versa.</p>\n<p>To do this, I used a library called Loadable Components.</p>\n<p>I just needed to do this for the mobile dialog</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> loadable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@loadable/component&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">loadable</span>(\n  <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;DialogMobileView&quot; */</span> <span class="hljs-string">&#x27;./DialogMobileView&#x27;</span>),\n);\n</code></pre>\n<p>And this for the desktop view</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> loadable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@loadable/component&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">loadable</span>(\n  <span class="hljs-function">() =&gt;</span>\n    <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;DialogBrowserView&quot; */</span> <span class="hljs-string">&#x27;./DialogBrowserView&#x27;</span>),\n);\n</code></pre>\n<p>And now the application doesn&#39;t need to load unnecessary JavaScript code for each screen size.</p>\n<h2 id="unit--integration-tests">Unit &amp; Integration Tests</h2>\n<h3 id="unit-tests">Unit tests</h3>\n<p>To verify that all variants are working with the correct styles, I created a test for each variant.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Button&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;primary variant&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;verifies correct styles for primary button&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{noop}</span>&gt;</span>{text}<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span>);\n\n      <span class="hljs-keyword">const</span> buttonText = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-regexp">/Text/i</span>);\n\n      <span class="hljs-title function_">expect</span>(buttonText).<span class="hljs-title function_">toBeInTheDocument</span>();\n      <span class="hljs-title function_">expect</span>(buttonText).<span class="hljs-title function_">toHaveStyle</span>(<span class="hljs-string">&#x27;cursor: pointer&#x27;</span>);\n      <span class="hljs-title function_">expect</span>(buttonText).<span class="hljs-title function_">toHaveStyle</span>(<span class="hljs-string">&#x27;color: white&#x27;</span>);\n      <span class="hljs-title function_">expect</span>(buttonText).<span class="hljs-title function_">toHaveStyle</span>(<span class="hljs-string">&#x27;background-color: #0071f3&#x27;</span>);\n      <span class="hljs-title function_">expect</span>(buttonText).<span class="hljs-title function_">toHaveStyle</span>(<span class="hljs-string">&#x27;box-shadow: none&#x27;</span>);\n    });\n  });\n});\n</code></pre>\n<p>We can use the <code>toHaveStyle</code> API to verify each CSS property. I wanted to test if the button is rendered and these four properties: cursor, color, background-color, and box-shadow.</p>\n<p>And I also have a similar test for all other variants: <code>secondary</code>, <code>disabled</code>, <code>danger</code>, and <code>close</code>.</p>\n<p>For the header, I added a very simple unit test to verify the header text and if the close button triggers everything correctly.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> noop = jest.<span class="hljs-title function_">fn</span>();\n\n<span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Header&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the header text&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">onClose</span>=<span class="hljs-string">{noop}</span> /&gt;</span></span>);\n\n    <span class="hljs-keyword">const</span> headerText = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-regexp">/Rooms &amp; Guests/i</span>);\n    <span class="hljs-title function_">expect</span>(headerText).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;triggers the onClose after clicking the close button&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">onClose</span>=<span class="hljs-string">{noop}</span> /&gt;</span></span>);\n\n    <span class="hljs-keyword">const</span> onCloseButton = screen.<span class="hljs-title function_">getByRole</span>(<span class="hljs-string">&#x27;button&#x27;</span>);\n    userEvent.<span class="hljs-title function_">click</span>(onCloseButton);\n    <span class="hljs-title function_">expect</span>(noop).<span class="hljs-title function_">toBeCalled</span>();\n  });\n});\n</code></pre>\n<p>For the header text, it&#39;s a nice test, but mocking the <code>onClose</code> function is not ideal. I will test it properly in an integration test where we simulate how the user interacts with the dialog and close it.</p>\n<p>The test for the <code>AdultsCountInput</code> is very interesting as we can test it the way an user would use it.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;AdultsCountInput&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;increases and decreases count by clicking buttons&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">render</span>(\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GuestRoomsProvider</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">AdultsCountInput</span> <span class="hljs-attr">roomIndex</span>=<span class="hljs-string">{0}</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">GuestRoomsProvider</span>&gt;</span></span>,\n    );\n\n    <span class="hljs-keyword">const</span> count = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;2&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(count).<span class="hljs-title function_">toBeInTheDocument</span>();\n\n    <span class="hljs-keyword">const</span> minusButton = screen.<span class="hljs-title function_">getAllByRole</span>(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">0</span>];\n    userEvent.<span class="hljs-title function_">click</span>(minusButton);\n    <span class="hljs-keyword">const</span> decreasedCount = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;1&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(decreasedCount).<span class="hljs-title function_">toBeInTheDocument</span>();\n\n    <span class="hljs-keyword">const</span> plusButton = screen.<span class="hljs-title function_">getAllByRole</span>(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">1</span>];\n    userEvent.<span class="hljs-title function_">click</span>(plusButton);\n    userEvent.<span class="hljs-title function_">click</span>(plusButton);\n    <span class="hljs-keyword">const</span> increasedCount = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;3&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(increasedCount).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<ul>\n<li>We start with rendering the component</li>\n<li>Verify if the current count&#39;s value is correct</li>\n<li>Click the button to decrease the count and verify if it actually decreases it</li>\n<li>Click the button to increase the count twice and verify the current count&#39;s value</li>\n</ul>\n<p>We can have a lot of confidence in this test as it simulates how a user would use it.</p>\n<p>The test for the <code>ChildrenCountInput</code> works the same way:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;ChildrenCountInput&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;increases and decreases count by clicking buttons&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">render</span>(\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GuestRoomsProvider</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">ChildrenCountInput</span> <span class="hljs-attr">roomIndex</span>=<span class="hljs-string">{0}</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">GuestRoomsProvider</span>&gt;</span></span>,\n    );\n\n    <span class="hljs-keyword">const</span> count = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;0&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(count).<span class="hljs-title function_">toBeInTheDocument</span>();\n\n    <span class="hljs-keyword">const</span> plusButton = screen.<span class="hljs-title function_">getAllByRole</span>(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">1</span>];\n    userEvent.<span class="hljs-title function_">click</span>(plusButton);\n    userEvent.<span class="hljs-title function_">click</span>(plusButton);\n    <span class="hljs-keyword">const</span> increasedCount = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;2&#x27;</span>);\n\n    <span class="hljs-title function_">expect</span>(increasedCount).<span class="hljs-title function_">toBeInTheDocument</span>();\n    <span class="hljs-keyword">const</span> minusButton = screen.<span class="hljs-title function_">getAllByRole</span>(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">0</span>];\n    userEvent.<span class="hljs-title function_">click</span>(minusButton);\n    <span class="hljs-keyword">const</span> decreasedCount = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;1&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(decreasedCount).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<p>The select component is also very interesting. The experience using <code>userEvent</code> is smooth and does what it intends to do.</p>\n<p>But first, let&#39;s just add a test to verify the <code>ChildrenSelect</code> doesn&#39;t render any select because the current state doesn&#39;t have any children.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;ChildrenSelect&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&quot;does not render a child selector when there&#x27;s no child&quot;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">render</span>(\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GuestRoomsProvider</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">ChildrenSelect</span> <span class="hljs-attr">roomIndex</span>=<span class="hljs-string">{0}</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">GuestRoomsProvider</span>&gt;</span></span>,\n    );\n\n    <span class="hljs-keyword">const</span> selectLabel = screen.<span class="hljs-title function_">queryByText</span>(<span class="hljs-string">&#x27;Child 1 age&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(selectLabel).<span class="hljs-property">not</span>.<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<p>Now we can create a test to interact with the select and choose different age options.</p>\n<p>First I created a helper function to get the first option from the select element.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFirstOption</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) {\n  <span class="hljs-keyword">return</span> screen.<span class="hljs-title function_">getAllByRole</span>(<span class="hljs-string">&#x27;option&#x27;</span>, {\n    name,\n  })[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLOptionElement</span>;\n}\n</code></pre>\n<p>And now I can use it to verify the rendered selects and interact with each one of them.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;ChildrenSelect&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;selects new option and verify selected item&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">render</span>(\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GuestRoomsProvider</span> <span class="hljs-attr">guestRoomsString</span>=<span class="hljs-string">&quot;1:4,6&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">ChildrenSelect</span> <span class="hljs-attr">roomIndex</span>=<span class="hljs-string">{0}</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">GuestRoomsProvider</span>&gt;</span></span>,\n    );\n\n    <span class="hljs-keyword">const</span> selectLabel1 = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;Child 1 age&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(selectLabel1).<span class="hljs-title function_">toBeInTheDocument</span>();\n\n    <span class="hljs-keyword">const</span> selectLabel2 = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;Child 2 age&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(selectLabel2).<span class="hljs-title function_">toBeInTheDocument</span>();\n\n    <span class="hljs-keyword">const</span> selectLabel3 = screen.<span class="hljs-title function_">queryByText</span>(<span class="hljs-string">&#x27;Child 3 age&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(selectLabel3).<span class="hljs-property">not</span>.<span class="hljs-title function_">toBeInTheDocument</span>();\n\n    <span class="hljs-keyword">const</span> select = screen.<span class="hljs-title function_">getAllByRole</span>(<span class="hljs-string">&#x27;combobox&#x27;</span>)[<span class="hljs-number">0</span>];\n    <span class="hljs-keyword">const</span> selectedOption = <span class="hljs-title function_">getFirstOption</span>(<span class="hljs-string">&#x27;4&#x27;</span>);\n    <span class="hljs-title function_">expect</span>(selectedOption.<span class="hljs-property">selected</span>).<span class="hljs-title function_">toBeTruthy</span>();\n\n    <span class="hljs-keyword">const</span> newSelectedOption = <span class="hljs-title function_">getFirstOption</span>(<span class="hljs-string">&#x27;3&#x27;</span>);\n    userEvent.<span class="hljs-title function_">selectOptions</span>(select, newSelectedOption);\n    <span class="hljs-title function_">expect</span>(selectedOption.<span class="hljs-property">selected</span>).<span class="hljs-title function_">toBeFalsy</span>();\n    <span class="hljs-title function_">expect</span>(newSelectedOption.<span class="hljs-property">selected</span>).<span class="hljs-title function_">toBeTruthy</span>();\n  });\n});\n</code></pre>\n<p><em>Context</em>: “1:4,6” means</p>\n<ul>\n<li>1 adult</li>\n<li>2 children: one with age 4 and the other with age 6.</li>\n</ul>\n<p>We test a lot of things here:</p>\n<ul>\n<li>Verify that child 1 and child 2 are rendered</li>\n<li>Make sure that child 3 is not rendered</li>\n<li>Verify if the selected option is the age 4</li>\n<li>Select a new option (age 3)</li>\n<li>Verify that the option age 4 is no more the selected one and now the selected option is age 3</li>\n</ul>\n<p>For the <code>NumberInput</code> component, the test is pretty straightforward. Just render it and make sure the correct number is rendered.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;NumberInput&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the value between buttons&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> <span class="hljs-title function_">noop</span> = (<span class="hljs-params"></span>) =&gt; {};\n\n    <span class="hljs-title function_">render</span>(\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GuestRoomsProvider</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">NumberInput</span>\n          <span class="hljs-attr">value</span>=<span class="hljs-string">{3}</span>\n          <span class="hljs-attr">increaseValue</span>=<span class="hljs-string">{noop}</span>\n          <span class="hljs-attr">decreaseValue</span>=<span class="hljs-string">{noop}</span>\n          <span class="hljs-attr">minValue</span>=<span class="hljs-string">{1}</span>\n          <span class="hljs-attr">maxValue</span>=<span class="hljs-string">{5}</span>\n        /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">GuestRoomsProvider</span>&gt;</span></span>,\n    );\n\n    <span class="hljs-title function_">expect</span>(screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-string">&#x27;3&#x27;</span>)).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<p>The test for the <code>SearchButton</code> is also similar to the test above as we just want to make sure we are rendering the correct component with the right value.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;SearchButton&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;renders the button&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">render</span>(\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GuestRoomsProvider</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">SearchButton</span> <span class="hljs-attr">onSearch</span>=<span class="hljs-string">{()</span> =&gt;</span> {}} /&gt;\n      <span class="hljs-tag">&lt;/<span class="hljs-name">GuestRoomsProvider</span>&gt;</span></span>,\n    );\n\n    <span class="hljs-keyword">const</span> button = screen.<span class="hljs-title function_">getByRole</span>(<span class="hljs-string">&#x27;button&#x27;</span>, {\n      <span class="hljs-attr">name</span>: <span class="hljs-regexp">/Search 1 room • 2 guests/i</span>,\n    });\n\n    <span class="hljs-title function_">expect</span>(button).<span class="hljs-title function_">toBeInTheDocument</span>();\n  });\n});\n</code></pre>\n<p>I also created a test for the <code>GuestRooms</code> component but it is very similar to the integration test I created later on. I will cover this test in the next section.</p>\n<h3 id="integration-tests">Integration tests</h3>\n<p>To gain even more confidence in the feature, I created an integration test using Cypress.</p>\n<p>First, created a function to test the query params in the URL:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyQueryParams</span>(<span class="hljs-params">queryParams</span>) {\n  cy.<span class="hljs-title function_">location</span>().<span class="hljs-title function_">should</span>(<span class="hljs-function">(<span class="hljs-params">location</span>) =&gt;</span> {\n    <span class="hljs-title function_">expect</span>(location.<span class="hljs-property">search</span>).<span class="hljs-property">to</span>.<span class="hljs-title function_">eq</span>(queryParams);\n  });\n}\n</code></pre>\n<p>Also created a function to click the search button and provide the <code>verifyQueryParams</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">clickSearchButtonWithText</span>(<span class="hljs-params">text</span>) {\n  cy.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">contains</span>(text).<span class="hljs-title function_">click</span>();\n\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">andVerifyQueryParams</span>: verifyQueryParams,\n  };\n}\n</code></pre>\n<p>This way we can use it like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">clickSearchButtonWithText</span>(<span class="hljs-string">&#x27;Search 1 room • 2 guests&#x27;</span>).<span class="hljs-title function_">andVerifyQueryParams</span>(\n  <span class="hljs-string">&#x27;?guestRooms=2&#x27;</span>,\n);\n</code></pre>\n<p>Then I created a function to handle the test for the adults’ count selection:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">selectAdultsCount</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">const</span> adultsBlock = <span class="hljs-string">&#x27;div[data-testid=&quot;adults-count-input-block&quot;]&#x27;</span>;\n\n  cy.<span class="hljs-title function_">get</span>(adultsBlock).<span class="hljs-title function_">within</span>(<span class="hljs-function">() =&gt;</span> {\n    cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;2&#x27;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;exist&#x27;</span>);\n\n    <span class="hljs-keyword">const</span> adultsMinusButton = cy.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;button[data-testid=&quot;minus-button&quot;]&#x27;</span>);\n\n    adultsMinusButton.<span class="hljs-title function_">click</span>();\n    adultsMinusButton.<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;be.disabled&#x27;</span>);\n    cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;1&#x27;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;exist&#x27;</span>);\n\n    <span class="hljs-keyword">const</span> adultsPlusButton = cy\n      .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;button[data-testid=&quot;plus-button&quot;]&#x27;</span>)\n      .<span class="hljs-title function_">first</span>();\n\n    adultsPlusButton.<span class="hljs-title function_">click</span>();\n    adultsPlusButton.<span class="hljs-title function_">click</span>();\n    adultsPlusButton.<span class="hljs-title function_">click</span>();\n    cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;4&#x27;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;exist&#x27;</span>);\n  });\n}\n</code></pre>\n<ul>\n<li>Verify the count is 2</li>\n<li>Click the decrease button and verify the button is now disabled because it&#39;s the minimum number of adults and verify that 1 is rendered as the count</li>\n<li>Then click the increase button 3 times and verify the current&#39;s count is 4</li>\n</ul>\n<p>Now we need to create a function to test the children&#39;s count selection and their ages.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">selectChildrenCountAndAges</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">const</span> childrenBlock = <span class="hljs-string">&#x27;div[data-testid=&quot;children-count-input-block&quot;]&#x27;</span>;\n\n  cy.<span class="hljs-title function_">get</span>(childrenBlock).<span class="hljs-title function_">within</span>(<span class="hljs-function">() =&gt;</span> {\n    cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;0&#x27;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;exist&#x27;</span>);\n\n    <span class="hljs-keyword">const</span> childrenMinusButton = cy.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;button[data-testid=&quot;minus-button&quot;]&#x27;</span>);\n\n    childrenMinusButton.<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;be.disabled&#x27;</span>);\n    cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;0&#x27;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;exist&#x27;</span>);\n\n    <span class="hljs-keyword">const</span> childrenPlusButton = cy\n      .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;button[data-testid=&quot;plus-button&quot;]&#x27;</span>)\n      .<span class="hljs-title function_">first</span>();\n\n    childrenPlusButton.<span class="hljs-title function_">click</span>();\n    childrenPlusButton.<span class="hljs-title function_">click</span>();\n    childrenPlusButton.<span class="hljs-title function_">click</span>();\n    cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;3&#x27;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;exist&#x27;</span>);\n\n    cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;Child 1 age&#x27;</span>);\n    cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;Child 2 age&#x27;</span>);\n    cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;Child 3 age&#x27;</span>);\n\n    cy.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;button[data-testid=&quot;close-button-1&quot;]&#x27;</span>).<span class="hljs-title function_">click</span>();\n    cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;Child 3 age&#x27;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;not.exist&#x27;</span>);\n\n    cy.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;select&#x27;</span>).<span class="hljs-title function_">first</span>().<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;3&#x27;</span>);\n  });\n}\n</code></pre>\n<ul>\n<li>Verify it starts with the count 0 and the decrease button should be disabled</li>\n<li>Click the increase button 3 times and it should add three age selects for each child&#39;s age</li>\n<li>Click the close button for the third child and verify if it is not there anymore</li>\n<li>Select the age for the first child</li>\n</ul>\n<p>Now that we have all the building blocks, we can use them to create a complete test for the dialog.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyGuestRoomsBehavior</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">const</span> openDialogButton = cy.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;button&#x27;</span>);\n  openDialogButton.<span class="hljs-title function_">click</span>();\n\n  <span class="hljs-title function_">clickSearchButtonWithText</span>(<span class="hljs-string">&#x27;Search 1 room • 2 guests&#x27;</span>).<span class="hljs-title function_">andVerifyQueryParams</span>(\n    <span class="hljs-string">&#x27;?guestRooms=2&#x27;</span>,\n  );\n\n  <span class="hljs-keyword">const</span> firstRoom = <span class="hljs-string">&#x27;div[data-testid=&quot;room-key-0&quot;]&#x27;</span>;\n\n  cy.<span class="hljs-title function_">get</span>(firstRoom).<span class="hljs-title function_">within</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">selectAdultsCount</span>();\n    <span class="hljs-title function_">selectChildrenCountAndAges</span>();\n  });\n\n  <span class="hljs-title function_">clickSearchButtonWithText</span>(<span class="hljs-string">&#x27;Search 1 room • 6 guests&#x27;</span>).<span class="hljs-title function_">andVerifyQueryParams</span>(\n    <span class="hljs-string">&#x27;?guestRooms=4:3,8&#x27;</span>,\n  );\n\n  cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;Room 2&#x27;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;not.exist&#x27;</span>);\n  cy.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;+ Add room&#x27;</span>).<span class="hljs-title function_">click</span>();\n  cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;Room 2&#x27;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;exist&#x27;</span>);\n\n  <span class="hljs-keyword">const</span> secondRoom = <span class="hljs-string">&#x27;div[data-testid=&quot;room-key-1&quot;]&#x27;</span>;\n\n  cy.<span class="hljs-title function_">get</span>(secondRoom).<span class="hljs-title function_">within</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">selectAdultsCount</span>();\n    <span class="hljs-title function_">selectChildrenCountAndAges</span>();\n  });\n\n  <span class="hljs-title function_">clickSearchButtonWithText</span>(<span class="hljs-string">&#x27;Search 2 rooms • 12 guests&#x27;</span>).<span class="hljs-title function_">andVerifyQueryParams</span>(\n    <span class="hljs-string">&#x27;?guestRooms=4:3,8|4:3,8&#x27;</span>,\n  );\n\n  cy.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;Remove room&#x27;</span>).<span class="hljs-title function_">click</span>();\n  cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;Room 2&#x27;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;not.exist&#x27;</span>);\n\n  <span class="hljs-title function_">clickSearchButtonWithText</span>(<span class="hljs-string">&#x27;Search 1 room • 6 guests&#x27;</span>).<span class="hljs-title function_">andVerifyQueryParams</span>(\n    <span class="hljs-string">&#x27;?guestRooms=4:3,8&#x27;</span>,\n  );\n}\n</code></pre>\n<ul>\n<li>Click the button to open the dialog</li>\n<li>Click the search button and verify the expected query param in the URL</li>\n<li>In the first room, select adults count and the children&#39;s count and ages</li>\n<li>Click the search button again and verify the correct query param</li>\n<li>Add a second room and add adults and children to it. Verify the query param again</li>\n<li>Remove the second room, verify it is not there anymore, click the search button and verify the expected query param</li>\n</ul>\n<p>I also created a function to handle the dialog close button and verify its behavior.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyCloseButtonBehavior</span>(<span class="hljs-params"></span>) {\n  cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;Rooms &amp; Guests&#x27;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;exist&#x27;</span>);\n  cy.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;button[data-testid=&quot;dialog-close-button&quot;]&#x27;</span>).<span class="hljs-title function_">click</span>();\n  cy.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;Rooms &amp; Guests&#x27;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;not.exist&#x27;</span>);\n}\n</code></pre>\n<p>Everything together looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;verifies guest rooms dialog behavior&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">verifyGuestRoomsBehavior</span>();\n  <span class="hljs-title function_">verifyCloseButtonBehavior</span>();\n});\n</code></pre>\n<p>But this is a test for the desktop. I also wanted to test it works fine for the mobile view. The idea is very similar, but add a different viewport and then test it.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;on iPhone X&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;verifies guest rooms dialog behavior&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    cy.<span class="hljs-title function_">viewport</span>(<span class="hljs-string">&#x27;iphone-x&#x27;</span>);\n    <span class="hljs-title function_">verifyGuestRoomsBehavior</span>();\n    <span class="hljs-title function_">verifyCloseButtonBehavior</span>();\n  });\n});\n</code></pre>\n<p>Everything together looks like this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;GuestRoomsDialog&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">() =&gt;</span> {\n    cy.<span class="hljs-title function_">visit</span>(<span class="hljs-string">&#x27;/&#x27;</span>);\n  });\n\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;on iPhone X&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;verifies guest rooms dialog behavior&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      cy.<span class="hljs-title function_">viewport</span>(<span class="hljs-string">&#x27;iphone-x&#x27;</span>);\n      <span class="hljs-title function_">verifyGuestRoomsBehavior</span>();\n      <span class="hljs-title function_">verifyCloseButtonBehavior</span>();\n    });\n  });\n\n  <span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;on desktop&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;verifies guest rooms dialog behavior&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-title function_">verifyGuestRoomsBehavior</span>();\n      <span class="hljs-title function_">verifyCloseButtonBehavior</span>();\n    });\n  });\n});\n</code></pre>\n<p>Let&#39;s see a preview of the integration test in action?</p>\n<div style="margin: auto; text-align: center;">\n  <video controls="true" allowfullscreen="true" class="full-width">\n    <source src="/series/frontend-challenges/dialog-integration-test-cypress.mov" type="video/mp4">\n  </video>\n</div>\n\n<h2 id="thats-it">That&#39;s it!</h2>\n<p>This is the first article from this series I&#39;m working on: <code>Frontend Challenges</code>. I want to challenge myself in different challenges in the frontend domain and see what I can learn from it. Every challenge will be documented and shared with you all.</p>\n<p>I hope you liked this post and feel free to steal some ideas for the projects and products you are building.</p>\n<p>See ya!</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://github.com/imteekay/frontend-challenges">Frontend Challenges</a></li>\n<li><a href="/a-mental-model-to-think-in-typescript">A Mental Model to think in TypeScript</a></li>\n<li><a href="/basic-recipes-for-react-testing-library">Basic Recipes for React Testing Library</a></li>\n<li><a href="/react-hooks-context-api-and-pokemons">React Hooks, Context API, and Pokemons</a></li>\n</ul>\n<h3 id="react">React</h3>\n<ul>\n<li><a href="https://www.educative.io/path/become-a-react-developer?aff=x8bV">Become a React Developer</a></li>\n<li><a href="https://www.educative.io/path/react-development-for-professionals?aff=x8bV">React Development for Professionals</a></li>\n<li><a href="https://www.educative.io/path/react-app-testing?aff=x8bV">React App Testing</a></li>\n<li><a href="https://www.educative.io/path/react-front-end-developer?aff=x8bV">React for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/react-beginner-to-advanced?aff=x8bV">React Deep Dive: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/test-driven-react-development?aff=x8bV">Test-driven Development with React</a></li>\n<li><a href="https://www.educative.io/courses/the-road-to-learn-react?aff=x8bV">The Road to learn React</a></li>\n<li><a href="https://www.educative.io/courses/reintroducing-react-v16-beyond?aff=x8bV">Reintroducing React: V16 and Beyond</a></li>\n<li><a href="https://www.educative.io/courses/advanced-react-patterns-with-hooks?aff=x8bV">Advanced React Patterns With Hooks</a></li>\n<li><a href="https://reactforbeginners.com/friend/LEANDRO">React for Beginners Course</a></li>\n<li><a href="https://advancedreact.com/friend/LEANDRO">Advanced React Course</a></li>\n</ul>\n<h3 id="typescript">TypeScript</h3>\n<ul>\n<li><a href="https://www.educative.io/path/typescript-for-front-end-developers?aff=x8bV">TypeScript for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/using-typescript-with-react?aff=x8bV">Using TypeScript with React</a></li>\n<li><a href="https://www.educative.io/courses/learn-typescript-complete-course?aff=x8bV">Learn TypeScript: The Complete Course for Beginners</a></li>\n<li><a href="https://www.educative.io/courses/advanced-typescript-masterclass?aff=x8bV">Advanced TypeScript Masterclass</a></li>\n</ul>\n<h3 id="javascript">JavaScript</h3>\n<ul>\n<li><a href="https://www.educative.io/courses/javascript-in-detail-from-beginner-to-advanced?aff=x8bV">JavaScript in Detail: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/simplifying-javascript-handy-guide?aff=x8bV">Simplifying JavaScript: A Handy Guide for Software Engineers</a></li>\n<li><a href="https://www.educative.io/courses/complete-guide-to-modern-javascript?aff=x8bV">The Complete Guide to Modern JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/learn-object-oriented-programming-in-javascript?aff=x8bV">Learn Object-Oriented Programming in JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/javascript-in-practice-es6-and-beyond?aff=x8bV">JavaScript In Practice: ES6 And Beyond</a></li>\n<li><a href="https://www.educative.io/courses/data-structures-coding-interviews-javascript?aff=x8bV">Data Structures for Coding Interviews in JavaScript</a></li>\n<li><a href="https://mbsy.co/lFtbC">JavaScript Course by OneMonth</a></li>\n<li><a href="https://es6.io/friend/LEANDRO">ES6 Course</a></li>\n<li><a href="https://beginnerjavascript.com/friend/LEANDRO">Beginner JavaScript Course</a></li>\n<li><a href="https://www.educative.io/courses/javascript-fundamentals-before-learning-react?aff=x8bV">JavaScript Fundamentals Before Learning React</a></li>\n<li><a href="https://www.educative.io/courses/rediscovering-javascript?aff=x8bV">Rediscovering JavaScript: ES6, ES7 &amp; ES8</a></li>\n</ul>\n',
  },
  {
    title: 'Destructuring Arrays and Objects in JavaScript',
    content:
      '<p>This post is part of the <a href="/series/mastering-javascript">Mastering JavaScript Series</a>.</p>\n<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">destructuring assignment</a> is a very versatile tool. This technique can be used for both objects and arrays. We will take a closer look on both data structures.</p>\n<h2 id="named-parameters">Named parameters</h2>\n<p>We can create named parameters for functions with two or more parameters. This way we don&#39;t have to deal with ordering problems, the function API is better exposed and it is easier to track down errors caused by missing parameters.</p>\n<p>We can refactor this code:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">hello</span> = (<span class="hljs-params">name, country</span>) =&gt; <span class="hljs-string">`Hi, I&#x27;m <span class="hljs-subst">${name}</span> from <span class="hljs-subst">${country}</span>`</span>;\n\n<span class="hljs-title function_">hello</span>(<span class="hljs-string">&#x27;Brazil&#x27;</span>, <span class="hljs-string">&#x27;TK&#x27;</span>); <span class="hljs-comment">// &#x27;Hi, I&#x27;m Brazil from TK&#x27;</span>\n</code></pre>\n<p>Into a function that receives only one object with all the necessary parameters and use object destructuring to get all the parameters:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">hello</span> = (<span class="hljs-params">{ name, country }</span>) =&gt; <span class="hljs-string">`Hi, I&#x27;m <span class="hljs-subst">${name}</span> from <span class="hljs-subst">${country}</span>`</span>;\n\n<span class="hljs-title function_">hello</span>({ <span class="hljs-attr">country</span>: <span class="hljs-string">&#x27;Brazil&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span> }); <span class="hljs-comment">// &#x27;Hi, I&#x27;m TK from Brazil&#x27;</span>\n</code></pre>\n<p>You can even set default values!</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">hello</span> = (<span class="hljs-params">{ name = <span class="hljs-string">&#x27;TK&#x27;</span>, country = <span class="hljs-string">&#x27;Brazil&#x27;</span> } = {}</span>) =&gt;\n  <span class="hljs-string">`Hi, I&#x27;m <span class="hljs-subst">${name}</span> from <span class="hljs-subst">${country}</span>`</span>;\n\n<span class="hljs-title function_">hello</span>(); <span class="hljs-comment">// &#x27;Hi, I&#x27;m TK from Brazil&#x27;</span>\n</code></pre>\n<h2 id="accessing-object-attributes">Accessing object attributes</h2>\n<p>Another way we can use the object destructuring is to access the object fields. This makes the code simpler, creating a copy of the targeted field into a variable/constant.</p>\n<p>From this:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> person = { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-attr">country</span>: <span class="hljs-string">&#x27;Brazil&#x27;</span> };\n<span class="hljs-keyword">const</span> name = person.<span class="hljs-property">name</span>;\n<span class="hljs-keyword">const</span> country = person.<span class="hljs-property">country</span>;\n</code></pre>\n<p>To this:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> person = { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-attr">country</span>: <span class="hljs-string">&#x27;Brazil&#x27;</span> };\n<span class="hljs-keyword">const</span> { name, country } = person;\n</code></pre>\n<p>You can use default values here too. For example:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> person = { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-attr">country</span>: <span class="hljs-string">&#x27;Brazil&#x27;</span> };\n<span class="hljs-keyword">const</span> { name, country, age = <span class="hljs-number">23</span> } = person;\n\nname; <span class="hljs-comment">// &#x27;TK&#x27;</span>\ncountry; <span class="hljs-comment">// &#x27;Brazil&#x27;</span>\nage; <span class="hljs-comment">// 23</span>\n</code></pre>\n<p>The age is not part of the <code>person</code> but it has a default value when the object is destructured.</p>\n<h2 id="accessing-array-elements">Accessing array elements</h2>\n<p>The destructuring feature also works for the array data structure. But instead using the <code>{}</code> notation, we use the <code>[]</code> to access elements from the array.</p>\n<p>Instead of accessing the array elements by an index:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> person = [<span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-number">23</span>];\n<span class="hljs-keyword">const</span> name = person[<span class="hljs-number">0</span>];\n<span class="hljs-keyword">const</span> age = person[<span class="hljs-number">1</span>];\n</code></pre>\n<p>We use array destructuring:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> person = [<span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-number">23</span>];\n<span class="hljs-keyword">const</span> [name, age] = person;\n</code></pre>\n<p>Also, in frontend/react applications, it is very common to destructure the array that is returned from a React Hook. For example the <code>useState</code> hook. It&#39;s a function that returns an array of a state and its setter:</p>\n<p>Here, it works the same way. Instead of accessing by an index:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">import</span> { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n\n<span class="hljs-keyword">const</span> defaultPerson = { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">23</span> };\n\n<span class="hljs-keyword">const</span> state = <span class="hljs-title function_">useState</span>(defaultPerson);\n<span class="hljs-keyword">const</span> person = state[<span class="hljs-number">0</span>];\n<span class="hljs-keyword">const</span> setPerson = state[<span class="hljs-number">1</span>];\n</code></pre>\n<p>We destructure the array:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">import</span> { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n\n<span class="hljs-keyword">const</span> defaultPerson = { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">23</span> };\n\n<span class="hljs-keyword">const</span> [person, setPerson] = <span class="hljs-title function_">useState</span>(defaultPerson);\n</code></pre>\n<p>Just like objects, we can also set a default value for array destructuring:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> person = [<span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-number">23</span>];\n<span class="hljs-keyword">const</span> [name, age, lastName = <span class="hljs-string">&#x27;Kinoshita&#x27;</span>] = person;\n\nname; <span class="hljs-comment">// &#x27;TK&#x27;</span>\nage; <span class="hljs-comment">// 23</span>\nlastName; <span class="hljs-comment">// &#x27;Kinoshita&#x27;</span>\n</code></pre>\n<h2 id="swapping-values">Swapping values</h2>\n<p>It is also useful if you need to swap values between two variables.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">let</span> name1 = <span class="hljs-string">&#x27;TK&#x27;</span>;\n<span class="hljs-keyword">let</span> name2 = <span class="hljs-string">&#x27;Kazumi&#x27;</span>;\n\nname1; <span class="hljs-comment">// &#x27;TK&#x27;</span>\nname2; <span class="hljs-comment">// &#x27;Kazumi&#x27;</span>\n\n[name1, name2] = [name2, name1];\n\nname1; <span class="hljs-comment">// &#x27;Kazumi&#x27;</span>\nname2; <span class="hljs-comment">// &#x27;TK&#x27;</span>\n</code></pre>\n<h2 id="ignoring-values">Ignoring values</h2>\n<p>We saw how we can use destructuring to get attributes from an object or elements from an array. But what if we want to ignore any attribute or element?</p>\n<p>In an object, it&#39;s pretty straightforward. We just need to not destructure with the attribute we don&#39;t want or need.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> person = { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-attr">country</span>: <span class="hljs-string">&#x27;Brazil&#x27;</span> };\n<span class="hljs-keyword">const</span> { name } = person;\n</code></pre>\n<p>We just ignore the <code>country</code> attribute.</p>\n<p>But for arrays, we need to understand that they are linear data structure with sequential access, meaning that the sequence matters.</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> person = [<span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-string">&#x27;Brazil&#x27;</span>, <span class="hljs-number">23</span>];\n<span class="hljs-keyword">const</span> [name, , age] = person;\n\nname; <span class="hljs-comment">// &#x27;TK&#x27;;</span>\nage; <span class="hljs-comment">// 23</span>\n</code></pre>\n<p>If we want to ignore the <code>&#39;Brazil&#39;</code> value but still want the <code>age</code> element, we can skip it by using an empty space between commas.</p>\n<h2 id="assigning-rest">Assigning rest</h2>\n<p>But what if we don&#39;t want to ignore it. We care about one of the values and also want to keep an eye on the other ones. In this next example we care about the <code>name</code> attribute and we want to keep an eye on the rest of the other attributes:</p>\n<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> person = { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span>, <span class="hljs-attr">country</span>: <span class="hljs-string">&#x27;Brazil&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">23</span> };\n<span class="hljs-keyword">const</span> { name, ...rest } = person;\n\nname; <span class="hljs-comment">// &#x27;TK&#x27;</span>\nrest; <span class="hljs-comment">// { country: &#x27;Brazil&#x27;, age: 23 }</span>\n</code></pre>\n<p>You can see the <code>rest</code> still holds all the other attributes that were not destructured.</p>\n<p>This <code>...</code> is called <code>Spread operator</code> and the <code>...rest</code> is commonly called <code>Rest parameters</code>.</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://github.com/imteekay/master-javascript">Master JavaScript repo</a></li>\n<li><a href="/series/mastering-javascript">Master JavaScript Series</a></li>\n<li><a href="https://www.educative.io/courses/javascript-in-detail-from-beginner-to-advanced?aff=x8bV">JavaScript in Detail: From Beginner to Advanced</a></li>\n<li><a href="https://www.educative.io/courses/complete-guide-to-modern-javascript?aff=x8bV">The Complete Guide to Modern JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/rediscovering-javascript?aff=x8bV">Rediscovering JavaScript: ES6, ES7 &amp; ES8</a></li>\n</ul>\n',
  },
  {
    title: 'Revisiting Conditionals in JavaScript and TypeScript',
    content:
      '<p>This post is part of the <a href="/series/mastering-javascript">Mastering JavaScript Series</a>.</p>\n<p>We are going to see different ways we can handle conditions in JavaScript and how TypeScript can help us make better use of code.</p>\n<p>Imagine we have a boolean value and based on this boolean, we want to assign a value to a new variable.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> isActive = <span class="hljs-literal">true</span>;\n</code></pre>\n<p>With this boolean, we want:</p>\n<ul>\n<li>if active (<code>isActive</code> = true): assign a value <code>on</code> to the variable <code>toggle</code>.</li>\n<li>if inactive (<code>isActive</code> = false): assign a value <code>off</code> to the variable <code>toggle</code>.</li>\n</ul>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">let</span> toggle;\n\n<span class="hljs-keyword">if</span> (isActive) {\n  toggle = <span class="hljs-string">&#x27;on&#x27;</span>;\n} <span class="hljs-keyword">else</span> {\n  toggle = <span class="hljs-string">&#x27;off&#x27;</span>;\n}\n</code></pre>\n<p>To do this, we usually use a <code>var</code> or a <code>let</code> statement. Create a <code>toggle</code> with <code>undefined</code> value and then assign the correct value based on the <code>isActive</code> value.</p>\n<p>This works.</p>\n<p>But we can&#39;t use <code>const</code> in this case. When defining a <code>const</code>, we need to add a value attached to it. Doing something like this will throw an error:</p>\n<pre><code class="hljs language-tsx">&gt; <span class="hljs-title class_">Uncaught</span> <span class="hljs-title class_">SyntaxError</span>: <span class="hljs-title class_">Missing</span> initializer <span class="hljs-keyword">in</span> <span class="hljs-keyword">const</span> declaration\n</code></pre>\n<p>We also can&#39;t use <code>const</code> inside the if-else condition.</p>\n<p>If we do this:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">if</span> (isActive) {\n  <span class="hljs-keyword">const</span> toggle = <span class="hljs-string">&#x27;on&#x27;</span>;\n} <span class="hljs-keyword">else</span> {\n  <span class="hljs-keyword">const</span> toggle = <span class="hljs-string">&#x27;off&#x27;</span>;\n}\n</code></pre>\n<p>And then verify the <code>toggle</code> value, it throws an error because this constant is not in the scope.</p>\n<pre><code class="hljs language-tsx">$ toggle\n&gt; <span class="hljs-title class_">Uncaught</span> <span class="hljs-title class_">ReferenceError</span>: toggle is not defined\n</code></pre>\n<p>Another way to handle this type of condition is by using the ternary operator.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> toggle = isActive ? <span class="hljs-string">&#x27;on&#x27;</span> : <span class="hljs-string">&#x27;off&#x27;</span>;\n</code></pre>\n<p>That&#39;s nice and beautiful. Capture everything in a very short and readable way.</p>\n<p>Now imagine handling multiple conditions. We can&#39;t really use the ternary operator. The first thought is to come back to the if-else statement, but now with multiple possible conditions:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">let</span> label;\n\n<span class="hljs-keyword">if</span> (status === <span class="hljs-string">&#x27;finished&#x27;</span>) {\n  label = <span class="hljs-string">&#x27;Finished task&#x27;</span>;\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (status === <span class="hljs-string">&#x27;inactive&#x27;</span>) {\n  label = <span class="hljs-string">&#x27;Task inactive&#x27;</span>;\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (status === <span class="hljs-string">&#x27;ongoing&#x27;</span>) {\n  label = <span class="hljs-string">&#x27;Ongoing task&#x27;</span>;\n}\n</code></pre>\n<p>Another possibility that comes to mind is using a switch case.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">let</span> label;\n\n<span class="hljs-keyword">switch</span> (status) {\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;finished&#x27;</span>:\n    label = <span class="hljs-string">&#x27;Finished task&#x27;</span>;\n    <span class="hljs-keyword">break</span>;\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;inactive&#x27;</span>:\n    label = <span class="hljs-string">&#x27;Task inactive&#x27;</span>;\n    <span class="hljs-keyword">break</span>;\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;ongoing&#x27;</span>:\n    label = <span class="hljs-string">&#x27;Ongoing task&#x27;</span>;\n    <span class="hljs-keyword">break</span>;\n}\n</code></pre>\n<p>But what if we also want to assign a value to another variable? A <code>tag</code> variable in this case. The tag&#39;s value follows this logic:</p>\n<ul>\n<li><code>finished</code>: <code>Finished</code></li>\n<li><code>inactive</code>: <code>Inactive</code></li>\n<li><code>ongoing</code>: <code>Ongoing</code></li>\n</ul>\n<p>Let&#39;s build it!</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">let</span> label;\n<span class="hljs-keyword">let</span> tag;\n\n<span class="hljs-keyword">switch</span> (status) {\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;finished&#x27;</span>:\n    label = <span class="hljs-string">&#x27;Finished task&#x27;</span>;\n    tag = <span class="hljs-string">&#x27;Finished&#x27;</span>;\n    <span class="hljs-keyword">break</span>;\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;inactive&#x27;</span>:\n    label = <span class="hljs-string">&#x27;Task inactive&#x27;</span>;\n    tag = <span class="hljs-string">&#x27;Inactive&#x27;</span>;\n    <span class="hljs-keyword">break</span>;\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;ongoing&#x27;</span>:\n    label = <span class="hljs-string">&#x27;Ongoing task&#x27;</span>;\n    tag = <span class="hljs-string">&#x27;Ongoing&#x27;</span>;\n    <span class="hljs-keyword">break</span>;\n}\n</code></pre>\n<p>Now we also want a button&#39;s variant for each status. The logic follows:</p>\n<ul>\n<li><code>finished</code>: <code>secondary</code></li>\n<li><code>inactive</code>: <code>disabled</code></li>\n<li><code>ongoing</code>: <code>primary</code></li>\n</ul>\n<p>Let&#39;s add this variable to the switch case.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">let</span> label;\n<span class="hljs-keyword">let</span> tag;\n<span class="hljs-keyword">let</span> variant;\n\n<span class="hljs-keyword">switch</span> (status) {\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;finished&#x27;</span>:\n    label = <span class="hljs-string">&#x27;Finished task&#x27;</span>;\n    tag = <span class="hljs-string">&#x27;Finished&#x27;</span>;\n    variant = <span class="hljs-string">&#x27;secondary&#x27;</span>;\n    <span class="hljs-keyword">break</span>;\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;inactive&#x27;</span>:\n    label = <span class="hljs-string">&#x27;Task inactive&#x27;</span>;\n    tag = <span class="hljs-string">&#x27;Inactive&#x27;</span>;\n    variant = <span class="hljs-string">&#x27;disabled&#x27;</span>;\n    <span class="hljs-keyword">break</span>;\n  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;ongoing&#x27;</span>:\n    label = <span class="hljs-string">&#x27;Ongoing task&#x27;</span>;\n    tag = <span class="hljs-string">&#x27;Ongoing&#x27;</span>;\n    variant = <span class="hljs-string">&#x27;primary&#x27;</span>;\n    <span class="hljs-keyword">break</span>;\n}\n</code></pre>\n<p>The lesson here is that the switch case starts to get bigger and more complex. To abstract this complexity, we can use object to map the status to an object that represents the status.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> statusMap = {\n  <span class="hljs-attr">finished</span>: {\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Finished task&#x27;</span>,\n    <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;Finished&#x27;</span>,\n    <span class="hljs-attr">variant</span>: <span class="hljs-string">&#x27;secondary&#x27;</span>,\n  },\n  <span class="hljs-attr">inactive</span>: {\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Task inactive&#x27;</span>,\n    <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;Inactive&#x27;</span>,\n    <span class="hljs-attr">variant</span>: <span class="hljs-string">&#x27;disabled&#x27;</span>,\n  },\n  <span class="hljs-attr">ongoing</span>: {\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Ongoing task&#x27;</span>,\n    <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;Ongoing&#x27;</span>,\n    <span class="hljs-attr">variant</span>: <span class="hljs-string">&#x27;primary&#x27;</span>,\n  },\n};\n\n<span class="hljs-keyword">const</span> { label, tag, variant } = statusMap[<span class="hljs-string">&#x27;finished&#x27;</span>];\nlabel; <span class="hljs-comment">// =&gt; Finished tag</span>\ntag; <span class="hljs-comment">// =&gt; Finished</span>\nvariant; <span class="hljs-comment">// =&gt; secondary</span>\n</code></pre>\n<p>And if you are using a type system like TypeScript, we can do even better things.</p>\n<p>We can type the <code>statusMap</code>’s key and value and require to use the existing keys.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Statuses</span> = <span class="hljs-string">&#x27;finished&#x27;</span> | <span class="hljs-string">&#x27;inactive&#x27;</span> | <span class="hljs-string">&#x27;ongoing&#x27;</span>;\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">StatusObject</span> = {\n  <span class="hljs-attr">label</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">tag</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">variant</span>: <span class="hljs-built_in">string</span>;\n};\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">StatusMap</span> = <span class="hljs-title class_">Record</span>&lt;<span class="hljs-title class_">Statuses</span>, <span class="hljs-title class_">StatusObject</span>&gt;;\n</code></pre>\n<p>And we used in the map:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">statusMap</span>: <span class="hljs-title class_">StatusMap</span> = {\n  <span class="hljs-attr">finished</span>: {\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Finished task&#x27;</span>,\n    <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;Finished&#x27;</span>,\n    <span class="hljs-attr">variant</span>: <span class="hljs-string">&#x27;secondary&#x27;</span>,\n  },\n  <span class="hljs-attr">inactive</span>: {\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Task inactive&#x27;</span>,\n    <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;Inactive&#x27;</span>,\n    <span class="hljs-attr">variant</span>: <span class="hljs-string">&#x27;disabled&#x27;</span>,\n  },\n  <span class="hljs-attr">ongoing</span>: {\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Ongoing task&#x27;</span>,\n    <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;Ongoing&#x27;</span>,\n    <span class="hljs-attr">variant</span>: <span class="hljs-string">&#x27;primary&#x27;</span>,\n  },\n};\n</code></pre>\n<p>When you use it (and if your editor is configured to make the IntelliSense works), it will show all the possibilities for you.</p>\n<p><img src="/series/mastering-javascript/intellisense.png" alt=""></p>\n<p>It will also get errors in compile-time if you use a different key to access the object.</p>\n<p><img src="/series/mastering-javascript/error-in-compile-time.png" alt=""></p>\n<p>Great! Now we have a solution abstracting the complexity and getting errors in compile-time. In the future, it will also be possible to use <a href="https://github.com/tc39/proposal-pattern-matching">pattern matching</a> in JavaScript and we can come up with more solutions to handle conditions.</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://github.com/imteekay/master-javascript">Master JavaScript repo</a></li>\n<li><a href="https://github.com/imteekay/master-javascript/tree/main/conditionals">Master JavaScript: Conditionals</a></li>\n<li><a href="/series/mastering-javascript">Master JavaScript Series</a></li>\n<li><a href="https://www.educative.io/courses/learn-object-oriented-programming-in-javascript?aff=x8bV">Learn Object-Oriented Programming in JavaScript</a></li>\n<li><a href="https://www.educative.io/courses/javascript-in-detail-from-beginner-to-advanced?aff=x8bV">JavaScript in Detail: From Beginner to Advanced</a></li>\n</ul>\n',
  },
  {
    title: "Rebuilding Mercari's Search: Home and Menu",
    content:
      '<p>This is the second post of the <a href="/series/rebuilding-mercaris-search">Rebuilding Mercari&#39;s Search series</a>.</p>\n<p>In this post, we&#39;ll talk about the home and the menu drafts. Before starting to implement the search, the filter, and the products list, I wanted to add a very simple home and a very simple menu to do the navigation between the home (url: <code>/</code>) and the search (url: <code>/search</code>) pages.</p>\n<p>As we start to implement UI, I should tell you that my focus on this project was to do the logic, state management, and tests. This is why I was looking for a UI framework to work as my design system. With this idea, I don&#39;t need to work heavily with CSS.</p>\n<p>I chose Material UI, because I&#39;m familiar with it, so I can focus on other parts instead of learning a new framework now.</p>\n<p>So let&#39;s install the library and start implement the home and the menu.</p>\n<pre><code class="hljs language-bash">yarn add @material-ui/core\n</code></pre>\n<p>The home is just a page with a title for now as I want to focus on the navigation between the home and the search.</p>\n<p>So the home, that will live in the <code>/</code> url, will have the menu to navigate to the search page, which will live in the <code>/search</code> url for now.</p>\n<p>This is the home with the title:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;\n}\n</code></pre>\n<p>This component page lives in the <code>pages/index.tsx</code> as NextJS does routing based on the folder and file structures.</p>\n<p>To make all the pages have a menu to be able to navigate to other places, we need to add it to the <code>pages/_app.tsx</code> file. But to be able to do that, let&#39;s first implement our Menu component.</p>\n<p>To simplify the menu at first, I wanted to add a button that will open or close the menu showing or hiding the menu items.</p>\n<pre><code class="hljs language-tsx">&lt;<span class="hljs-title class_">Button</span> aria-controls=<span class="hljs-string">&quot;menu&quot;</span> aria-haspopup=<span class="hljs-string">&quot;true&quot;</span> onClick={handleClick}&gt;\n  <span class="hljs-title class_">Open</span> <span class="hljs-title class_">Menu</span>\n&lt;/<span class="hljs-title class_">Button</span>&gt;\n</code></pre>\n<p>This is the first part. Nothing much here. We need the <code>handleClick</code> function now.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> [anchorEl, setAnchorEl] = useState&lt;<span class="hljs-literal">null</span> | <span class="hljs-title class_">HTMLElement</span>&gt;(<span class="hljs-literal">null</span>);\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params">event: MouseEvent&lt;HTMLButtonElement&gt;</span>) =&gt; {\n  <span class="hljs-title function_">setAnchorEl</span>(event.<span class="hljs-property">currentTarget</span>);\n};\n</code></pre>\n<p>The <code>handleClick</code> function only manage the state related to the <code>anchorEl</code>.</p>\n<p>The rest of the menu UI is pretty simple, we only need to use the <code>Menu</code> and the <code>MenuItem</code> from the Material UI.</p>\n<pre><code class="hljs language-tsx">&lt;<span class="hljs-title class_">MuiMenu</span>\n  id=<span class="hljs-string">&quot;menu&quot;</span>\n  anchorEl={anchorEl}\n  keepMounted\n  open={<span class="hljs-title class_">Boolean</span>(anchorEl)}\n  onClose={handleClose}\n&gt;\n  {menuItems.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item: MenuItem</span>) =&gt;</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">{item.linkTo}</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{item.key}</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">MuiMenuItem</span>&gt;</span>{item.label}<span class="hljs-tag">&lt;/<span class="hljs-name">MuiMenuItem</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span>\n  ))}\n&lt;/<span class="hljs-title class_">MuiMenu</span>&gt;\n</code></pre>\n<p>We know about the <code>anchorEl</code>, but we need to implement the <code>handleClose</code> function, the <code>menuItems</code> list, and the <code>MenuItem</code> type.</p>\n<p>The <code>MenuItem</code> is a &quot;type&quot; representation for each item:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">MenuItem</span> = {\n  <span class="hljs-attr">linkTo</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">label</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>;\n};\n</code></pre>\n<p>The <code>menuItems</code> is the simplest as it is just a list of items passed as a prop to this menu component. But we need to make sure it is passed and the &quot;type&quot; representation of this list is in the function component contract.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">FunctionComponent</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">MenuPropsType</span> = { <span class="hljs-attr">menuItems</span>: <span class="hljs-title class_">MenuItem</span>[] };\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">Menu</span>: <span class="hljs-title class_">FunctionComponent</span>&lt;<span class="hljs-title class_">MenuPropsType</span>&gt; = <span class="hljs-function">(<span class="hljs-params">{ menuItems }</span>) =&gt;</span> {\n    ...\n};\n</code></pre>\n<p>And the <code>handleClose</code> function only undo what the <code>handleClick</code> does: reset the <code>anchorEl</code> with a <code>null</code> value.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClose</span> = (<span class="hljs-params">_: <span class="hljs-built_in">any</span></span>) =&gt; {\n  <span class="hljs-title function_">setAnchorEl</span>(<span class="hljs-literal">null</span>);\n};\n</code></pre>\n<p>Nice! The menu is not complete nor pretty, but it&#39;s functional now. We can start using in our app. To be able to reuse for all pages (for this app, it&#39;ll be for the home and the search pages), we just need to add it to the <code>_app.tsx</code> file.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Fragment</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">AppProps</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;next/app&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Menu</span>, { <span class="hljs-title class_">MenuItem</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;Base/Layout/Menu&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../styles/globals.css&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">menuItems</span>: <span class="hljs-title class_">MenuItem</span>[] = [\n  {\n    <span class="hljs-attr">linkTo</span>: <span class="hljs-string">&#x27;/&#x27;</span>,\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,\n    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;link-to-home&#x27;</span>,\n  },\n  {\n    <span class="hljs-attr">linkTo</span>: <span class="hljs-string">&#x27;/search&#x27;</span>,\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Search&#x27;</span>,\n    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;link-to-search&#x27;</span>,\n  },\n];\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params">{ Component, pageProps }: AppProps</span>) {\n  <span class="hljs-keyword">return</span> (\n    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Menu</span> <span class="hljs-attr">menuItems</span>=<span class="hljs-string">{menuItems}</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Component</span> {<span class="hljs-attr">...pageProps</span>} /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Fragment</span>&gt;</span></span>\n  );\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;\n</code></pre>\n<p>The <code>Component</code> is each page we want to create and we add the <code>Menu</code> at the top of the page. As we saw earlier, we need to pass the <code>menuItems</code> with the type contract we built in the menu. It&#39;s also nice that we can reuse the types to make the data consistent.</p>\n<h2 id="final-words">Final words</h2>\n<p>This was the second post of the <em>Rebuilding Mercari&#39;s Search</em> series and I hope this also provides value to you. In this post, we start creating the building blocks for the app by adding a very simple home and menu for navigation.</p>\n<p>For the following post, we&#39;ll talk about the implementation of the search page, where we&#39;ll focus on the products list UI first.</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://github.com/imteekay/mercari-search/pull/1">Home &amp; Menu Pull Request</a></li>\n<li><a href="https://github.com/imteekay/mercari-search">mercari-search repo</a></li>\n</ul>\n',
  },
  {
    title:
      "Rebuilding Mercari's Search: Setup NextJS with TypeScript, Prettier, and Jest",
    content:
      '<p>This post is part of the <a href="/series/rebuilding-mercaris-search">Rebuilding Mercari&#39;s Search series</a> and the very first one.</p>\n<p>In this post, we&#39;ll setup the project with some nice tooling I&#39;ve been working on these days. It&#39;ll be a NextJS application powered by TypeScript and nice devtools like Prettier, Jest, and the Testing Library.</p>\n<p>We&#39;ll also see how to setup husky to help make our codebase consistent running Prettier on pre-commit. Let&#39;s dive in.</p>\n<h2 id="nextjs--typescript">NextJS &amp; TypeScript</h2>\n<p>NextJS setup with TypeScript is pretty easy. We just need to use its CLI:</p>\n<pre><code class="hljs language-jsx">yarn create next-app --typescript\n</code></pre>\n<p>And done! We have the whole ready to be run. Just start the dev server and we can see the app running:</p>\n<pre><code class="hljs language-jsx">yarn dev\n</code></pre>\n<p>Now you&#39;re able to access <code>[localhost:3000](http://localhost:3000)</code> and see the app running.</p>\n<p>It comes with the whole TypeScript initial setup like:</p>\n<ul>\n<li><code>tsconfig.json</code>: the compiler configuration for the TypeScript</li>\n<li><code>next-env.d.ts</code>: the declaration types for NextJS</li>\n<li><code>_app.tsx</code>: the main app that runs the pages setup with the extension <code>.tsx</code></li>\n<li><code>index.tsx</code>: the <code>/</code> page as an example of a <code>.tsx</code> component</li>\n</ul>\n<h2 id="prettier">Prettier</h2>\n<p>Prettier is an opinionated code formatter. It supports many languages, it&#39;s configurable, and it&#39;s heavily used in the JavaScript community.</p>\n<p>A couple of days ago, Anthony joked about Prettier not respecting himself. And I said that I love prettier for <em>respecting</em> consistency:</p>\n<p><a href="https://twitter.com/wordsofteekay/status/1399090968301801473">https://twitter.com/leandrotk_/status/1399090968301801473</a></p>\n<p>I think that&#39;s the important &quot;word&quot;: consistency. When working in a big company with different teams or just many people in the same team, code consistency is key.</p>\n<p>To configure Prettier is very simple. Let&#39;s take a look:</p>\n<pre><code class="hljs language-bash">yarn add --dev --exact prettier\n</code></pre>\n<p>Create a file <code>.prettierrc</code>:</p>\n<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;singleQuote&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;trailingComma&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span>\n<span class="hljs-punctuation">}</span>\n</code></pre>\n<p>And the configuration is pretty much it. To make it work in your editor, you&#39;ll probably need to install a plugin or extension. I&#39;ve been using vscode with Prettier and it looks great.</p>\n<p>We can also do other two things to make it more complete:</p>\n<ul>\n<li>Add a <code>.prettierignore</code> file to ignore files that we don&#39;t want to run Prettier</li>\n</ul>\n<pre><code class="hljs language-json">node_modules\n.next\n.yarn.lock\n</code></pre>\n<p>For a NextJS project, we&#39;ll add the common <code>node_modules</code> folder to the ignore file, the <code>.yarn.lock</code>, and the <code>.next</code> folder that&#39;s generated from the NextJS dev build.</p>\n<ul>\n<li>Run prettier on pre-commit to make sure all changes are <em>Prettier</em>.</li>\n</ul>\n<p>To make this works, we can use lint-staged and husky. The easier way is to run this command:</p>\n<pre><code class="hljs language-json">npx mrm@<span class="hljs-number">2</span> lint-staged\n</code></pre>\n<p>It&#39;ll configure basically everything you need to run prettier on pre-commit. The only thing that I needed to do was adding the important file extensions for this project, more specifically <code>.tsx</code> and <code>.ts</code>:</p>\n<pre><code class="hljs language-json"><span class="hljs-attr">&quot;lint-staged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;*.{js,jsx,css,md,ts,tsx}&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier --write&quot;</span>\n<span class="hljs-punctuation">}</span>\n</code></pre>\n<p>This configuration was added by the command in the <code>package.json</code> file. If you add a new file with any of these extensions, it&#39;ll run prettier on each file that is in the git staged area before the commit.</p>\n<p>Great, now we can make sure the project&#39;s code will be consistent from beginning to the end.</p>\n<h2 id="testing-with-jest-and-testing-library">Testing with Jest and Testing Library</h2>\n<p>Testing is a big part of a project&#39;s setup. When building software, we want to ship it with confidence that it really works. Not only now, but across many releases we&#39;ll do. Automation is also important in terms of velocity.</p>\n<p>To be able to have this confidence, I always rely on Jest, a testing framework, and the Testing Library + its helpers to do the job. First jest:</p>\n<pre><code class="hljs language-bash">yarn add -D jest @types/jest babel-jest jest-axe @types/jest-axe\n</code></pre>\n<ul>\n<li><code>jest</code>: the testing framework</li>\n<li><code>@types/jest</code>: the types to work well with TypeScript</li>\n<li><code>babel-jest</code>: compiles JavaScript code for the tests files</li>\n<li><code>jest-axe</code>: a custom Jest matcher to handle accessibility testing</li>\n<li><code>@types/jest-axe</code>: the types to work well with TypeScript</li>\n</ul>\n<p>After installing all the necessary dependencies, we need to add the configuration.</p>\n<p><code>jest.setup.js</code>:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;jest-axe/extend-expect&#x27;</span>;\n</code></pre>\n<p><code>jest.config.js</code>:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {\n  <span class="hljs-attr">setupFilesAfterEnv</span>: [<span class="hljs-string">&#x27;./jest.setup.js&#x27;</span>],\n  <span class="hljs-attr">testEnvironment</span>: <span class="hljs-string">&#x27;jsdom&#x27;</span>,\n};\n</code></pre>\n<p><code>.babelrc</code>:</p>\n<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;presets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;next/babel&quot;</span><span class="hljs-punctuation">]</span>\n<span class="hljs-punctuation">}</span>\n</code></pre>\n<p><code>package.json</code>:</p>\n<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>\n  ...\n    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jest&quot;</span><span class="hljs-punctuation">,</span>\n    <span class="hljs-attr">&quot;test:watch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jest --watch&quot;</span>\n    ...\n<span class="hljs-punctuation">}</span>\n</code></pre>\n<p>And now we are able to run our tests by calling these commands:</p>\n<pre><code class="hljs language-bash">yarn <span class="hljs-built_in">test</span>\nyarn <span class="hljs-built_in">test</span>:watch\n</code></pre>\n<p>For the Testing Library, it&#39;s simpler. We just need to install it and start using it.</p>\n<pre><code class="hljs language-json">yarn add -D @testing-library/react @testing-library/jest-dom\n</code></pre>\n<ul>\n<li><code>@testing-library/react</code>: the testing tool to test react components</li>\n<li><code>@testing-library/jest-dom</code>: it provides custom matchers for jest. I really like to use the <code>toBeInTheDocument</code> matcher for component testing.</li>\n</ul>\n<p>The only configuration I needed to do was adding the <code>jest-dom</code> to the testing setup to enable the matchers for test files.</p>\n<p><code>jest.setup.js</code>:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@testing-library/jest-dom&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;jest-axe/extend-expect&#x27;</span>;\n</code></pre>\n<p>I didn&#39;t setup Cypress because I want to focus on the search implementation first, but we&#39;ll see in the last episodes of this series that we&#39;ll try to implement an integration test with Cypress to test our app.</p>\n<h2 id="final-words">Final words</h2>\n<p>I&#39;m very happy with this first post of the <em>Rebuilding Mercari&#39;s Search</em> series and I hope this also provides value and knowledge when it comes to starting a new project, adding valuable frontend tooling, and setup NextJS.</p>\n<p>For the following post, we&#39;ll talk about a simple implementation of the home page and menu using React together with TypeScript.</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://github.com/imteekay/mercari-search/pull/1/">Project Set up + Home: Pull Request</a></li>\n<li><a href="https://github.com/imteekay/mercari-search/pull/3">Configure husky and lint-staged to run prettier on pre-commit: Pull Request</a></li>\n<li><a href="https://github.com/imteekay/mercari-search">mercari-search repo</a></li>\n</ul>\n',
  },
  {
    title: 'Typescript Interesting Types',
    content:
      '<p>These days I&#39;m building a new project to understand some topics deeply. It is about user experience, web performance, accessibility, and a type system for consistent data.</p>\n<p>This project I&#39;m basically using React with Typescript. At first, I implemented a custom hook to handle the data fetching. One of the possible data types the fetch could return is a <code>Product</code> type. It looks like this:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Product</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">imageUrl</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">description</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">isShippingFree</span>: <span class="hljs-built_in">boolean</span>;\n  <span class="hljs-attr">discount</span>: <span class="hljs-built_in">number</span>;\n};\n</code></pre>\n<p>Now that I could fetch some products, I wanted to use the list of products to render in the DOM. So I created a <code>Product</code> component. But as we are using Typescript, the props should be typed. In this case, I used the <code>Product</code> type. It looks like this:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Product</span> = (<span class="hljs-params">{\n  imageUrl,\n  name,\n  description,\n  price,\n  discount,\n  isShippingFree,\n}: ProductType</span>) =&gt; (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Box</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">imageUrl</span>=<span class="hljs-string">{imageUrl}</span> <span class="hljs-attr">imageAlt</span>=<span class="hljs-string">{name}</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">TitleDescription</span> <span class="hljs-attr">name</span>=<span class="hljs-string">{name}</span> <span class="hljs-attr">description</span>=<span class="hljs-string">{description}</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Price</span> <span class="hljs-attr">price</span>=<span class="hljs-string">{price}</span> <span class="hljs-attr">discount</span>=<span class="hljs-string">{discount}</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Tag</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Free Shipping&quot;</span> <span class="hljs-attr">isVisible</span>=<span class="hljs-string">{isShippingFree}</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span></span>\n);\n</code></pre>\n<p>And when I started implementing the <code>Image</code> component, I just passed the <code>imageUrl</code> and the <code>imageAlt</code> as props. It looks like this:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Image</span> = (<span class="hljs-params">{ imageUrl }</span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{imageUrl}</span> /&gt;</span></span>;\n</code></pre>\n<p>In this case, I couldn&#39;t use the <code>Product</code> type. But I could reuse it.</p>\n<p>I learned about this new type: the <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#partialt">Partial</a> type. The idea of the <code>Partial</code> type is to build a new type based on the passed type and set all attributes to <code>optional</code>.</p>\n<p>So, if we do a partial of the <code>Product</code> type, it would look like this:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Product</span> = {\n  name?: <span class="hljs-built_in">string</span>;\n  price?: <span class="hljs-built_in">number</span>;\n  imageUrl?: <span class="hljs-built_in">string</span>;\n  description?: <span class="hljs-built_in">string</span>;\n  isShippingFree?: <span class="hljs-built_in">boolean</span>;\n  discount?: <span class="hljs-built_in">number</span>;\n};\n</code></pre>\n<p>All properties are set to optional.</p>\n<p>And now I can use it for the <code>Image</code> component:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">Image</span> = ({ imageUrl }): <span class="hljs-title class_">Partial</span>&lt;<span class="hljs-title class_">ProductType</span>&gt; =&gt; (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{imageUrl}</span> /&gt;</span></span>\n);\n</code></pre>\n<p>But when I use the <code>Image</code> component, I can pass any props I want. I miss the type check. It doesn&#39;t break in compile time.</p>\n<p>To fix that, I could just build an <code>ImagePropsType</code> and use it as the component props type.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ImagePropsType</span> = {\n  <span class="hljs-attr">imageUrl</span>: <span class="hljs-built_in">string</span>;\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">Image</span> = ({ imageUrl }): <span class="hljs-function"><span class="hljs-params">ImagePropsType</span> =&gt;</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{imageUrl}</span> /&gt;</span></span>;\n</code></pre>\n<p>But I already have the type for the <code>imageUrl</code> inside the <code>Product</code> type. So I started to search how I could reuse the type: I found the <code>Pick</code> type.</p>\n<p>The <code>Pick</code> type lets me reuse the <code>Product</code> type by picking a set of properties I want:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ImagePropsType</span> = <span class="hljs-title class_">Pick</span>&lt;<span class="hljs-title class_">ProductType</span>, <span class="hljs-string">&#x27;imageUrl&#x27;</span>&gt;;\n</code></pre>\n<p>Now I ensure that type checking and the type reusability work well.</p>\n<p>To build the whole <code>Image</code> component, I also needed to pass other props like: <code>imageAlt</code> and <code>width</code>.</p>\n<p>What I wanted is the intersection of the <code>Pick&lt;ProductType, &#39;imageUrl&#39;&gt;</code>, the <code>imageAlt</code> type, and the <code>width</code> type.</p>\n<p>In Typescript, the representation of the intersection is the <code>&amp;</code> operator.</p>\n<p>I defined the <code>ImageUrlType</code>:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ImageUrlType</span> = <span class="hljs-title class_">Pick</span>&lt;<span class="hljs-title class_">ProductType</span>, <span class="hljs-string">&#x27;imageUrl&#x27;</span>&gt;;\n</code></pre>\n<p>And the <code>ImageAttrType</code> to represent both the <code>imageAlt</code> and the <code>width</code>:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ImageAttrType</span> = { <span class="hljs-attr">imageAlt</span>: <span class="hljs-built_in">string</span>; width?: <span class="hljs-built_in">string</span> };\n</code></pre>\n<p>And compose them together by insecting the types:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ImagePropsType</span> = <span class="hljs-title class_">ImageUrlType</span> &amp; <span class="hljs-title class_">ImageAttrType</span>;\n</code></pre>\n<p>And the final result is:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">ProductType</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;types/Product&#x27;</span>;\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">ImageUrlType</span> = <span class="hljs-title class_">Pick</span>&lt;<span class="hljs-title class_">ProductType</span>, <span class="hljs-string">&#x27;imageUrl&#x27;</span>&gt;;\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">ImageAttrType</span> = { <span class="hljs-attr">imageAlt</span>: <span class="hljs-built_in">string</span>; width?: <span class="hljs-built_in">string</span> };\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">ImagePropsType</span> = <span class="hljs-title class_">ImageUrlType</span> &amp; <span class="hljs-title class_">ImageAttrType</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Image</span> = (<span class="hljs-params">{ imageUrl, imageAlt, width }: ImagePropsType</span>) =&gt; (\n  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{imageUrl}</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">{imageAlt}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{width}</span> /&gt;</span></span>\n);\n</code></pre>\n<p>I have the image URL, alt, width types intersected, and defined in the <code>ImagePropsType</code>. It can think of types as data and compose them. This is a very cool feature.</p>\n<p>These are the interesting new types I learned this week.</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://www.educative.io/path/typescript-for-front-end-developers?aff=x8bV">TypeScript for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/using-typescript-with-react?aff=x8bV">Using TypeScript with React</a></li>\n<li><a href="https://www.educative.io/courses/learn-typescript-complete-course?aff=x8bV">Learn TypeScript: The Complete Course for Beginners</a></li>\n<li><a href="https://www.educative.io/courses/advanced-typescript-masterclass?aff=x8bV">Advanced TypeScript Masterclass</a></li>\n</ul>\n',
  },
  {
    title: 'Typescript Learnings: Object Destructuring',
    content:
      '<p>This is part of my series on <a href="/series/typescript-learnings">Typescript Learnings</a>, where I share micro posts about everything I&#39;m learning related to Typescript.</p>\n<p>It&#39;s a common feature to destructure objects in JavaScript. For example, imagine we have a <code>Person</code> object. It looks like:</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> person = {\n  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;TK&#x27;</span>,\n  <span class="hljs-attr">age</span>: <span class="hljs-number">24</span>,\n  <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;tk@mail.com&#x27;</span>,\n  <span class="hljs-attr">isLearning</span>: <span class="hljs-literal">true</span>,\n};\n</code></pre>\n<p>And when we use it, sometimes we want to destructure the object to get the attributes.</p>\n<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> { firstName, age, email, isLearning } = person;\n</code></pre>\n<p>In Typescript, it works the same way. But with types. So let&#39;s type the attributes. At first I thought I could add the type after each attribute. Something like:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> {\n  <span class="hljs-attr">firstName</span>: <span class="hljs-built_in">string</span>,\n  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>,\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>,\n  <span class="hljs-attr">isLearning</span>: <span class="hljs-built_in">boolean</span>,\n} = person;\n</code></pre>\n<p>But it actually doesn&#39;t compile that way. We don&#39;t specify a type for each attribute, we specify the object type. We could add this way:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> {\n  firstName,\n  age,\n  email,\n  isLearning,\n}: {\n  <span class="hljs-attr">firstName</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">isLearning</span>: <span class="hljs-built_in">boolean</span>;\n} = person;\n</code></pre>\n<p>Or we could have a <code>Person</code> type (or interface) to handle these types.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Person</span> = {\n  <span class="hljs-attr">firstName</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">isLearning</span>: <span class="hljs-built_in">boolean</span>;\n};\n</code></pre>\n<p>And use it in the object destructuring:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> { firstName, age, email, isLearning }: <span class="hljs-title class_">Person</span> = person;\n</code></pre>\n<p>Implementing a <code>type</code> is cool because we could also use it in the <code>person</code> definition:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span> = {\n  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;TK&#x27;</span>,\n  <span class="hljs-attr">age</span>: <span class="hljs-number">24</span>,\n  <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;tk@mail.com&#x27;</span>,\n  <span class="hljs-attr">isLearning</span>: <span class="hljs-literal">true</span>,\n};\n</code></pre>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://www.educative.io/path/typescript-for-front-end-developers?aff=x8bV">TypeScript for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/using-typescript-with-react?aff=x8bV">Using TypeScript with React</a></li>\n<li><a href="https://www.educative.io/courses/learn-typescript-complete-course?aff=x8bV">Learn TypeScript: The Complete Course for Beginners</a></li>\n<li><a href="https://www.educative.io/courses/advanced-typescript-masterclass?aff=x8bV">Advanced TypeScript Masterclass</a></li>\n</ul>\n',
  },
  {
    title: 'Typescript Learnings: Type System',
    content:
      '<p>This is part of my series on <a href="/series/typescript-learnings">Typescript Learning</a>, where I share micro-posts about everything I&#39;m learning related to Typescript.</p>\n<p>One of the main Typescript features is the Type System. We are going to play around with the type system and see how it works.</p>\n<h2 id="basic-types">Basic Types</h2>\n<p>The basic types are:</p>\n<ul>\n<li>number</li>\n<li>string</li>\n<li>boolean</li>\n</ul>\n<p>We define these type by using this nomenclature: <code>variableName: typeName</code>, where the <code>variableName</code> you choose and the <code>typeName</code> can a <code>number</code>, a <code>string</code>, or a <code>boolean</code>. Let&#39;s try it out.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">25</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;TK&#x27;</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-attr">isLearning</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;\n</code></pre>\n<p>What is the power of the Typescript type system? We define a type for a given variable or constant, it doesn&#39;t change across the whole system. A string will be a string forever. A number too. And so on.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">25</span>;\nage = <span class="hljs-string">&#x27;TK&#x27;</span>; <span class="hljs-comment">// Type &#x27;&quot;TK&quot;&#x27; is not assignable to type &#x27;number&#x27;.</span>\n</code></pre>\n<p>It fails on compile-time and raises a &quot;Type Error&quot;. This helps us with immutable types and prevent possible bugs.</p>\n<h2 id="collections">Collections</h2>\n<p>Here we have Arrays, Tuples, and Objects. They are collection, data structures to store, well, data.</p>\n<p>There are two ways to define a <code>Array</code> type. The type followed by a <code>[]</code>:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">bookshelf</span>: <span class="hljs-built_in">string</span>[] = [\n  <span class="hljs-string">&#x27;The Compound Effect&#x27;</span>,\n  <span class="hljs-string">&#x27;Leonardo Da Vinci&#x27;</span>,\n  <span class="hljs-string">&#x27;Enlightenment Now&#x27;</span>,\n];\n</code></pre>\n<p>The <code>string</code> is the type followed by <code>[]</code>.</p>\n<p>Another way is to use the <code>Array</code> type:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">bookshelf</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">string</span>&gt; = [\n  <span class="hljs-string">&#x27;The Compound Effect&#x27;</span>,\n  <span class="hljs-string">&#x27;Leonardo Da Vinci&#x27;</span>,\n  <span class="hljs-string">&#x27;Enlightenment Now&#x27;</span>,\n];\n</code></pre>\n<p>Tuples are a little different from the array. It has a fixed number of elements, so we define the type for each index.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">thoughts</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>] = [<span class="hljs-string">&#x27;Programming&#x27;</span>, <span class="hljs-number">42</span>];\n</code></pre>\n<p>By the way, the order of the elements and types is relevant:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">thoughts</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];\n\nthoughts = [<span class="hljs-string">&#x27;Programming&#x27;</span>, <span class="hljs-number">42</span>]; <span class="hljs-comment">// Succeeds!</span>\nthoughts = [<span class="hljs-number">42</span>, <span class="hljs-string">&#x27;Programming&#x27;</span>]; <span class="hljs-comment">// Fails!</span>\n</code></pre>\n<p>For objects, we can use the <code>object</code> type that represents the non-primitive type (<code>number</code>, <code>string</code>, <code>boolean</code>, <code>bigint</code>, <code>symbol</code>, <code>null</code>, or <code>undefined</code>).</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> printObj = (<span class="hljs-attr">obj</span>: <span class="hljs-built_in">object</span>): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> {\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);\n};\n\n<span class="hljs-title function_">printObj</span>({ <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span> }); <span class="hljs-comment">// it compiles and prints!</span>\n\n<span class="hljs-title function_">printObj</span>(<span class="hljs-number">42</span>); <span class="hljs-comment">// Argument of type &#x27;42&#x27; is not assignable to parameter of type &#x27;object&#x27;.</span>\n<span class="hljs-title function_">printObj</span>(<span class="hljs-string">&#x27;TK&#x27;</span>); <span class="hljs-comment">// Argument of type &#x27;&quot;TK&quot;&#x27; is not assignable to parameter of type &#x27;object&#x27;.</span>\n<span class="hljs-title function_">printObj</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// Argument of type &#x27;null&#x27; is not assignable to parameter of type &#x27;object&#x27;.</span>\n<span class="hljs-title function_">printObj</span>(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">// Argument of type &#x27;undefined&#x27; is not assignable to parameter of type &#x27;object&#x27;.</span>\n<span class="hljs-title function_">printObj</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// Argument of type &#x27;true&#x27; is not assignable to parameter of type &#x27;object&#x27;.</span>\n</code></pre>\n<p>Another way to define types for the object is to use Interfaces and Types.</p>\n<p>Interfaces give the shape of the object. We define the types for the object structure. For the <code>printObj</code> function we defined before, we just need an interface to handle the object structure.</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n}\n\n<span class="hljs-keyword">const</span> printObj = (<span class="hljs-attr">obj</span>: <span class="hljs-title class_">Person</span>): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> {\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);\n};\n\n<span class="hljs-title function_">printObj</span>({ <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span> }); <span class="hljs-comment">// it compiles and prints!</span>\n</code></pre>\n<p>The <code>Type</code> looks the same way:</p>\n<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Person</span> = {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n};\n\n<span class="hljs-keyword">const</span> printObj = (<span class="hljs-attr">obj</span>: <span class="hljs-title class_">Person</span>): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> {\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);\n};\n\n<span class="hljs-title function_">printObj</span>({ <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TK&#x27;</span> }); <span class="hljs-comment">// it compiles and prints!</span>\n</code></pre>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html">Typescript Utility Types: Docs</a></li>\n<li><a href="https://www.typescriptlang.org/docs/handbook/basic-types.html">Typescript Basic Types: Docs</a></li>\n<li><a href="https://www.educative.io/path/typescript-for-front-end-developers?aff=x8bV">TypeScript for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/using-typescript-with-react?aff=x8bV">Using TypeScript with React</a></li>\n<li><a href="https://www.educative.io/courses/learn-typescript-complete-course?aff=x8bV">Learn TypeScript: The Complete Course for Beginners</a></li>\n<li><a href="https://www.educative.io/courses/advanced-typescript-masterclass?aff=x8bV">Advanced TypeScript Masterclass</a></li>\n</ul>\n',
  },
  {
    title: 'Union Types with Objects',
    content:
      '<p>This post is part of the <a href="/series/typescript-learnings">Typescript Learning Series</a>.</p>\n<p>When I was testing some ideas and API features for JavaScript dates, I built a project in Typescript. I wanted to build a more <a href="/fun-with-dates">human-friendly API to handle dates</a>.</p>\n<p>This is what I was looking for:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">get</span>(<span class="hljs-number">1</span>).<span class="hljs-property">dayAgo</span>; <span class="hljs-comment">// it gets yesterday</span>\n</code></pre>\n<p>I also make it work for month and year:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">get</span>(<span class="hljs-number">1</span>).<span class="hljs-property">monthAgo</span>; <span class="hljs-comment">// it gets a month ago from today</span>\n<span class="hljs-title function_">get</span>(<span class="hljs-number">1</span>).<span class="hljs-property">yearAgo</span>; <span class="hljs-comment">// it gets a year ago from today</span>\n</code></pre>\n<p>These are great! But I wanted more: what if we want to get days, months, or years ago? It works too:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">get</span>(<span class="hljs-number">30</span>).<span class="hljs-property">daysAgo</span>;\n<span class="hljs-title function_">get</span>(<span class="hljs-number">6</span>).<span class="hljs-property">monthsAgo</span>;\n<span class="hljs-title function_">get</span>(<span class="hljs-number">10</span>).<span class="hljs-property">yearsAgo</span>;\n</code></pre>\n<p>And about the implementation? It is just a function that returns an JavaScript object:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> get = (<span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>): <span class="hljs-title class_">DateAgo</span> | <span class="hljs-function"><span class="hljs-params">DatesAgo</span> =&gt;</span> {\n  <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span>) {\n    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Number should be greater or equal than 1&#x27;</span>);\n  }\n\n  <span class="hljs-keyword">const</span> { day, month, year }: <span class="hljs-title class_">SeparatedDate</span> = <span class="hljs-title function_">getSeparatedDate</span>();\n\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">dayAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month, day - n);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">monthAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month - n, day);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">yearAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year - n, month, day);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">daysAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month, day - n);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">monthsAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month - n, day);\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">yearsAgo</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year - n, month, day);\n\n  <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) {\n    <span class="hljs-keyword">return</span> { daysAgo, monthsAgo, yearsAgo };\n  }\n\n  <span class="hljs-keyword">return</span> { dayAgo, monthAgo, yearAgo };\n};\n</code></pre>\n<p>And here we are! I want to tell you about Union Type with objects.</p>\n<p>We have different return types depending on the <code>n</code> parameter. If the <code>n</code> is greater than <code>1</code>, we return an object with &quot;plural&quot; kind of attributes. Otherwise, I just return the &quot;singular&quot; type of attributes.</p>\n<p>Different return types. So I built the two types.</p>\n<p>The <code>DateAgo</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">DateAgo</span> = {\n  <span class="hljs-attr">dayAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">monthAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">yearAgo</span>: <span class="hljs-title class_">Date</span>;\n};\n</code></pre>\n<p>And the <code>DatesAgo</code>:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">DatesAgo</span> = {\n  <span class="hljs-attr">daysAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">monthsAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">yearsAgo</span>: <span class="hljs-title class_">Date</span>;\n};\n</code></pre>\n<p>And use them in the function definition:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">const</span> get = (<span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>): <span class="hljs-title class_">DateAgo</span> | <span class="hljs-function"><span class="hljs-params">DatesAgo</span> =&gt;</span>\n</code></pre>\n<p>But this gets a type error.</p>\n<p>When using:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">get</span>(<span class="hljs-number">2</span>).<span class="hljs-property">daysAgo</span>;\n</code></pre>\n<p>I got this error: <code>Property &#39;daysAgo&#39; does not exist on type &#39;DateAgo | DatesAgo&#39;.</code></p>\n<p>When using:</p>\n<pre><code class="hljs language-tsx"><span class="hljs-title function_">get</span>(<span class="hljs-number">1</span>).<span class="hljs-property">dayAgo</span>;\n</code></pre>\n<p>I got this error: <code>Property &#39;dayAgo&#39; does not exist on type &#39;DateAgo | DatesAgo&#39;.</code></p>\n<p>The <code>DateAgo</code> doesn&#39;t declare the following types:</p>\n<ul>\n<li><code>daysAgo</code></li>\n<li><code>monthsAgo</code></li>\n<li><code>yearsAgo</code></li>\n</ul>\n<p>The same for the <code>DatesAgo</code>:</p>\n<ul>\n<li><code>dayAgo</code></li>\n<li><code>monthAgo</code></li>\n<li><code>yearAgo</code></li>\n</ul>\n<p>But it can have this properties in run-time. Because we can assign any kind of properties to an object. So a possible solution would be to add an <code>undefined</code> type to both <code>DateAgo</code> and <code>DatesAgo</code>.</p>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">DateAgo</span> = {\n  <span class="hljs-attr">dayAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">monthAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">yearAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">daysAgo</span>: <span class="hljs-literal">undefined</span>;\n  <span class="hljs-attr">monthsAgo</span>: <span class="hljs-literal">undefined</span>;\n  <span class="hljs-attr">yearsAgo</span>: <span class="hljs-literal">undefined</span>;\n};\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">DatesAgo</span> = {\n  <span class="hljs-attr">daysAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">monthsAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">yearsAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">dayAgo</span>: <span class="hljs-literal">undefined</span>;\n  <span class="hljs-attr">monthAgo</span>: <span class="hljs-literal">undefined</span>;\n  <span class="hljs-attr">yearAgo</span>: <span class="hljs-literal">undefined</span>;\n};\n</code></pre>\n<p>This will fix the issue in compile time. But with this, you&#39;ll always need to set an <code>undefined</code> value to the object. One to get around this is to add an optional to the <code>undefined</code> types. Like this:</p>\n<pre><code class="hljs language-tsx">yearAgo?: <span class="hljs-literal">undefined</span>\n</code></pre>\n<p>With that, you can set these <code>undefined</code> properties. A better solution is to use the <code>never</code> type:</p>\n<blockquote>\n<p>&quot;The never type represents the type of values that never occur.&quot;</p>\n</blockquote>\n<pre><code class="hljs language-tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">DateAgo</span> = {\n  <span class="hljs-attr">dayAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">monthAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">yearAgo</span>: <span class="hljs-title class_">Date</span>;\n  daysAgo?: <span class="hljs-built_in">never</span>;\n  monthsAgo?: <span class="hljs-built_in">never</span>;\n  yearsAgo?: <span class="hljs-built_in">never</span>;\n};\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">DatesAgo</span> = {\n  <span class="hljs-attr">daysAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">monthsAgo</span>: <span class="hljs-title class_">Date</span>;\n  <span class="hljs-attr">yearsAgo</span>: <span class="hljs-title class_">Date</span>;\n  dayAgo?: <span class="hljs-built_in">never</span>;\n  monthAgo?: <span class="hljs-built_in">never</span>;\n  yearAgo?: <span class="hljs-built_in">never</span>;\n};\n</code></pre>\n<p>It works as expected and it also represents the data semantically as these attributes will not occur for both situations.</p>\n<h2 id="resources">Resources</h2>\n<ul>\n<li><a href="https://www.educative.io/path/typescript-for-front-end-developers?aff=x8bV">TypeScript for Front-End Developers</a></li>\n<li><a href="https://www.educative.io/courses/using-typescript-with-react?aff=x8bV">Using TypeScript with React</a></li>\n<li><a href="https://www.educative.io/courses/learn-typescript-complete-course?aff=x8bV">Learn TypeScript: The Complete Course for Beginners</a></li>\n<li><a href="https://www.educative.io/courses/advanced-typescript-masterclass?aff=x8bV">Advanced TypeScript Masterclass</a></li>\n<li><a href="https://github.com/microsoft/TypeScript/issues/12815#issuecomment-266250230">Possible solution for objects</a></li>\n<li><a href="https://github.com/microsoft/TypeScript/issues/12815#issuecomment-373047380">Better solution</a></li>\n<li><a href="https://github.com/microsoft/TypeScript/issues/12815#issuecomment-506946211">Even better solution</a></li>\n<li><a href="https://github.com/imteekay/dating/blob/master/src/index.ts#L11">Solution example</a></li>\n<li><a href="https://github.com/imteekay/dating">Dating API source code</a></li>\n</ul>\n',
  },
  {
    title: 'Building my Legacy through Accessible, Open, and Free content',
    content:
      '<p>I&#39;ve been writing for 8 years now, more than 50 posts, everything free and available for everybody. I was not so serious about writing content, my process was always to “Learn &amp; Share”. Make it available for everybody.</p>\n<p>Over the years I came with a better process and <a href="/publisher-a-tooling-to-automate-the-process-to-publish-my-blog-posts">implemented toolings</a> to help me automate the repetitive process I needed to publish new content.</p>\n<p>Now I&#39;m changing again and I want to be transparent about how this website will work from now on.</p>\n<p>To start, I debated with myself a lot about creating content only for paid subscribers but I decided for now that I want to keep it open and free.</p>\n<p><em>My goal with this website is to build a legacy. I see it as a digital notebook where I share all my draft and published content, every piece of knowledge that is in my head and can be valuable in the world. Making it free and available for everybody is part of this mission.</em></p>\n<p>This is the architecture of the new process I&#39;m following:</p>\n<p><img src="/series/website-changelog/content-creation.png" alt="My new content creation process and distribution"></p>\n<p>I&#39;ll write and publish first on <a href="https://teekay.substack.com/">my Substack (paid subscribers)</a> and <a href="https://www.patreon.com/iamteekay">Patreon (patrons only)</a>. This content will available as early access for paid subscribers and patrons-only.</p>\n<p>After X days or weeks, I’ll publish on <a href="/">my website</a> and <a href="https://teekay.substack.com/">Substack (free subscribers)</a> and distribute via <a href="/rss.xml">RSS</a> and <a href="https://twitter.com/wordsofteekay">my Twitter</a>.</p>\n<p>Then I&#39;ll also share on other platforms like <a href="https://dev.to/teekay">dev.to</a>, <a href="https://leandrotk.medium.com/">Medium</a>, and <a href="https://tk.hashnode.dev/">Hashnode</a>.</p>\n<p>In summary, the idea is to:</p>\n<ul>\n<li>give early access to paid Substack subscribers and patrons-only</li>\n<li>keep everything open and free in the long term</li>\n<li>cross-post on other platforms as people prefer to access their favorite website</li>\n</ul>\n<p>To be compensated for my work and still make it available for everybody is the best of both worlds. This is still an experiment, so let&#39;s see if it works well.</p>\n<p>You can support my work by</p>\n<ul>\n<li>being a <a href="https://teekay.substack.com">paid subscriber on Substack</a></li>\n<li>being a <a href="https://www.patreon.com/iamteekay">patron on Patreon</a></li>\n<li>or make a one-time donation on <a href="https://ko-fi.com/teekay">Ko-Fi</a></li>\n</ul>\n<p>By the way, you can take a look at the <a href="/support">Support page</a>.</p>\n<p>My goal is not to be rich. I want to be financially independent to support this website and have more time to dedicate to sharing more well-crafted posts.</p>\n<p>I&#39;m also planning to experiment with other media like podcast and youtube. I already have a microphone and I&#39;m saving money to buy a camera to record videos. As I wrote more than 50 pieces of content, I can use them all to provide in other formats like video and audio. So the money from paid subscribers and patrons will be also used to scale my content.</p>\n',
  },
  {
    title: 'Refactoring Setup',
    content:
      '<p>I created this website a long time ago. At that time, I didn&#39;t know any JavaScript framework nor JavaScript, actually. So I made it with Pure HTML and CSS (and some bits of JavaScript).</p>\n<p>Running this website was painful to maintain and create new features. If I wanted to create a new feature for the post page, I needed to replicate for all HTML files and it was more than 50 files. In the era of UI components, the DX is so much better. I create one component and reuse it in the entire application. This was I was aiming for.</p>\n<p>This is why decided to refactor all my website using React. Why React? Just because I like it and I feel fairly proficient in it.</p>\n<hr>\n<p>This post is part of this <a href="/series/website-changelog">Website Changelog</a> and the very first one.</p>\n<p>In this post, we&#39;ll setup the project with some nice tooling I&#39;ve been working on these days. It&#39;ll be a NextJS application powered by TypeScript and nice devtools like Prettier, Jest, and the Testing Library.</p>\n<p>We&#39;ll also see how to setup husky to help make our codebase consistent running Prettier on pre-commit. Let&#39;s dive in.</p>\n<h2 id="nextjs--typescript">NextJS &amp; TypeScript</h2>\n<p>NextJS setup with TypeScript is pretty easy. We just need to use its CLI:</p>\n<pre><code class="hljs language-jsx">yarn create next-app --typescript\n</code></pre>\n<p>And done! We have the whole ready to be run. Just start the dev server and we can see the app running:</p>\n<pre><code class="hljs language-jsx">yarn dev\n</code></pre>\n<p>Now you&#39;re able to access <code>[localhost:3000](http://localhost:3000)</code> and see the app running.</p>\n<p>It comes with the whole TypeScript initial setup like:</p>\n<ul>\n<li><code>tsconfig.json</code>: the compiler configuration for the TypeScript</li>\n<li><code>next-env.d.ts</code>: the declaration types for NextJS</li>\n<li><code>_app.tsx</code>: the main app that runs the pages setup with the extension <code>.tsx</code></li>\n<li><code>index.tsx</code>: the <code>/</code> page as an example of a <code>.tsx</code> component</li>\n</ul>\n<h2 id="prettier">Prettier</h2>\n<p>Prettier is an opinionated code formatter. It supports many languages, it&#39;s configurable, and it&#39;s heavily used in the JavaScript community.</p>\n<p>A couple of days ago, Anthony joked about Prettier not respecting himself. And I said that I love prettier for <em>respecting</em> consistency:</p>\n<p><a href="https://twitter.com/wordsofteekay/status/1399090968301801473">https://twitter.com/leandrotk_/status/1399090968301801473</a></p>\n<p>I think that&#39;s the important &quot;word&quot;: consistency. When working in a big company with different teams or just many people in the same team, code consistency is key.</p>\n<p>To configure Prettier is very simple. Let&#39;s take a look:</p>\n<pre><code class="hljs language-bash">yarn add --dev --exact prettier\n</code></pre>\n<p>Create a file <code>.prettierrc</code>:</p>\n<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;singleQuote&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;trailingComma&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span>\n<span class="hljs-punctuation">}</span>\n</code></pre>\n<p>And the configuration is pretty much it. To make it work in your editor, you&#39;ll probably need to install a plugin or extension. I&#39;ve been using vscode with Prettier and it looks great.</p>\n<p>We can also do other two things to make it more complete:</p>\n<ul>\n<li>Add a <code>.prettierignore</code> file to ignore files that we don&#39;t want to run Prettier</li>\n</ul>\n<pre><code class="hljs language-json">node_modules\n.next\n.yarn.lock\n</code></pre>\n<p>For a NextJS project, we&#39;ll add the common <code>node_modules</code> folder to the ignore file, the <code>.yarn.lock</code>, and the <code>.next</code> folder that&#39;s generated from the NextJS dev build.</p>\n<ul>\n<li>Run prettier on pre-commit to make sure all changes are <em>Prettier</em>.</li>\n</ul>\n<p>To make this works, we can use lint-staged and husky. The easier way is to run this command:</p>\n<pre><code class="hljs language-json">npx mrm@<span class="hljs-number">2</span> lint-staged\n</code></pre>\n<p>It&#39;ll configure basically everything you need to run prettier on pre-commit. The only thing that I needed to do was adding the important file extensions for this project, more specifically <code>.tsx</code> and <code>.ts</code>:</p>\n<pre><code class="hljs language-json"><span class="hljs-attr">&quot;lint-staged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;*.{js,ts,tsx}&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint --cache --fix&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;*.{js,jsx,css,md,ts,tsx}&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier --write&quot;</span>\n<span class="hljs-punctuation">}</span>\n</code></pre>\n<p>This configuration was added by the command in the <code>package.json</code> file. If you add a new file with any of these extensions, it&#39;ll run prettier on each file that is in the git staged area before the commit.</p>\n<p>Great, now we can make sure the project&#39;s code will be consistent from beginning to the end.</p>\n<h2 id="testing-with-jest-and-testing-library">Testing with Jest and Testing Library</h2>\n<p>Testing is a big part of a project&#39;s setup. When building software, we want to ship it with confidence that it really works. Not only now, but across many releases we&#39;ll do. Automation is also important in terms of velocity.</p>\n<p>To be able to have this confidence, I always rely on Jest, a testing framework, and the Testing Library + its helpers to do the job. First jest:</p>\n<pre><code class="hljs language-bash">yarn add -D jest @types/jest babel-jest jest-axe @types/jest-axe\n</code></pre>\n<ul>\n<li><code>jest</code>: the testing framework</li>\n<li><code>@types/jest</code>: the types to work well with TypeScript</li>\n<li><code>babel-jest</code>: compiles JavaScript code for the tests files</li>\n<li><code>jest-axe</code>: a custom Jest matcher to handle accessibility testing</li>\n<li><code>@types/jest-axe</code>: the types to work well with TypeScript</li>\n</ul>\n<p>After installing all the necessary dependencies, we need to add the configuration.</p>\n<p><code>jest.setup.js</code>:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;jest-axe/extend-expect&#x27;</span>;\n</code></pre>\n<p><code>jest.config.js</code>:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {\n  <span class="hljs-attr">setupFilesAfterEnv</span>: [<span class="hljs-string">&#x27;./jest.setup.js&#x27;</span>],\n  <span class="hljs-attr">testEnvironment</span>: <span class="hljs-string">&#x27;jsdom&#x27;</span>,\n};\n</code></pre>\n<p><code>.babelrc</code>:</p>\n<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;presets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;next/babel&quot;</span><span class="hljs-punctuation">]</span>\n<span class="hljs-punctuation">}</span>\n</code></pre>\n<p><code>package.json</code>:</p>\n<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>\n  ...\n    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jest&quot;</span><span class="hljs-punctuation">,</span>\n    <span class="hljs-attr">&quot;test:watch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jest --watch&quot;</span>\n    ...\n<span class="hljs-punctuation">}</span>\n</code></pre>\n<p>And now we are able to run our tests by calling these commands:</p>\n<pre><code class="hljs language-bash">yarn <span class="hljs-built_in">test</span>\nyarn <span class="hljs-built_in">test</span>:watch\n</code></pre>\n<p>For the Testing Library, it&#39;s simpler. We just need to install it and start using it.</p>\n<pre><code class="hljs language-json">yarn add -D @testing-library/react @testing-library/jest-dom\n</code></pre>\n<ul>\n<li><code>@testing-library/react</code>: the testing tool to test react components</li>\n<li><code>@testing-library/jest-dom</code>: it provides custom matchers for jest. I really like to use the <code>toBeInTheDocument</code> matcher for component testing.</li>\n</ul>\n<p>The only configuration I needed to do was adding the <code>jest-dom</code> to the testing setup to enable the matchers for test files.</p>\n<p><code>jest.setup.js</code>:</p>\n<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@testing-library/jest-dom&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;jest-axe/extend-expect&#x27;</span>;\n</code></pre>\n<p>I didn&#39;t setup Cypress because I want to focus on the search implementation first, but we&#39;ll see in the last episodes of this series that we&#39;ll try to implement an integration test with Cypress to test our app.</p>\n<h2 id="continuous-integration">Continuous Integration</h2>\n<p>I also automated some code checking with the help of Github actions. I created a workflow to run on every push and the ideas is to type check my code, check code format, run lint, and run tests.</p>\n<p>To start, I run an action to setup the node version based on my <code>.nvmrc</code>.</p>\n<pre><code class="hljs language-yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>\n<span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Read</span> <span class="hljs-string">.nvmrc</span>\n  <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;##[set-output name=NVMRC;]$(cat .nvmrc)&quot;</span>\n  <span class="hljs-attr">id:</span> <span class="hljs-string">nvm</span>\n\n<span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">(.nvmrc)</span>\n  <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span>\n  <span class="hljs-attr">with:</span>\n    <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;$<span class="hljs-template-variable">{{ steps.nvm.outputs.NVMRC }}</span>&#x27;</span>\n</code></pre>\n<p>And the machine is able to install all dependencies.</p>\n<pre><code class="hljs language-yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span>\n  <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span>\n</code></pre>\n<p>And then the following steps I mentioned. Type check code with Typescript.</p>\n<pre><code class="hljs language-yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Type</span> <span class="hljs-string">check</span> <span class="hljs-string">code</span> <span class="hljs-string">w/</span> <span class="hljs-string">TypeScript</span>\n  <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">typecheck</span>\n</code></pre>\n<p>Check code format with Prettier:</p>\n<pre><code class="hljs language-yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">code</span> <span class="hljs-string">format</span> <span class="hljs-string">w/</span> <span class="hljs-string">Prettier</span>\n  <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">prettier:check</span>\n</code></pre>\n<p>Analyze code with ESLint:</p>\n<pre><code class="hljs language-yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Analyze</span> <span class="hljs-string">code</span> <span class="hljs-string">w/</span> <span class="hljs-string">ESLint</span>\n  <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">lint</span>\n</code></pre>\n<p>Test code with Jest:</p>\n<pre><code class="hljs language-yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Test</span> <span class="hljs-string">code</span> <span class="hljs-string">w/</span> <span class="hljs-string">Jest</span>\n  <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">test</span>\n</code></pre>\n<p>And this is the entire file.</p>\n<pre><code class="hljs language-yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Push</span> <span class="hljs-string">CI</span>\n\n<span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]\n\n<span class="hljs-attr">jobs:</span>\n  <span class="hljs-attr">build:</span>\n    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>\n    <span class="hljs-attr">steps:</span>\n      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>\n      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Read</span> <span class="hljs-string">.nvmrc</span>\n        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;##[set-output name=NVMRC;]$(cat .nvmrc)&quot;</span>\n        <span class="hljs-attr">id:</span> <span class="hljs-string">nvm</span>\n\n      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">(.nvmrc)</span>\n        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span>\n        <span class="hljs-attr">with:</span>\n          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;$<span class="hljs-template-variable">{{ steps.nvm.outputs.NVMRC }}</span>&#x27;</span>\n\n      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span>\n        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span>\n\n      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Type</span> <span class="hljs-string">check</span> <span class="hljs-string">code</span> <span class="hljs-string">w/</span> <span class="hljs-string">TypeScript</span>\n        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">typecheck</span>\n\n      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">code</span> <span class="hljs-string">format</span> <span class="hljs-string">w/</span> <span class="hljs-string">Prettier</span>\n        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">prettier:check</span>\n\n      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Analyze</span> <span class="hljs-string">code</span> <span class="hljs-string">w/</span> <span class="hljs-string">ESLint</span>\n        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">lint</span>\n</code></pre>\n<p>In the future, I have a task to implement integration tests with Cypress and gain more confidence when shipping new features or changes. And it will requires me to add a new step to run cypress tests on CI as well.</p>\n<h2 id="final-words">Final words</h2>\n<p>I&#39;m pretty happy with this new setup. I&#39;m even happier that the DX will improve a lot and it will enable me to improve the website and write more well-crafted content for everybody.</p>\n',
  },
];
